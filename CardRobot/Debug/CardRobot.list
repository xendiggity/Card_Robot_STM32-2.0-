
CardRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e84  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800900c  0800900c  0000a00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009028  08009028  0000b080  2**0
                  CONTENTS
  4 .ARM          00000008  08009028  08009028  0000a028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009030  08009030  0000b080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009030  08009030  0000a030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009034  08009034  0000a034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08009038  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b080  2**0
                  CONTENTS
 10 .bss          00000aac  20000080  20000080  0000b080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b2c  20000b2c  0000b080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001938e  00000000  00000000  0000b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e2f  00000000  00000000  0002443e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c8  00000000  00000000  00028270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000119e  00000000  00000000  00029938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024357  00000000  00000000  0002aad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001deac  00000000  00000000  0004ee2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3fb9  00000000  00000000  0006ccd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00140c92  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006508  00000000  00000000  00140cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  001471e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008ff4 	.word	0x08008ff4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	08008ff4 	.word	0x08008ff4

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	@ 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2iz>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800079c:	d215      	bcs.n	80007ca <__aeabi_d2iz+0x36>
 800079e:	d511      	bpl.n	80007c4 <__aeabi_d2iz+0x30>
 80007a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d912      	bls.n	80007d0 <__aeabi_d2iz+0x3c>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007ba:	fa23 f002 	lsr.w	r0, r3, r2
 80007be:	bf18      	it	ne
 80007c0:	4240      	negne	r0, r0
 80007c2:	4770      	bx	lr
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	4770      	bx	lr
 80007ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ce:	d105      	bne.n	80007dc <__aeabi_d2iz+0x48>
 80007d0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80007d4:	bf08      	it	eq
 80007d6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <__aeabi_uldivmod>:
 80007e4:	b953      	cbnz	r3, 80007fc <__aeabi_uldivmod+0x18>
 80007e6:	b94a      	cbnz	r2, 80007fc <__aeabi_uldivmod+0x18>
 80007e8:	2900      	cmp	r1, #0
 80007ea:	bf08      	it	eq
 80007ec:	2800      	cmpeq	r0, #0
 80007ee:	bf1c      	itt	ne
 80007f0:	f04f 31ff 	movne.w	r1, #4294967295
 80007f4:	f04f 30ff 	movne.w	r0, #4294967295
 80007f8:	f000 b96a 	b.w	8000ad0 <__aeabi_idiv0>
 80007fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000800:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000804:	f000 f806 	bl	8000814 <__udivmoddi4>
 8000808:	f8dd e004 	ldr.w	lr, [sp, #4]
 800080c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000810:	b004      	add	sp, #16
 8000812:	4770      	bx	lr

08000814 <__udivmoddi4>:
 8000814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000818:	9d08      	ldr	r5, [sp, #32]
 800081a:	460c      	mov	r4, r1
 800081c:	2b00      	cmp	r3, #0
 800081e:	d14e      	bne.n	80008be <__udivmoddi4+0xaa>
 8000820:	4694      	mov	ip, r2
 8000822:	458c      	cmp	ip, r1
 8000824:	4686      	mov	lr, r0
 8000826:	fab2 f282 	clz	r2, r2
 800082a:	d962      	bls.n	80008f2 <__udivmoddi4+0xde>
 800082c:	b14a      	cbz	r2, 8000842 <__udivmoddi4+0x2e>
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	4091      	lsls	r1, r2
 8000834:	fa20 f303 	lsr.w	r3, r0, r3
 8000838:	fa0c fc02 	lsl.w	ip, ip, r2
 800083c:	4319      	orrs	r1, r3
 800083e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000842:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000846:	fa1f f68c 	uxth.w	r6, ip
 800084a:	fbb1 f4f7 	udiv	r4, r1, r7
 800084e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000852:	fb07 1114 	mls	r1, r7, r4, r1
 8000856:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800085a:	fb04 f106 	mul.w	r1, r4, r6
 800085e:	4299      	cmp	r1, r3
 8000860:	d90a      	bls.n	8000878 <__udivmoddi4+0x64>
 8000862:	eb1c 0303 	adds.w	r3, ip, r3
 8000866:	f104 30ff 	add.w	r0, r4, #4294967295
 800086a:	f080 8112 	bcs.w	8000a92 <__udivmoddi4+0x27e>
 800086e:	4299      	cmp	r1, r3
 8000870:	f240 810f 	bls.w	8000a92 <__udivmoddi4+0x27e>
 8000874:	3c02      	subs	r4, #2
 8000876:	4463      	add	r3, ip
 8000878:	1a59      	subs	r1, r3, r1
 800087a:	fa1f f38e 	uxth.w	r3, lr
 800087e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000882:	fb07 1110 	mls	r1, r7, r0, r1
 8000886:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800088a:	fb00 f606 	mul.w	r6, r0, r6
 800088e:	429e      	cmp	r6, r3
 8000890:	d90a      	bls.n	80008a8 <__udivmoddi4+0x94>
 8000892:	eb1c 0303 	adds.w	r3, ip, r3
 8000896:	f100 31ff 	add.w	r1, r0, #4294967295
 800089a:	f080 80fc 	bcs.w	8000a96 <__udivmoddi4+0x282>
 800089e:	429e      	cmp	r6, r3
 80008a0:	f240 80f9 	bls.w	8000a96 <__udivmoddi4+0x282>
 80008a4:	4463      	add	r3, ip
 80008a6:	3802      	subs	r0, #2
 80008a8:	1b9b      	subs	r3, r3, r6
 80008aa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008ae:	2100      	movs	r1, #0
 80008b0:	b11d      	cbz	r5, 80008ba <__udivmoddi4+0xa6>
 80008b2:	40d3      	lsrs	r3, r2
 80008b4:	2200      	movs	r2, #0
 80008b6:	e9c5 3200 	strd	r3, r2, [r5]
 80008ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008be:	428b      	cmp	r3, r1
 80008c0:	d905      	bls.n	80008ce <__udivmoddi4+0xba>
 80008c2:	b10d      	cbz	r5, 80008c8 <__udivmoddi4+0xb4>
 80008c4:	e9c5 0100 	strd	r0, r1, [r5]
 80008c8:	2100      	movs	r1, #0
 80008ca:	4608      	mov	r0, r1
 80008cc:	e7f5      	b.n	80008ba <__udivmoddi4+0xa6>
 80008ce:	fab3 f183 	clz	r1, r3
 80008d2:	2900      	cmp	r1, #0
 80008d4:	d146      	bne.n	8000964 <__udivmoddi4+0x150>
 80008d6:	42a3      	cmp	r3, r4
 80008d8:	d302      	bcc.n	80008e0 <__udivmoddi4+0xcc>
 80008da:	4290      	cmp	r0, r2
 80008dc:	f0c0 80f0 	bcc.w	8000ac0 <__udivmoddi4+0x2ac>
 80008e0:	1a86      	subs	r6, r0, r2
 80008e2:	eb64 0303 	sbc.w	r3, r4, r3
 80008e6:	2001      	movs	r0, #1
 80008e8:	2d00      	cmp	r5, #0
 80008ea:	d0e6      	beq.n	80008ba <__udivmoddi4+0xa6>
 80008ec:	e9c5 6300 	strd	r6, r3, [r5]
 80008f0:	e7e3      	b.n	80008ba <__udivmoddi4+0xa6>
 80008f2:	2a00      	cmp	r2, #0
 80008f4:	f040 8090 	bne.w	8000a18 <__udivmoddi4+0x204>
 80008f8:	eba1 040c 	sub.w	r4, r1, ip
 80008fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000900:	fa1f f78c 	uxth.w	r7, ip
 8000904:	2101      	movs	r1, #1
 8000906:	fbb4 f6f8 	udiv	r6, r4, r8
 800090a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800090e:	fb08 4416 	mls	r4, r8, r6, r4
 8000912:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000916:	fb07 f006 	mul.w	r0, r7, r6
 800091a:	4298      	cmp	r0, r3
 800091c:	d908      	bls.n	8000930 <__udivmoddi4+0x11c>
 800091e:	eb1c 0303 	adds.w	r3, ip, r3
 8000922:	f106 34ff 	add.w	r4, r6, #4294967295
 8000926:	d202      	bcs.n	800092e <__udivmoddi4+0x11a>
 8000928:	4298      	cmp	r0, r3
 800092a:	f200 80cd 	bhi.w	8000ac8 <__udivmoddi4+0x2b4>
 800092e:	4626      	mov	r6, r4
 8000930:	1a1c      	subs	r4, r3, r0
 8000932:	fa1f f38e 	uxth.w	r3, lr
 8000936:	fbb4 f0f8 	udiv	r0, r4, r8
 800093a:	fb08 4410 	mls	r4, r8, r0, r4
 800093e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000942:	fb00 f707 	mul.w	r7, r0, r7
 8000946:	429f      	cmp	r7, r3
 8000948:	d908      	bls.n	800095c <__udivmoddi4+0x148>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000952:	d202      	bcs.n	800095a <__udivmoddi4+0x146>
 8000954:	429f      	cmp	r7, r3
 8000956:	f200 80b0 	bhi.w	8000aba <__udivmoddi4+0x2a6>
 800095a:	4620      	mov	r0, r4
 800095c:	1bdb      	subs	r3, r3, r7
 800095e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000962:	e7a5      	b.n	80008b0 <__udivmoddi4+0x9c>
 8000964:	f1c1 0620 	rsb	r6, r1, #32
 8000968:	408b      	lsls	r3, r1
 800096a:	fa22 f706 	lsr.w	r7, r2, r6
 800096e:	431f      	orrs	r7, r3
 8000970:	fa20 fc06 	lsr.w	ip, r0, r6
 8000974:	fa04 f301 	lsl.w	r3, r4, r1
 8000978:	ea43 030c 	orr.w	r3, r3, ip
 800097c:	40f4      	lsrs	r4, r6
 800097e:	fa00 f801 	lsl.w	r8, r0, r1
 8000982:	0c38      	lsrs	r0, r7, #16
 8000984:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000988:	fbb4 fef0 	udiv	lr, r4, r0
 800098c:	fa1f fc87 	uxth.w	ip, r7
 8000990:	fb00 441e 	mls	r4, r0, lr, r4
 8000994:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000998:	fb0e f90c 	mul.w	r9, lr, ip
 800099c:	45a1      	cmp	r9, r4
 800099e:	fa02 f201 	lsl.w	r2, r2, r1
 80009a2:	d90a      	bls.n	80009ba <__udivmoddi4+0x1a6>
 80009a4:	193c      	adds	r4, r7, r4
 80009a6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009aa:	f080 8084 	bcs.w	8000ab6 <__udivmoddi4+0x2a2>
 80009ae:	45a1      	cmp	r9, r4
 80009b0:	f240 8081 	bls.w	8000ab6 <__udivmoddi4+0x2a2>
 80009b4:	f1ae 0e02 	sub.w	lr, lr, #2
 80009b8:	443c      	add	r4, r7
 80009ba:	eba4 0409 	sub.w	r4, r4, r9
 80009be:	fa1f f983 	uxth.w	r9, r3
 80009c2:	fbb4 f3f0 	udiv	r3, r4, r0
 80009c6:	fb00 4413 	mls	r4, r0, r3, r4
 80009ca:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009ce:	fb03 fc0c 	mul.w	ip, r3, ip
 80009d2:	45a4      	cmp	ip, r4
 80009d4:	d907      	bls.n	80009e6 <__udivmoddi4+0x1d2>
 80009d6:	193c      	adds	r4, r7, r4
 80009d8:	f103 30ff 	add.w	r0, r3, #4294967295
 80009dc:	d267      	bcs.n	8000aae <__udivmoddi4+0x29a>
 80009de:	45a4      	cmp	ip, r4
 80009e0:	d965      	bls.n	8000aae <__udivmoddi4+0x29a>
 80009e2:	3b02      	subs	r3, #2
 80009e4:	443c      	add	r4, r7
 80009e6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009ea:	fba0 9302 	umull	r9, r3, r0, r2
 80009ee:	eba4 040c 	sub.w	r4, r4, ip
 80009f2:	429c      	cmp	r4, r3
 80009f4:	46ce      	mov	lr, r9
 80009f6:	469c      	mov	ip, r3
 80009f8:	d351      	bcc.n	8000a9e <__udivmoddi4+0x28a>
 80009fa:	d04e      	beq.n	8000a9a <__udivmoddi4+0x286>
 80009fc:	b155      	cbz	r5, 8000a14 <__udivmoddi4+0x200>
 80009fe:	ebb8 030e 	subs.w	r3, r8, lr
 8000a02:	eb64 040c 	sbc.w	r4, r4, ip
 8000a06:	fa04 f606 	lsl.w	r6, r4, r6
 8000a0a:	40cb      	lsrs	r3, r1
 8000a0c:	431e      	orrs	r6, r3
 8000a0e:	40cc      	lsrs	r4, r1
 8000a10:	e9c5 6400 	strd	r6, r4, [r5]
 8000a14:	2100      	movs	r1, #0
 8000a16:	e750      	b.n	80008ba <__udivmoddi4+0xa6>
 8000a18:	f1c2 0320 	rsb	r3, r2, #32
 8000a1c:	fa20 f103 	lsr.w	r1, r0, r3
 8000a20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a24:	fa24 f303 	lsr.w	r3, r4, r3
 8000a28:	4094      	lsls	r4, r2
 8000a2a:	430c      	orrs	r4, r1
 8000a2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a30:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a34:	fa1f f78c 	uxth.w	r7, ip
 8000a38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a3c:	fb08 3110 	mls	r1, r8, r0, r3
 8000a40:	0c23      	lsrs	r3, r4, #16
 8000a42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a46:	fb00 f107 	mul.w	r1, r0, r7
 8000a4a:	4299      	cmp	r1, r3
 8000a4c:	d908      	bls.n	8000a60 <__udivmoddi4+0x24c>
 8000a4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a52:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a56:	d22c      	bcs.n	8000ab2 <__udivmoddi4+0x29e>
 8000a58:	4299      	cmp	r1, r3
 8000a5a:	d92a      	bls.n	8000ab2 <__udivmoddi4+0x29e>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	1a5b      	subs	r3, r3, r1
 8000a62:	b2a4      	uxth	r4, r4
 8000a64:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a68:	fb08 3311 	mls	r3, r8, r1, r3
 8000a6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a70:	fb01 f307 	mul.w	r3, r1, r7
 8000a74:	42a3      	cmp	r3, r4
 8000a76:	d908      	bls.n	8000a8a <__udivmoddi4+0x276>
 8000a78:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a80:	d213      	bcs.n	8000aaa <__udivmoddi4+0x296>
 8000a82:	42a3      	cmp	r3, r4
 8000a84:	d911      	bls.n	8000aaa <__udivmoddi4+0x296>
 8000a86:	3902      	subs	r1, #2
 8000a88:	4464      	add	r4, ip
 8000a8a:	1ae4      	subs	r4, r4, r3
 8000a8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a90:	e739      	b.n	8000906 <__udivmoddi4+0xf2>
 8000a92:	4604      	mov	r4, r0
 8000a94:	e6f0      	b.n	8000878 <__udivmoddi4+0x64>
 8000a96:	4608      	mov	r0, r1
 8000a98:	e706      	b.n	80008a8 <__udivmoddi4+0x94>
 8000a9a:	45c8      	cmp	r8, r9
 8000a9c:	d2ae      	bcs.n	80009fc <__udivmoddi4+0x1e8>
 8000a9e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000aa2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000aa6:	3801      	subs	r0, #1
 8000aa8:	e7a8      	b.n	80009fc <__udivmoddi4+0x1e8>
 8000aaa:	4631      	mov	r1, r6
 8000aac:	e7ed      	b.n	8000a8a <__udivmoddi4+0x276>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	e799      	b.n	80009e6 <__udivmoddi4+0x1d2>
 8000ab2:	4630      	mov	r0, r6
 8000ab4:	e7d4      	b.n	8000a60 <__udivmoddi4+0x24c>
 8000ab6:	46d6      	mov	lr, sl
 8000ab8:	e77f      	b.n	80009ba <__udivmoddi4+0x1a6>
 8000aba:	4463      	add	r3, ip
 8000abc:	3802      	subs	r0, #2
 8000abe:	e74d      	b.n	800095c <__udivmoddi4+0x148>
 8000ac0:	4606      	mov	r6, r0
 8000ac2:	4623      	mov	r3, r4
 8000ac4:	4608      	mov	r0, r1
 8000ac6:	e70f      	b.n	80008e8 <__udivmoddi4+0xd4>
 8000ac8:	3e02      	subs	r6, #2
 8000aca:	4463      	add	r3, ip
 8000acc:	e730      	b.n	8000930 <__udivmoddi4+0x11c>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_idiv0>:
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <microDelay>:
#define STEP_PIN GPIO_PIN_5
#define STEP_PORT GPIOC

int stepDelay = 450;

void microDelay(uint16_t delay) {
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <microDelay+0x30>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 8000ae6:	bf00      	nop
 8000ae8:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <microDelay+0x30>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000aee:	88fb      	ldrh	r3, [r7, #6]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d3f9      	bcc.n	8000ae8 <microDelay+0x14>
		;
}
 8000af4:	bf00      	nop
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000190 	.word	0x20000190

08000b08 <turn_motor_cw>:

// Rotates motor a designated amount slots CW
void turn_motor_cw(uint16_t i) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	80fb      	strh	r3, [r7, #6]
	//
	int slots = i * 29.63;
 8000b12:	88fb      	ldrh	r3, [r7, #6]
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fdd3 	bl	80006c0 <__aeabi_i2d>
 8000b1a:	a31f      	add	r3, pc, #124	@ (adr r3, 8000b98 <turn_motor_cw+0x90>)
 8000b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b20:	f7ff fb52 	bl	80001c8 <__aeabi_dmul>
 8000b24:	4602      	mov	r2, r0
 8000b26:	460b      	mov	r3, r1
 8000b28:	4610      	mov	r0, r2
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	f7ff fe32 	bl	8000794 <__aeabi_d2iz>
 8000b30:	4603      	mov	r3, r0
 8000b32:	60bb      	str	r3, [r7, #8]
	int x;
	HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2110      	movs	r1, #16
 8000b38:	4815      	ldr	r0, [pc, #84]	@ (8000b90 <turn_motor_cw+0x88>)
 8000b3a:	f001 f943 	bl	8001dc4 <HAL_GPIO_WritePin>
	for(x=0; x<slots; x=x+1)
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	e018      	b.n	8000b76 <turn_motor_cw+0x6e>
	{
		HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_SET);
 8000b44:	2201      	movs	r2, #1
 8000b46:	2120      	movs	r1, #32
 8000b48:	4811      	ldr	r0, [pc, #68]	@ (8000b90 <turn_motor_cw+0x88>)
 8000b4a:	f001 f93b 	bl	8001dc4 <HAL_GPIO_WritePin>
		microDelay(stepDelay);
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <turn_motor_cw+0x8c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ffbd 	bl	8000ad4 <microDelay>
		HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2120      	movs	r1, #32
 8000b5e:	480c      	ldr	r0, [pc, #48]	@ (8000b90 <turn_motor_cw+0x88>)
 8000b60:	f001 f930 	bl	8001dc4 <HAL_GPIO_WritePin>
		microDelay(stepDelay);
 8000b64:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <turn_motor_cw+0x8c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff ffb2 	bl	8000ad4 <microDelay>
	for(x=0; x<slots; x=x+1)
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	3301      	adds	r3, #1
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	68bb      	ldr	r3, [r7, #8]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	dbe2      	blt.n	8000b44 <turn_motor_cw+0x3c>
	}
	HAL_Delay(20);
 8000b7e:	2014      	movs	r0, #20
 8000b80:	f000 fe36 	bl	80017f0 <HAL_Delay>
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	f3af 8000 	nop.w
 8000b90:	40020800 	.word	0x40020800
 8000b94:	20000000 	.word	0x20000000
 8000b98:	ae147ae1 	.word	0xae147ae1
 8000b9c:	403da147 	.word	0x403da147

08000ba0 <turn_motor_ccw>:

// Rotates motor a designated amount of slots CCW
void turn_motor_ccw(uint16_t i) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	80fb      	strh	r3, [r7, #6]
	int slots = i * 29.63;
 8000baa:	88fb      	ldrh	r3, [r7, #6]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff fd87 	bl	80006c0 <__aeabi_i2d>
 8000bb2:	a31f      	add	r3, pc, #124	@ (adr r3, 8000c30 <turn_motor_ccw+0x90>)
 8000bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb8:	f7ff fb06 	bl	80001c8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f7ff fde6 	bl	8000794 <__aeabi_d2iz>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	60bb      	str	r3, [r7, #8]
	int x;
	HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2110      	movs	r1, #16
 8000bd0:	4815      	ldr	r0, [pc, #84]	@ (8000c28 <turn_motor_ccw+0x88>)
 8000bd2:	f001 f8f7 	bl	8001dc4 <HAL_GPIO_WritePin>
	for(x=0; x<slots; x=x+1)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	e018      	b.n	8000c0e <turn_motor_ccw+0x6e>
	{
		HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2120      	movs	r1, #32
 8000be0:	4811      	ldr	r0, [pc, #68]	@ (8000c28 <turn_motor_ccw+0x88>)
 8000be2:	f001 f8ef 	bl	8001dc4 <HAL_GPIO_WritePin>
		microDelay(stepDelay);
 8000be6:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <turn_motor_ccw+0x8c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	b29b      	uxth	r3, r3
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff71 	bl	8000ad4 <microDelay>
		HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2120      	movs	r1, #32
 8000bf6:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <turn_motor_ccw+0x88>)
 8000bf8:	f001 f8e4 	bl	8001dc4 <HAL_GPIO_WritePin>
		microDelay(stepDelay);
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <turn_motor_ccw+0x8c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ff66 	bl	8000ad4 <microDelay>
	for(x=0; x<slots; x=x+1)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	dbe2      	blt.n	8000bdc <turn_motor_ccw+0x3c>
	}
	HAL_Delay(20);
 8000c16:	2014      	movs	r0, #20
 8000c18:	f000 fdea 	bl	80017f0 <HAL_Delay>
}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	f3af 8000 	nop.w
 8000c28:	40020800 	.word	0x40020800
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	ae147ae1 	.word	0xae147ae1
 8000c34:	403da147 	.word	0x403da147

08000c38 <ir_trigger_align>:
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
	HAL_Delay(5);
}

// Does something once IR sensor is tripped
void ir_trigger_align() {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 0) {
 8000c3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c40:	480b      	ldr	r0, [pc, #44]	@ (8000c70 <ir_trigger_align+0x38>)
 8000c42:	f001 f8a7 	bl	8001d94 <HAL_GPIO_ReadPin>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d103      	bne.n	8000c54 <ir_trigger_align+0x1c>
		turn_motor_cw(5);
 8000c4c:	2005      	movs	r0, #5
 8000c4e:	f7ff ff5b 	bl	8000b08 <turn_motor_cw>
	} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 1) {
		turn_motor_ccw(15);

	}
}
 8000c52:	e00a      	b.n	8000c6a <ir_trigger_align+0x32>
	} else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8) == 1) {
 8000c54:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c58:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <ir_trigger_align+0x38>)
 8000c5a:	f001 f89b 	bl	8001d94 <HAL_GPIO_ReadPin>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d102      	bne.n	8000c6a <ir_trigger_align+0x32>
		turn_motor_ccw(15);
 8000c64:	200f      	movs	r0, #15
 8000c66:	f7ff ff9b 	bl	8000ba0 <turn_motor_ccw>
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40020800 	.word	0x40020800

08000c74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c78:	f000 fd48 	bl	800170c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c7c:	f000 f816 	bl	8000cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c80:	f000 f9ec 	bl	800105c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c84:	f000 f87c 	bl	8000d80 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000c88:	f000 f8a8 	bl	8000ddc <MX_I2S3_Init>
  MX_SPI1_Init();
 8000c8c:	f000 f8d6 	bl	8000e3c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000c90:	f007 fdb0 	bl	80087f4 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000c94:	f000 f908 	bl	8000ea8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c98:	f000 f956 	bl	8000f48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <main+0x34>)
 8000c9e:	f004 fe2b 	bl	80058f8 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		ir_trigger_align();
 8000ca2:	f7ff ffc9 	bl	8000c38 <ir_trigger_align>
 8000ca6:	e7fc      	b.n	8000ca2 <main+0x2e>
 8000ca8:	20000190 	.word	0x20000190

08000cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b094      	sub	sp, #80	@ 0x50
 8000cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb2:	f107 0320 	add.w	r3, r7, #32
 8000cb6:	2230      	movs	r2, #48	@ 0x30
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f008 f90c 	bl	8008ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	4b28      	ldr	r3, [pc, #160]	@ (8000d78 <SystemClock_Config+0xcc>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd8:	4a27      	ldr	r2, [pc, #156]	@ (8000d78 <SystemClock_Config+0xcc>)
 8000cda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce0:	4b25      	ldr	r3, [pc, #148]	@ (8000d78 <SystemClock_Config+0xcc>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cec:	2300      	movs	r3, #0
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	4b22      	ldr	r3, [pc, #136]	@ (8000d7c <SystemClock_Config+0xd0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a21      	ldr	r2, [pc, #132]	@ (8000d7c <SystemClock_Config+0xd0>)
 8000cf6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <SystemClock_Config+0xd0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d12:	2302      	movs	r3, #2
 8000d14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d16:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d20:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d24:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d26:	2302      	movs	r3, #2
 8000d28:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2e:	f107 0320 	add.w	r3, r7, #32
 8000d32:	4618      	mov	r0, r3
 8000d34:	f003 ff42 	bl	8004bbc <HAL_RCC_OscConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d3e:	f000 fa8d 	bl	800125c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d42:	230f      	movs	r3, #15
 8000d44:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d46:	2302      	movs	r3, #2
 8000d48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d4e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d58:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d5a:	f107 030c 	add.w	r3, r7, #12
 8000d5e:	2105      	movs	r1, #5
 8000d60:	4618      	mov	r0, r3
 8000d62:	f004 f9a3 	bl	80050ac <HAL_RCC_ClockConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d6c:	f000 fa76 	bl	800125c <Error_Handler>
  }
}
 8000d70:	bf00      	nop
 8000d72:	3750      	adds	r7, #80	@ 0x50
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40007000 	.word	0x40007000

08000d80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d84:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <MX_I2C1_Init+0x50>)
 8000d86:	4a13      	ldr	r2, [pc, #76]	@ (8000dd4 <MX_I2C1_Init+0x54>)
 8000d88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <MX_I2C1_Init+0x50>)
 8000d8c:	4a12      	ldr	r2, [pc, #72]	@ (8000dd8 <MX_I2C1_Init+0x58>)
 8000d8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <MX_I2C1_Init+0x50>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <MX_I2C1_Init+0x50>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <MX_I2C1_Init+0x50>)
 8000d9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000da2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da4:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <MX_I2C1_Init+0x50>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000daa:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <MX_I2C1_Init+0x50>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000db0:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <MX_I2C1_Init+0x50>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <MX_I2C1_Init+0x50>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dbc:	4804      	ldr	r0, [pc, #16]	@ (8000dd0 <MX_I2C1_Init+0x50>)
 8000dbe:	f003 f919 	bl	8003ff4 <HAL_I2C_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dc8:	f000 fa48 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	2000009c 	.word	0x2000009c
 8000dd4:	40005400 	.word	0x40005400
 8000dd8:	000186a0 	.word	0x000186a0

08000ddc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000de0:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <MX_I2S3_Init+0x54>)
 8000de2:	4a14      	ldr	r2, [pc, #80]	@ (8000e34 <MX_I2S3_Init+0x58>)
 8000de4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000de6:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <MX_I2S3_Init+0x54>)
 8000de8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dec:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000dee:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <MX_I2S3_Init+0x54>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000df4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <MX_I2S3_Init+0x54>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000e30 <MX_I2S3_Init+0x54>)
 8000dfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e00:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <MX_I2S3_Init+0x54>)
 8000e04:	4a0c      	ldr	r2, [pc, #48]	@ (8000e38 <MX_I2S3_Init+0x5c>)
 8000e06:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000e08:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <MX_I2S3_Init+0x54>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <MX_I2S3_Init+0x54>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <MX_I2S3_Init+0x54>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <MX_I2S3_Init+0x54>)
 8000e1c:	f003 fa2e 	bl	800427c <HAL_I2S_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000e26:	f000 fa19 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200000f0 	.word	0x200000f0
 8000e34:	40003c00 	.word	0x40003c00
 8000e38:	00017700 	.word	0x00017700

08000e3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e40:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <MX_SPI1_Init+0x64>)
 8000e42:	4a18      	ldr	r2, [pc, #96]	@ (8000ea4 <MX_SPI1_Init+0x68>)
 8000e44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e46:	4b16      	ldr	r3, [pc, #88]	@ (8000ea0 <MX_SPI1_Init+0x64>)
 8000e48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ea0 <MX_SPI1_Init+0x64>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e54:	4b12      	ldr	r3, [pc, #72]	@ (8000ea0 <MX_SPI1_Init+0x64>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <MX_SPI1_Init+0x64>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <MX_SPI1_Init+0x64>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea0 <MX_SPI1_Init+0x64>)
 8000e68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <MX_SPI1_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <MX_SPI1_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ea0 <MX_SPI1_Init+0x64>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e80:	4b07      	ldr	r3, [pc, #28]	@ (8000ea0 <MX_SPI1_Init+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e86:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <MX_SPI1_Init+0x64>)
 8000e88:	220a      	movs	r2, #10
 8000e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e8c:	4804      	ldr	r0, [pc, #16]	@ (8000ea0 <MX_SPI1_Init+0x64>)
 8000e8e:	f004 fc5b 	bl	8005748 <HAL_SPI_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e98:	f000 f9e0 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000138 	.word	0x20000138
 8000ea4:	40013000 	.word	0x40013000

08000ea8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eae:	f107 0308 	add.w	r3, r7, #8
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ebc:	463b      	mov	r3, r7
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ec4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f40 <MX_TIM1_Init+0x98>)
 8000ec6:	4a1f      	ldr	r2, [pc, #124]	@ (8000f44 <MX_TIM1_Init+0x9c>)
 8000ec8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000eca:	4b1d      	ldr	r3, [pc, #116]	@ (8000f40 <MX_TIM1_Init+0x98>)
 8000ecc:	22a7      	movs	r2, #167	@ 0xa7
 8000ece:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <MX_TIM1_Init+0x98>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f40 <MX_TIM1_Init+0x98>)
 8000ed8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000edc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ede:	4b18      	ldr	r3, [pc, #96]	@ (8000f40 <MX_TIM1_Init+0x98>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ee4:	4b16      	ldr	r3, [pc, #88]	@ (8000f40 <MX_TIM1_Init+0x98>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eea:	4b15      	ldr	r3, [pc, #84]	@ (8000f40 <MX_TIM1_Init+0x98>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ef0:	4813      	ldr	r0, [pc, #76]	@ (8000f40 <MX_TIM1_Init+0x98>)
 8000ef2:	f004 fcb2 	bl	800585a <HAL_TIM_Base_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000efc:	f000 f9ae 	bl	800125c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f04:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000f06:	f107 0308 	add.w	r3, r7, #8
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	480c      	ldr	r0, [pc, #48]	@ (8000f40 <MX_TIM1_Init+0x98>)
 8000f0e:	f004 fe77 	bl	8005c00 <HAL_TIM_ConfigClockSource>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000f18:	f000 f9a0 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f24:	463b      	mov	r3, r7
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	@ (8000f40 <MX_TIM1_Init+0x98>)
 8000f2a:	f005 fa27 	bl	800637c <HAL_TIMEx_MasterConfigSynchronization>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000f34:	f000 f992 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000190 	.word	0x20000190
 8000f44:	40010000 	.word	0x40010000

08000f48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08e      	sub	sp, #56	@ 0x38
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f4e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f5c:	f107 0320 	add.w	r3, r7, #32
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
 8000f74:	615a      	str	r2, [r3, #20]
 8000f76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f78:	4b37      	ldr	r3, [pc, #220]	@ (8001058 <MX_TIM2_Init+0x110>)
 8000f7a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f80:	4b35      	ldr	r3, [pc, #212]	@ (8001058 <MX_TIM2_Init+0x110>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f86:	4b34      	ldr	r3, [pc, #208]	@ (8001058 <MX_TIM2_Init+0x110>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000f8c:	4b32      	ldr	r3, [pc, #200]	@ (8001058 <MX_TIM2_Init+0x110>)
 8000f8e:	22ff      	movs	r2, #255	@ 0xff
 8000f90:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f92:	4b31      	ldr	r3, [pc, #196]	@ (8001058 <MX_TIM2_Init+0x110>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f98:	4b2f      	ldr	r3, [pc, #188]	@ (8001058 <MX_TIM2_Init+0x110>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f9e:	482e      	ldr	r0, [pc, #184]	@ (8001058 <MX_TIM2_Init+0x110>)
 8000fa0:	f004 fc5b 	bl	800585a <HAL_TIM_Base_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000faa:	f000 f957 	bl	800125c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000fb4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4827      	ldr	r0, [pc, #156]	@ (8001058 <MX_TIM2_Init+0x110>)
 8000fbc:	f004 fe20 	bl	8005c00 <HAL_TIM_ConfigClockSource>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000fc6:	f000 f949 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000fca:	4823      	ldr	r0, [pc, #140]	@ (8001058 <MX_TIM2_Init+0x110>)
 8000fcc:	f004 fcfc 	bl	80059c8 <HAL_TIM_PWM_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000fd6:	f000 f941 	bl	800125c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	481b      	ldr	r0, [pc, #108]	@ (8001058 <MX_TIM2_Init+0x110>)
 8000fea:	f005 f9c7 	bl	800637c <HAL_TIMEx_MasterConfigSynchronization>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000ff4:	f000 f932 	bl	800125c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff8:	2360      	movs	r3, #96	@ 0x60
 8000ffa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2200      	movs	r2, #0
 800100c:	4619      	mov	r1, r3
 800100e:	4812      	ldr	r0, [pc, #72]	@ (8001058 <MX_TIM2_Init+0x110>)
 8001010:	f004 fd34 	bl	8005a7c <HAL_TIM_PWM_ConfigChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800101a:	f000 f91f 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2204      	movs	r2, #4
 8001022:	4619      	mov	r1, r3
 8001024:	480c      	ldr	r0, [pc, #48]	@ (8001058 <MX_TIM2_Init+0x110>)
 8001026:	f004 fd29 	bl	8005a7c <HAL_TIM_PWM_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8001030:	f000 f914 	bl	800125c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2208      	movs	r2, #8
 8001038:	4619      	mov	r1, r3
 800103a:	4807      	ldr	r0, [pc, #28]	@ (8001058 <MX_TIM2_Init+0x110>)
 800103c:	f004 fd1e 	bl	8005a7c <HAL_TIM_PWM_ConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8001046:	f000 f909 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800104a:	4803      	ldr	r0, [pc, #12]	@ (8001058 <MX_TIM2_Init+0x110>)
 800104c:	f000 fa7a 	bl	8001544 <HAL_TIM_MspPostInit>

}
 8001050:	bf00      	nop
 8001052:	3738      	adds	r7, #56	@ 0x38
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200001d8 	.word	0x200001d8

0800105c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08c      	sub	sp, #48	@ 0x30
 8001060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	61bb      	str	r3, [r7, #24]
 8001076:	4b74      	ldr	r3, [pc, #464]	@ (8001248 <MX_GPIO_Init+0x1ec>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	4a73      	ldr	r2, [pc, #460]	@ (8001248 <MX_GPIO_Init+0x1ec>)
 800107c:	f043 0310 	orr.w	r3, r3, #16
 8001080:	6313      	str	r3, [r2, #48]	@ 0x30
 8001082:	4b71      	ldr	r3, [pc, #452]	@ (8001248 <MX_GPIO_Init+0x1ec>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	f003 0310 	and.w	r3, r3, #16
 800108a:	61bb      	str	r3, [r7, #24]
 800108c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
 8001092:	4b6d      	ldr	r3, [pc, #436]	@ (8001248 <MX_GPIO_Init+0x1ec>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	4a6c      	ldr	r2, [pc, #432]	@ (8001248 <MX_GPIO_Init+0x1ec>)
 8001098:	f043 0304 	orr.w	r3, r3, #4
 800109c:	6313      	str	r3, [r2, #48]	@ 0x30
 800109e:	4b6a      	ldr	r3, [pc, #424]	@ (8001248 <MX_GPIO_Init+0x1ec>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	4b66      	ldr	r3, [pc, #408]	@ (8001248 <MX_GPIO_Init+0x1ec>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	4a65      	ldr	r2, [pc, #404]	@ (8001248 <MX_GPIO_Init+0x1ec>)
 80010b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ba:	4b63      	ldr	r3, [pc, #396]	@ (8001248 <MX_GPIO_Init+0x1ec>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001248 <MX_GPIO_Init+0x1ec>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a5e      	ldr	r2, [pc, #376]	@ (8001248 <MX_GPIO_Init+0x1ec>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b5c      	ldr	r3, [pc, #368]	@ (8001248 <MX_GPIO_Init+0x1ec>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	4b58      	ldr	r3, [pc, #352]	@ (8001248 <MX_GPIO_Init+0x1ec>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a57      	ldr	r2, [pc, #348]	@ (8001248 <MX_GPIO_Init+0x1ec>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b55      	ldr	r3, [pc, #340]	@ (8001248 <MX_GPIO_Init+0x1ec>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b51      	ldr	r3, [pc, #324]	@ (8001248 <MX_GPIO_Init+0x1ec>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a50      	ldr	r2, [pc, #320]	@ (8001248 <MX_GPIO_Init+0x1ec>)
 8001108:	f043 0308 	orr.w	r3, r3, #8
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b4e      	ldr	r3, [pc, #312]	@ (8001248 <MX_GPIO_Init+0x1ec>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2108      	movs	r1, #8
 800111e:	484b      	ldr	r0, [pc, #300]	@ (800124c <MX_GPIO_Init+0x1f0>)
 8001120:	f000 fe50 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	2101      	movs	r1, #1
 8001128:	4849      	ldr	r0, [pc, #292]	@ (8001250 <MX_GPIO_Init+0x1f4>)
 800112a:	f000 fe4b 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2130      	movs	r1, #48	@ 0x30
 8001132:	4847      	ldr	r0, [pc, #284]	@ (8001250 <MX_GPIO_Init+0x1f4>)
 8001134:	f000 fe46 	bl	8001dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001138:	2200      	movs	r2, #0
 800113a:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800113e:	4845      	ldr	r0, [pc, #276]	@ (8001254 <MX_GPIO_Init+0x1f8>)
 8001140:	f000 fe40 	bl	8001dc4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001144:	2308      	movs	r3, #8
 8001146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 031c 	add.w	r3, r7, #28
 8001158:	4619      	mov	r1, r3
 800115a:	483c      	ldr	r0, [pc, #240]	@ (800124c <MX_GPIO_Init+0x1f0>)
 800115c:	f000 fc7e 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin PC4 PC5 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8001160:	2331      	movs	r3, #49	@ 0x31
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001164:	2301      	movs	r3, #1
 8001166:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001170:	f107 031c 	add.w	r3, r7, #28
 8001174:	4619      	mov	r1, r3
 8001176:	4836      	ldr	r0, [pc, #216]	@ (8001250 <MX_GPIO_Init+0x1f4>)
 8001178:	f000 fc70 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800117c:	2308      	movs	r3, #8
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800118c:	2305      	movs	r3, #5
 800118e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 031c 	add.w	r3, r7, #28
 8001194:	4619      	mov	r1, r3
 8001196:	482e      	ldr	r0, [pc, #184]	@ (8001250 <MX_GPIO_Init+0x1f4>)
 8001198:	f000 fc60 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800119c:	2304      	movs	r3, #4
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	4619      	mov	r1, r3
 80011ae:	482a      	ldr	r0, [pc, #168]	@ (8001258 <MX_GPIO_Init+0x1fc>)
 80011b0:	f000 fc54 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80011b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011c6:	2305      	movs	r3, #5
 80011c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	4821      	ldr	r0, [pc, #132]	@ (8001258 <MX_GPIO_Init+0x1fc>)
 80011d2:	f000 fc43 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011d6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80011da:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	4819      	ldr	r0, [pc, #100]	@ (8001254 <MX_GPIO_Init+0x1f8>)
 80011f0:	f000 fc34 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fa:	2300      	movs	r3, #0
 80011fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	4811      	ldr	r0, [pc, #68]	@ (8001250 <MX_GPIO_Init+0x1f4>)
 800120a:	f000 fc27 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800120e:	2320      	movs	r3, #32
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001212:	2300      	movs	r3, #0
 8001214:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800121a:	f107 031c 	add.w	r3, r7, #28
 800121e:	4619      	mov	r1, r3
 8001220:	480c      	ldr	r0, [pc, #48]	@ (8001254 <MX_GPIO_Init+0x1f8>)
 8001222:	f000 fc1b 	bl	8001a5c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001226:	2302      	movs	r3, #2
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800122a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800122e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	4619      	mov	r1, r3
 800123a:	4804      	ldr	r0, [pc, #16]	@ (800124c <MX_GPIO_Init+0x1f0>)
 800123c:	f000 fc0e 	bl	8001a5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001240:	bf00      	nop
 8001242:	3730      	adds	r7, #48	@ 0x30
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40023800 	.word	0x40023800
 800124c:	40021000 	.word	0x40021000
 8001250:	40020800 	.word	0x40020800
 8001254:	40020c00 	.word	0x40020c00
 8001258:	40020400 	.word	0x40020400

0800125c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001260:	b672      	cpsid	i
}
 8001262:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <Error_Handler+0x8>

08001268 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <HAL_MspInit+0x4c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001276:	4a0f      	ldr	r2, [pc, #60]	@ (80012b4 <HAL_MspInit+0x4c>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800127c:	6453      	str	r3, [r2, #68]	@ 0x44
 800127e:	4b0d      	ldr	r3, [pc, #52]	@ (80012b4 <HAL_MspInit+0x4c>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001282:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <HAL_MspInit+0x4c>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001292:	4a08      	ldr	r2, [pc, #32]	@ (80012b4 <HAL_MspInit+0x4c>)
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001298:	6413      	str	r3, [r2, #64]	@ 0x40
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <HAL_MspInit+0x4c>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012a6:	2007      	movs	r0, #7
 80012a8:	f000 fb96 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40023800 	.word	0x40023800

080012b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	@ 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a19      	ldr	r2, [pc, #100]	@ (800133c <HAL_I2C_MspInit+0x84>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d12c      	bne.n	8001334 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b18      	ldr	r3, [pc, #96]	@ (8001340 <HAL_I2C_MspInit+0x88>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a17      	ldr	r2, [pc, #92]	@ (8001340 <HAL_I2C_MspInit+0x88>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b15      	ldr	r3, [pc, #84]	@ (8001340 <HAL_I2C_MspInit+0x88>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80012f6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012fc:	2312      	movs	r3, #18
 80012fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001300:	2301      	movs	r3, #1
 8001302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001308:	2304      	movs	r3, #4
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	480c      	ldr	r0, [pc, #48]	@ (8001344 <HAL_I2C_MspInit+0x8c>)
 8001314:	f000 fba2 	bl	8001a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <HAL_I2C_MspInit+0x88>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001320:	4a07      	ldr	r2, [pc, #28]	@ (8001340 <HAL_I2C_MspInit+0x88>)
 8001322:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001326:	6413      	str	r3, [r2, #64]	@ 0x40
 8001328:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <HAL_I2C_MspInit+0x88>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	@ 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40005400 	.word	0x40005400
 8001340:	40023800 	.word	0x40023800
 8001344:	40020400 	.word	0x40020400

08001348 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08e      	sub	sp, #56	@ 0x38
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a31      	ldr	r2, [pc, #196]	@ (8001438 <HAL_I2S_MspInit+0xf0>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d15a      	bne.n	800142e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001378:	2301      	movs	r3, #1
 800137a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800137c:	23c0      	movs	r3, #192	@ 0xc0
 800137e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001380:	2302      	movs	r3, #2
 8001382:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4618      	mov	r0, r3
 800138a:	f004 f89b 	bl	80054c4 <HAL_RCCEx_PeriphCLKConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001394:	f7ff ff62 	bl	800125c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	4b27      	ldr	r3, [pc, #156]	@ (800143c <HAL_I2S_MspInit+0xf4>)
 800139e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a0:	4a26      	ldr	r2, [pc, #152]	@ (800143c <HAL_I2S_MspInit+0xf4>)
 80013a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80013a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a8:	4b24      	ldr	r3, [pc, #144]	@ (800143c <HAL_I2S_MspInit+0xf4>)
 80013aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	2300      	movs	r3, #0
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	4b20      	ldr	r3, [pc, #128]	@ (800143c <HAL_I2S_MspInit+0xf4>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013bc:	4a1f      	ldr	r2, [pc, #124]	@ (800143c <HAL_I2S_MspInit+0xf4>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c4:	4b1d      	ldr	r3, [pc, #116]	@ (800143c <HAL_I2S_MspInit+0xf4>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	4b19      	ldr	r3, [pc, #100]	@ (800143c <HAL_I2S_MspInit+0xf4>)
 80013d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d8:	4a18      	ldr	r2, [pc, #96]	@ (800143c <HAL_I2S_MspInit+0xf4>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e0:	4b16      	ldr	r3, [pc, #88]	@ (800143c <HAL_I2S_MspInit+0xf4>)
 80013e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80013ec:	2310      	movs	r3, #16
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80013fc:	2306      	movs	r3, #6
 80013fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001400:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001404:	4619      	mov	r1, r3
 8001406:	480e      	ldr	r0, [pc, #56]	@ (8001440 <HAL_I2S_MspInit+0xf8>)
 8001408:	f000 fb28 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800140c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001410:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800141e:	2306      	movs	r3, #6
 8001420:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001426:	4619      	mov	r1, r3
 8001428:	4806      	ldr	r0, [pc, #24]	@ (8001444 <HAL_I2S_MspInit+0xfc>)
 800142a:	f000 fb17 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800142e:	bf00      	nop
 8001430:	3738      	adds	r7, #56	@ 0x38
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40003c00 	.word	0x40003c00
 800143c:	40023800 	.word	0x40023800
 8001440:	40020000 	.word	0x40020000
 8001444:	40020800 	.word	0x40020800

08001448 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b08a      	sub	sp, #40	@ 0x28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a19      	ldr	r2, [pc, #100]	@ (80014cc <HAL_SPI_MspInit+0x84>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d12b      	bne.n	80014c2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <HAL_SPI_MspInit+0x88>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001472:	4a17      	ldr	r2, [pc, #92]	@ (80014d0 <HAL_SPI_MspInit+0x88>)
 8001474:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001478:	6453      	str	r3, [r2, #68]	@ 0x44
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <HAL_SPI_MspInit+0x88>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <HAL_SPI_MspInit+0x88>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148e:	4a10      	ldr	r2, [pc, #64]	@ (80014d0 <HAL_SPI_MspInit+0x88>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6313      	str	r3, [r2, #48]	@ 0x30
 8001496:	4b0e      	ldr	r3, [pc, #56]	@ (80014d0 <HAL_SPI_MspInit+0x88>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80014a2:	23e0      	movs	r3, #224	@ 0xe0
 80014a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a6:	2302      	movs	r3, #2
 80014a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ae:	2300      	movs	r3, #0
 80014b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014b2:	2305      	movs	r3, #5
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	@ (80014d4 <HAL_SPI_MspInit+0x8c>)
 80014be:	f000 facd 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014c2:	bf00      	nop
 80014c4:	3728      	adds	r7, #40	@ 0x28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40013000 	.word	0x40013000
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40020000 	.word	0x40020000

080014d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a15      	ldr	r2, [pc, #84]	@ (800153c <HAL_TIM_Base_MspInit+0x64>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d10e      	bne.n	8001508 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <HAL_TIM_Base_MspInit+0x68>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	4a13      	ldr	r2, [pc, #76]	@ (8001540 <HAL_TIM_Base_MspInit+0x68>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014fa:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <HAL_TIM_Base_MspInit+0x68>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001506:	e012      	b.n	800152e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001510:	d10d      	bne.n	800152e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <HAL_TIM_Base_MspInit+0x68>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	4a09      	ldr	r2, [pc, #36]	@ (8001540 <HAL_TIM_Base_MspInit+0x68>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6413      	str	r3, [r2, #64]	@ 0x40
 8001522:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <HAL_TIM_Base_MspInit+0x68>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40010000 	.word	0x40010000
 8001540:	40023800 	.word	0x40023800

08001544 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001564:	d11d      	bne.n	80015a2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b10      	ldr	r3, [pc, #64]	@ (80015ac <HAL_TIM_MspPostInit+0x68>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a0f      	ldr	r2, [pc, #60]	@ (80015ac <HAL_TIM_MspPostInit+0x68>)
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b0d      	ldr	r3, [pc, #52]	@ (80015ac <HAL_TIM_MspPostInit+0x68>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001582:	2307      	movs	r3, #7
 8001584:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001592:	2301      	movs	r3, #1
 8001594:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	4619      	mov	r1, r3
 800159c:	4804      	ldr	r0, [pc, #16]	@ (80015b0 <HAL_TIM_MspPostInit+0x6c>)
 800159e:	f000 fa5d 	bl	8001a5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015a2:	bf00      	nop
 80015a4:	3720      	adds	r7, #32
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020000 	.word	0x40020000

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <NMI_Handler+0x4>

080015bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c0:	bf00      	nop
 80015c2:	e7fd      	b.n	80015c0 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	bf00      	nop
 80015ca:	e7fd      	b.n	80015c8 <MemManage_Handler+0x4>

080015cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <BusFault_Handler+0x4>

080015d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <UsageFault_Handler+0x4>

080015dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160a:	f000 f8d1 	bl	80017b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <OTG_FS_IRQHandler+0x10>)
 800161a:	f000 fecd 	bl	80023b8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000604 	.word	0x20000604

08001628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001630:	4a14      	ldr	r2, [pc, #80]	@ (8001684 <_sbrk+0x5c>)
 8001632:	4b15      	ldr	r3, [pc, #84]	@ (8001688 <_sbrk+0x60>)
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800163c:	4b13      	ldr	r3, [pc, #76]	@ (800168c <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d102      	bne.n	800164a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001644:	4b11      	ldr	r3, [pc, #68]	@ (800168c <_sbrk+0x64>)
 8001646:	4a12      	ldr	r2, [pc, #72]	@ (8001690 <_sbrk+0x68>)
 8001648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164a:	4b10      	ldr	r3, [pc, #64]	@ (800168c <_sbrk+0x64>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	429a      	cmp	r2, r3
 8001656:	d207      	bcs.n	8001668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001658:	f007 fc56 	bl	8008f08 <__errno>
 800165c:	4603      	mov	r3, r0
 800165e:	220c      	movs	r2, #12
 8001660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	e009      	b.n	800167c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001668:	4b08      	ldr	r3, [pc, #32]	@ (800168c <_sbrk+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166e:	4b07      	ldr	r3, [pc, #28]	@ (800168c <_sbrk+0x64>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4413      	add	r3, r2
 8001676:	4a05      	ldr	r2, [pc, #20]	@ (800168c <_sbrk+0x64>)
 8001678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167a:	68fb      	ldr	r3, [r7, #12]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20020000 	.word	0x20020000
 8001688:	00000400 	.word	0x00000400
 800168c:	20000220 	.word	0x20000220
 8001690:	20000b30 	.word	0x20000b30

08001694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <SystemInit+0x20>)
 800169a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800169e:	4a05      	ldr	r2, [pc, #20]	@ (80016b4 <SystemInit+0x20>)
 80016a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed00 	.word	0xe000ed00

080016b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016f0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016bc:	f7ff ffea 	bl	8001694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016c0:	480c      	ldr	r0, [pc, #48]	@ (80016f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016c2:	490d      	ldr	r1, [pc, #52]	@ (80016f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016c4:	4a0d      	ldr	r2, [pc, #52]	@ (80016fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c8:	e002      	b.n	80016d0 <LoopCopyDataInit>

080016ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ce:	3304      	adds	r3, #4

080016d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016d4:	d3f9      	bcc.n	80016ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001700 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001704 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016dc:	e001      	b.n	80016e2 <LoopFillZerobss>

080016de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016e0:	3204      	adds	r2, #4

080016e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016e4:	d3fb      	bcc.n	80016de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016e6:	f007 fc15 	bl	8008f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ea:	f7ff fac3 	bl	8000c74 <main>
  bx  lr    
 80016ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80016fc:	08009038 	.word	0x08009038
  ldr r2, =_sbss
 8001700:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001704:	20000b2c 	.word	0x20000b2c

08001708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001708:	e7fe      	b.n	8001708 <ADC_IRQHandler>
	...

0800170c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001710:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <HAL_Init+0x40>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a0d      	ldr	r2, [pc, #52]	@ (800174c <HAL_Init+0x40>)
 8001716:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800171a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800171c:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0a      	ldr	r2, [pc, #40]	@ (800174c <HAL_Init+0x40>)
 8001722:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001726:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001728:	4b08      	ldr	r3, [pc, #32]	@ (800174c <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a07      	ldr	r2, [pc, #28]	@ (800174c <HAL_Init+0x40>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001732:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001734:	2003      	movs	r0, #3
 8001736:	f000 f94f 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800173a:	2000      	movs	r0, #0
 800173c:	f000 f808 	bl	8001750 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001740:	f7ff fd92 	bl	8001268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001744:	2300      	movs	r3, #0
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023c00 	.word	0x40023c00

08001750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001758:	4b12      	ldr	r3, [pc, #72]	@ (80017a4 <HAL_InitTick+0x54>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <HAL_InitTick+0x58>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4619      	mov	r1, r3
 8001762:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001766:	fbb3 f3f1 	udiv	r3, r3, r1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	4618      	mov	r0, r3
 8001770:	f000 f967 	bl	8001a42 <HAL_SYSTICK_Config>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e00e      	b.n	800179c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b0f      	cmp	r3, #15
 8001782:	d80a      	bhi.n	800179a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001784:	2200      	movs	r2, #0
 8001786:	6879      	ldr	r1, [r7, #4]
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
 800178c:	f000 f92f 	bl	80019ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001790:	4a06      	ldr	r2, [pc, #24]	@ (80017ac <HAL_InitTick+0x5c>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	20000004 	.word	0x20000004
 80017a8:	2000000c 	.word	0x2000000c
 80017ac:	20000008 	.word	0x20000008

080017b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017b4:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <HAL_IncTick+0x20>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <HAL_IncTick+0x24>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4413      	add	r3, r2
 80017c0:	4a04      	ldr	r2, [pc, #16]	@ (80017d4 <HAL_IncTick+0x24>)
 80017c2:	6013      	str	r3, [r2, #0]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	2000000c 	.word	0x2000000c
 80017d4:	20000224 	.word	0x20000224

080017d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  return uwTick;
 80017dc:	4b03      	ldr	r3, [pc, #12]	@ (80017ec <HAL_GetTick+0x14>)
 80017de:	681b      	ldr	r3, [r3, #0]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000224 	.word	0x20000224

080017f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017f8:	f7ff ffee 	bl	80017d8 <HAL_GetTick>
 80017fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001808:	d005      	beq.n	8001816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800180a:	4b0a      	ldr	r3, [pc, #40]	@ (8001834 <HAL_Delay+0x44>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4413      	add	r3, r2
 8001814:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001816:	bf00      	nop
 8001818:	f7ff ffde 	bl	80017d8 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	429a      	cmp	r2, r3
 8001826:	d8f7      	bhi.n	8001818 <HAL_Delay+0x28>
  {
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	2000000c 	.word	0x2000000c

08001838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001838:	b480      	push	{r7}
 800183a:	b085      	sub	sp, #20
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001848:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001854:	4013      	ands	r3, r2
 8001856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001860:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800186a:	4a04      	ldr	r2, [pc, #16]	@ (800187c <__NVIC_SetPriorityGrouping+0x44>)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	60d3      	str	r3, [r2, #12]
}
 8001870:	bf00      	nop
 8001872:	3714      	adds	r7, #20
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	e000ed00 	.word	0xe000ed00

08001880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001884:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <__NVIC_GetPriorityGrouping+0x18>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	0a1b      	lsrs	r3, r3, #8
 800188a:	f003 0307 	and.w	r3, r3, #7
}
 800188e:	4618      	mov	r0, r3
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	db0b      	blt.n	80018c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	f003 021f 	and.w	r2, r3, #31
 80018b4:	4907      	ldr	r1, [pc, #28]	@ (80018d4 <__NVIC_EnableIRQ+0x38>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	095b      	lsrs	r3, r3, #5
 80018bc:	2001      	movs	r0, #1
 80018be:	fa00 f202 	lsl.w	r2, r0, r2
 80018c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	e000e100 	.word	0xe000e100

080018d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	6039      	str	r1, [r7, #0]
 80018e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	db0a      	blt.n	8001902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	490c      	ldr	r1, [pc, #48]	@ (8001924 <__NVIC_SetPriority+0x4c>)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	0112      	lsls	r2, r2, #4
 80018f8:	b2d2      	uxtb	r2, r2
 80018fa:	440b      	add	r3, r1
 80018fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001900:	e00a      	b.n	8001918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4908      	ldr	r1, [pc, #32]	@ (8001928 <__NVIC_SetPriority+0x50>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	3b04      	subs	r3, #4
 8001910:	0112      	lsls	r2, r2, #4
 8001912:	b2d2      	uxtb	r2, r2
 8001914:	440b      	add	r3, r1
 8001916:	761a      	strb	r2, [r3, #24]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000e100 	.word	0xe000e100
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800192c:	b480      	push	{r7}
 800192e:	b089      	sub	sp, #36	@ 0x24
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f1c3 0307 	rsb	r3, r3, #7
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf28      	it	cs
 800194a:	2304      	movcs	r3, #4
 800194c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3304      	adds	r3, #4
 8001952:	2b06      	cmp	r3, #6
 8001954:	d902      	bls.n	800195c <NVIC_EncodePriority+0x30>
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3b03      	subs	r3, #3
 800195a:	e000      	b.n	800195e <NVIC_EncodePriority+0x32>
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	f04f 32ff 	mov.w	r2, #4294967295
 8001964:	69bb      	ldr	r3, [r7, #24]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43da      	mvns	r2, r3
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	401a      	ands	r2, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001974:	f04f 31ff 	mov.w	r1, #4294967295
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa01 f303 	lsl.w	r3, r1, r3
 800197e:	43d9      	mvns	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	4313      	orrs	r3, r2
         );
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	@ 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019a4:	d301      	bcc.n	80019aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a6:	2301      	movs	r3, #1
 80019a8:	e00f      	b.n	80019ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019aa:	4a0a      	ldr	r2, [pc, #40]	@ (80019d4 <SysTick_Config+0x40>)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3b01      	subs	r3, #1
 80019b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019b2:	210f      	movs	r1, #15
 80019b4:	f04f 30ff 	mov.w	r0, #4294967295
 80019b8:	f7ff ff8e 	bl	80018d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019bc:	4b05      	ldr	r3, [pc, #20]	@ (80019d4 <SysTick_Config+0x40>)
 80019be:	2200      	movs	r2, #0
 80019c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019c2:	4b04      	ldr	r3, [pc, #16]	@ (80019d4 <SysTick_Config+0x40>)
 80019c4:	2207      	movs	r2, #7
 80019c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	e000e010 	.word	0xe000e010

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff29 	bl	8001838 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a00:	f7ff ff3e 	bl	8001880 <__NVIC_GetPriorityGrouping>
 8001a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	68b9      	ldr	r1, [r7, #8]
 8001a0a:	6978      	ldr	r0, [r7, #20]
 8001a0c:	f7ff ff8e 	bl	800192c <NVIC_EncodePriority>
 8001a10:	4602      	mov	r2, r0
 8001a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff5d 	bl	80018d8 <__NVIC_SetPriority>
}
 8001a1e:	bf00      	nop
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff31 	bl	800189c <__NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffa2 	bl	8001994 <SysTick_Config>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b089      	sub	sp, #36	@ 0x24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
 8001a76:	e16b      	b.n	8001d50 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a78:	2201      	movs	r2, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	f040 815a 	bne.w	8001d4a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d005      	beq.n	8001aae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d130      	bne.n	8001b10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 0201 	and.w	r2, r3, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d017      	beq.n	8001b4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	4013      	ands	r3, r2
 8001b32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d123      	bne.n	8001ba0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	08da      	lsrs	r2, r3, #3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3208      	adds	r2, #8
 8001b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	220f      	movs	r2, #15
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	691a      	ldr	r2, [r3, #16]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	08da      	lsrs	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3208      	adds	r2, #8
 8001b9a:	69b9      	ldr	r1, [r7, #24]
 8001b9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0203 	and.w	r2, r3, #3
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80b4 	beq.w	8001d4a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b60      	ldr	r3, [pc, #384]	@ (8001d68 <HAL_GPIO_Init+0x30c>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bea:	4a5f      	ldr	r2, [pc, #380]	@ (8001d68 <HAL_GPIO_Init+0x30c>)
 8001bec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bf0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bf2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d68 <HAL_GPIO_Init+0x30c>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bfe:	4a5b      	ldr	r2, [pc, #364]	@ (8001d6c <HAL_GPIO_Init+0x310>)
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	3302      	adds	r3, #2
 8001c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	220f      	movs	r2, #15
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a52      	ldr	r2, [pc, #328]	@ (8001d70 <HAL_GPIO_Init+0x314>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d02b      	beq.n	8001c82 <HAL_GPIO_Init+0x226>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a51      	ldr	r2, [pc, #324]	@ (8001d74 <HAL_GPIO_Init+0x318>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d025      	beq.n	8001c7e <HAL_GPIO_Init+0x222>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a50      	ldr	r2, [pc, #320]	@ (8001d78 <HAL_GPIO_Init+0x31c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d01f      	beq.n	8001c7a <HAL_GPIO_Init+0x21e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4f      	ldr	r2, [pc, #316]	@ (8001d7c <HAL_GPIO_Init+0x320>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d019      	beq.n	8001c76 <HAL_GPIO_Init+0x21a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4e      	ldr	r2, [pc, #312]	@ (8001d80 <HAL_GPIO_Init+0x324>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d013      	beq.n	8001c72 <HAL_GPIO_Init+0x216>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4d      	ldr	r2, [pc, #308]	@ (8001d84 <HAL_GPIO_Init+0x328>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d00d      	beq.n	8001c6e <HAL_GPIO_Init+0x212>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4c      	ldr	r2, [pc, #304]	@ (8001d88 <HAL_GPIO_Init+0x32c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d007      	beq.n	8001c6a <HAL_GPIO_Init+0x20e>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4b      	ldr	r2, [pc, #300]	@ (8001d8c <HAL_GPIO_Init+0x330>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d101      	bne.n	8001c66 <HAL_GPIO_Init+0x20a>
 8001c62:	2307      	movs	r3, #7
 8001c64:	e00e      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c66:	2308      	movs	r3, #8
 8001c68:	e00c      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c6a:	2306      	movs	r3, #6
 8001c6c:	e00a      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c6e:	2305      	movs	r3, #5
 8001c70:	e008      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c72:	2304      	movs	r3, #4
 8001c74:	e006      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c76:	2303      	movs	r3, #3
 8001c78:	e004      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e002      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <HAL_GPIO_Init+0x228>
 8001c82:	2300      	movs	r3, #0
 8001c84:	69fa      	ldr	r2, [r7, #28]
 8001c86:	f002 0203 	and.w	r2, r2, #3
 8001c8a:	0092      	lsls	r2, r2, #2
 8001c8c:	4093      	lsls	r3, r2
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c94:	4935      	ldr	r1, [pc, #212]	@ (8001d6c <HAL_GPIO_Init+0x310>)
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca2:	4b3b      	ldr	r3, [pc, #236]	@ (8001d90 <HAL_GPIO_Init+0x334>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	43db      	mvns	r3, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4013      	ands	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d003      	beq.n	8001cc6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cc6:	4a32      	ldr	r2, [pc, #200]	@ (8001d90 <HAL_GPIO_Init+0x334>)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ccc:	4b30      	ldr	r3, [pc, #192]	@ (8001d90 <HAL_GPIO_Init+0x334>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d003      	beq.n	8001cf0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cf0:	4a27      	ldr	r2, [pc, #156]	@ (8001d90 <HAL_GPIO_Init+0x334>)
 8001cf2:	69bb      	ldr	r3, [r7, #24]
 8001cf4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cf6:	4b26      	ldr	r3, [pc, #152]	@ (8001d90 <HAL_GPIO_Init+0x334>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8001d90 <HAL_GPIO_Init+0x334>)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d20:	4b1b      	ldr	r3, [pc, #108]	@ (8001d90 <HAL_GPIO_Init+0x334>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d44:	4a12      	ldr	r2, [pc, #72]	@ (8001d90 <HAL_GPIO_Init+0x334>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	61fb      	str	r3, [r7, #28]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	2b0f      	cmp	r3, #15
 8001d54:	f67f ae90 	bls.w	8001a78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d58:	bf00      	nop
 8001d5a:	bf00      	nop
 8001d5c:	3724      	adds	r7, #36	@ 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40013800 	.word	0x40013800
 8001d70:	40020000 	.word	0x40020000
 8001d74:	40020400 	.word	0x40020400
 8001d78:	40020800 	.word	0x40020800
 8001d7c:	40020c00 	.word	0x40020c00
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40021400 	.word	0x40021400
 8001d88:	40021800 	.word	0x40021800
 8001d8c:	40021c00 	.word	0x40021c00
 8001d90:	40013c00 	.word	0x40013c00

08001d94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691a      	ldr	r2, [r3, #16]
 8001da4:	887b      	ldrh	r3, [r7, #2]
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d002      	beq.n	8001db2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
 8001db0:	e001      	b.n	8001db6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001db2:	2300      	movs	r3, #0
 8001db4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	807b      	strh	r3, [r7, #2]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dd4:	787b      	ldrb	r3, [r7, #1]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dda:	887a      	ldrh	r2, [r7, #2]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001de0:	e003      	b.n	8001dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001de2:	887b      	ldrh	r3, [r7, #2]
 8001de4:	041a      	lsls	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	619a      	str	r2, [r3, #24]
}
 8001dea:	bf00      	nop
 8001dec:	370c      	adds	r7, #12
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b086      	sub	sp, #24
 8001dfa:	af02      	add	r7, sp, #8
 8001dfc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e059      	b.n	8001ebc <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d106      	bne.n	8001e28 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f006 fd3a 	bl	800889c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e36:	d102      	bne.n	8001e3e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f004 fb8b 	bl	800655e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7c1a      	ldrb	r2, [r3, #16]
 8001e50:	f88d 2000 	strb.w	r2, [sp]
 8001e54:	3304      	adds	r3, #4
 8001e56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e58:	f004 fb0c 	bl	8006474 <USB_CoreInit>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2202      	movs	r2, #2
 8001e66:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e026      	b.n	8001ebc <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2101      	movs	r1, #1
 8001e74:	4618      	mov	r0, r3
 8001e76:	f004 fb83 	bl	8006580 <USB_SetCurrentMode>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d005      	beq.n	8001e8c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e017      	b.n	8001ebc <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	7c1a      	ldrb	r2, [r3, #16]
 8001e94:	f88d 2000 	strb.w	r2, [sp]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e9c:	f004 fd26 	bl	80068ec <USB_HostInit>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d005      	beq.n	8001eb2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e004      	b.n	8001ebc <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b08b      	sub	sp, #44	@ 0x2c
 8001ec8:	af04      	add	r7, sp, #16
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	4608      	mov	r0, r1
 8001ece:	4611      	mov	r1, r2
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	70fb      	strb	r3, [r7, #3]
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	70bb      	strb	r3, [r7, #2]
 8001eda:	4613      	mov	r3, r2
 8001edc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001ede:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001ee0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d101      	bne.n	8001ef0 <HAL_HCD_HC_Init+0x2c>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e09d      	b.n	800202c <HAL_HCD_HC_Init+0x168>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001ef8:	78fa      	ldrb	r2, [r7, #3]
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	1a9b      	subs	r3, r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	3319      	adds	r3, #25
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f0c:	78fa      	ldrb	r2, [r7, #3]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	1a9b      	subs	r3, r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	3314      	adds	r3, #20
 8001f1c:	787a      	ldrb	r2, [r7, #1]
 8001f1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f20:	78fa      	ldrb	r2, [r7, #3]
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	011b      	lsls	r3, r3, #4
 8001f28:	1a9b      	subs	r3, r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3315      	adds	r3, #21
 8001f30:	78fa      	ldrb	r2, [r7, #3]
 8001f32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f34:	78fa      	ldrb	r2, [r7, #3]
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	440b      	add	r3, r1
 8001f42:	3326      	adds	r3, #38	@ 0x26
 8001f44:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001f48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	78bb      	ldrb	r3, [r7, #2]
 8001f4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f52:	b2d8      	uxtb	r0, r3
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	1a9b      	subs	r3, r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	440b      	add	r3, r1
 8001f60:	3316      	adds	r3, #22
 8001f62:	4602      	mov	r2, r0
 8001f64:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	4619      	mov	r1, r3
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 fbac 	bl	80026c8 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001f70:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	da0a      	bge.n	8001f8e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f78:	78fa      	ldrb	r2, [r7, #3]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	1a9b      	subs	r3, r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	3317      	adds	r3, #23
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
 8001f8c:	e009      	b.n	8001fa2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001f8e:	78fa      	ldrb	r2, [r7, #3]
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4613      	mov	r3, r2
 8001f94:	011b      	lsls	r3, r3, #4
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	3317      	adds	r3, #23
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 fdda 	bl	8006b60 <USB_GetHostSpeed>
 8001fac:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001fae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d10b      	bne.n	8001fce <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001fb6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d107      	bne.n	8001fce <HAL_HCD_HC_Init+0x10a>
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d104      	bne.n	8001fce <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	2bbc      	cmp	r3, #188	@ 0xbc
 8001fc8:	d901      	bls.n	8001fce <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001fca:	23bc      	movs	r3, #188	@ 0xbc
 8001fcc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001fce:	78fa      	ldrb	r2, [r7, #3]
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	1a9b      	subs	r3, r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	3318      	adds	r3, #24
 8001fde:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001fe2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001fe4:	78fa      	ldrb	r2, [r7, #3]
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	b298      	uxth	r0, r3
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	011b      	lsls	r3, r3, #4
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3328      	adds	r3, #40	@ 0x28
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6818      	ldr	r0, [r3, #0]
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	b29b      	uxth	r3, r3
 8002004:	787c      	ldrb	r4, [r7, #1]
 8002006:	78ba      	ldrb	r2, [r7, #2]
 8002008:	78f9      	ldrb	r1, [r7, #3]
 800200a:	9302      	str	r3, [sp, #8]
 800200c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	4623      	mov	r3, r4
 800201a:	f004 fdc9 	bl	8006bb0 <USB_HC_Init>
 800201e:	4603      	mov	r3, r0
 8002020:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800202a:	7bfb      	ldrb	r3, [r7, #15]
}
 800202c:	4618      	mov	r0, r3
 800202e:	371c      	adds	r7, #28
 8002030:	46bd      	mov	sp, r7
 8002032:	bd90      	pop	{r4, r7, pc}

08002034 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_HCD_HC_Halt+0x1e>
 800204e:	2302      	movs	r3, #2
 8002050:	e00f      	b.n	8002072 <HAL_HCD_HC_Halt+0x3e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	78fa      	ldrb	r2, [r7, #3]
 8002060:	4611      	mov	r1, r2
 8002062:	4618      	mov	r0, r3
 8002064:	f005 f95b 	bl	800731e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2200      	movs	r2, #0
 800206c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
	...

0800207c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	4608      	mov	r0, r1
 8002086:	4611      	mov	r1, r2
 8002088:	461a      	mov	r2, r3
 800208a:	4603      	mov	r3, r0
 800208c:	70fb      	strb	r3, [r7, #3]
 800208e:	460b      	mov	r3, r1
 8002090:	70bb      	strb	r3, [r7, #2]
 8002092:	4613      	mov	r3, r2
 8002094:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	011b      	lsls	r3, r3, #4
 800209e:	1a9b      	subs	r3, r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	3317      	adds	r3, #23
 80020a6:	78ba      	ldrb	r2, [r7, #2]
 80020a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80020aa:	78fa      	ldrb	r2, [r7, #3]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	1a9b      	subs	r3, r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	3326      	adds	r3, #38	@ 0x26
 80020ba:	787a      	ldrb	r2, [r7, #1]
 80020bc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80020be:	7c3b      	ldrb	r3, [r7, #16]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d114      	bne.n	80020ee <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	332a      	adds	r3, #42	@ 0x2a
 80020d4:	2203      	movs	r2, #3
 80020d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	4613      	mov	r3, r2
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	440b      	add	r3, r1
 80020e6:	3319      	adds	r3, #25
 80020e8:	7f3a      	ldrb	r2, [r7, #28]
 80020ea:	701a      	strb	r2, [r3, #0]
 80020ec:	e009      	b.n	8002102 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020ee:	78fa      	ldrb	r2, [r7, #3]
 80020f0:	6879      	ldr	r1, [r7, #4]
 80020f2:	4613      	mov	r3, r2
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	1a9b      	subs	r3, r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	332a      	adds	r3, #42	@ 0x2a
 80020fe:	2202      	movs	r2, #2
 8002100:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002102:	787b      	ldrb	r3, [r7, #1]
 8002104:	2b03      	cmp	r3, #3
 8002106:	f200 8102 	bhi.w	800230e <HAL_HCD_HC_SubmitRequest+0x292>
 800210a:	a201      	add	r2, pc, #4	@ (adr r2, 8002110 <HAL_HCD_HC_SubmitRequest+0x94>)
 800210c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002110:	08002121 	.word	0x08002121
 8002114:	080022f9 	.word	0x080022f9
 8002118:	080021e5 	.word	0x080021e5
 800211c:	0800226f 	.word	0x0800226f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002120:	7c3b      	ldrb	r3, [r7, #16]
 8002122:	2b01      	cmp	r3, #1
 8002124:	f040 80f5 	bne.w	8002312 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002128:	78bb      	ldrb	r3, [r7, #2]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d12d      	bne.n	800218a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800212e:	8b3b      	ldrh	r3, [r7, #24]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d109      	bne.n	8002148 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002134:	78fa      	ldrb	r2, [r7, #3]
 8002136:	6879      	ldr	r1, [r7, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	1a9b      	subs	r3, r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	333d      	adds	r3, #61	@ 0x3d
 8002144:	2201      	movs	r2, #1
 8002146:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002148:	78fa      	ldrb	r2, [r7, #3]
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	333d      	adds	r3, #61	@ 0x3d
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10a      	bne.n	8002174 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	332a      	adds	r3, #42	@ 0x2a
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002172:	e0ce      	b.n	8002312 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002174:	78fa      	ldrb	r2, [r7, #3]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	011b      	lsls	r3, r3, #4
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	332a      	adds	r3, #42	@ 0x2a
 8002184:	2202      	movs	r2, #2
 8002186:	701a      	strb	r2, [r3, #0]
      break;
 8002188:	e0c3      	b.n	8002312 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800218a:	78fa      	ldrb	r2, [r7, #3]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	331a      	adds	r3, #26
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b01      	cmp	r3, #1
 800219e:	f040 80b8 	bne.w	8002312 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	1a9b      	subs	r3, r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	333c      	adds	r3, #60	@ 0x3c
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10a      	bne.n	80021ce <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021b8:	78fa      	ldrb	r2, [r7, #3]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	011b      	lsls	r3, r3, #4
 80021c0:	1a9b      	subs	r3, r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	332a      	adds	r3, #42	@ 0x2a
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
      break;
 80021cc:	e0a1      	b.n	8002312 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	332a      	adds	r3, #42	@ 0x2a
 80021de:	2202      	movs	r2, #2
 80021e0:	701a      	strb	r2, [r3, #0]
      break;
 80021e2:	e096      	b.n	8002312 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80021e4:	78bb      	ldrb	r3, [r7, #2]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d120      	bne.n	800222c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	333d      	adds	r3, #61	@ 0x3d
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10a      	bne.n	8002216 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002200:	78fa      	ldrb	r2, [r7, #3]
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	4613      	mov	r3, r2
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	1a9b      	subs	r3, r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	332a      	adds	r3, #42	@ 0x2a
 8002210:	2200      	movs	r2, #0
 8002212:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002214:	e07e      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002216:	78fa      	ldrb	r2, [r7, #3]
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	4613      	mov	r3, r2
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	1a9b      	subs	r3, r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	332a      	adds	r3, #42	@ 0x2a
 8002226:	2202      	movs	r2, #2
 8002228:	701a      	strb	r2, [r3, #0]
      break;
 800222a:	e073      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	333c      	adds	r3, #60	@ 0x3c
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10a      	bne.n	8002258 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	332a      	adds	r3, #42	@ 0x2a
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
      break;
 8002256:	e05d      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	4613      	mov	r3, r2
 800225e:	011b      	lsls	r3, r3, #4
 8002260:	1a9b      	subs	r3, r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	440b      	add	r3, r1
 8002266:	332a      	adds	r3, #42	@ 0x2a
 8002268:	2202      	movs	r2, #2
 800226a:	701a      	strb	r2, [r3, #0]
      break;
 800226c:	e052      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800226e:	78bb      	ldrb	r3, [r7, #2]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d120      	bne.n	80022b6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002274:	78fa      	ldrb	r2, [r7, #3]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	333d      	adds	r3, #61	@ 0x3d
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10a      	bne.n	80022a0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	332a      	adds	r3, #42	@ 0x2a
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800229e:	e039      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022a0:	78fa      	ldrb	r2, [r7, #3]
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	332a      	adds	r3, #42	@ 0x2a
 80022b0:	2202      	movs	r2, #2
 80022b2:	701a      	strb	r2, [r3, #0]
      break;
 80022b4:	e02e      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022b6:	78fa      	ldrb	r2, [r7, #3]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	011b      	lsls	r3, r3, #4
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	333c      	adds	r3, #60	@ 0x3c
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10a      	bne.n	80022e2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022cc:	78fa      	ldrb	r2, [r7, #3]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	1a9b      	subs	r3, r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	332a      	adds	r3, #42	@ 0x2a
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
      break;
 80022e0:	e018      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022e2:	78fa      	ldrb	r2, [r7, #3]
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	1a9b      	subs	r3, r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	332a      	adds	r3, #42	@ 0x2a
 80022f2:	2202      	movs	r2, #2
 80022f4:	701a      	strb	r2, [r3, #0]
      break;
 80022f6:	e00d      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022f8:	78fa      	ldrb	r2, [r7, #3]
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	332a      	adds	r3, #42	@ 0x2a
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
      break;
 800230c:	e002      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800230e:	bf00      	nop
 8002310:	e000      	b.n	8002314 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002312:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002314:	78fa      	ldrb	r2, [r7, #3]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	332c      	adds	r3, #44	@ 0x2c
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	8b39      	ldrh	r1, [r7, #24]
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	4613      	mov	r3, r2
 8002330:	011b      	lsls	r3, r3, #4
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	4403      	add	r3, r0
 8002338:	3334      	adds	r3, #52	@ 0x34
 800233a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	334c      	adds	r3, #76	@ 0x4c
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002350:	78fa      	ldrb	r2, [r7, #3]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	4613      	mov	r3, r2
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	1a9b      	subs	r3, r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	3338      	adds	r3, #56	@ 0x38
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002364:	78fa      	ldrb	r2, [r7, #3]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4613      	mov	r3, r2
 800236a:	011b      	lsls	r3, r3, #4
 800236c:	1a9b      	subs	r3, r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	3315      	adds	r3, #21
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	334d      	adds	r3, #77	@ 0x4d
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6818      	ldr	r0, [r3, #0]
 8002390:	78fa      	ldrb	r2, [r7, #3]
 8002392:	4613      	mov	r3, r2
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	3310      	adds	r3, #16
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	4413      	add	r3, r2
 80023a0:	1d19      	adds	r1, r3, #4
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	799b      	ldrb	r3, [r3, #6]
 80023a6:	461a      	mov	r2, r3
 80023a8:	f004 fd2e 	bl	8006e08 <USB_HC_StartXfer>
 80023ac:	4603      	mov	r3, r0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop

080023b8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f004 fa4c 	bl	800686c <USB_GetMode>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	f040 80fb 	bne.w	80025d2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f004 fa0f 	bl	8006804 <USB_ReadInterrupts>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80f1 	beq.w	80025d0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f004 fa06 	bl	8006804 <USB_ReadInterrupts>
 80023f8:	4603      	mov	r3, r0
 80023fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002402:	d104      	bne.n	800240e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800240c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f004 f9f6 	bl	8006804 <USB_ReadInterrupts>
 8002418:	4603      	mov	r3, r0
 800241a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800241e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002422:	d104      	bne.n	800242e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800242c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f004 f9e6 	bl	8006804 <USB_ReadInterrupts>
 8002438:	4603      	mov	r3, r0
 800243a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800243e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002442:	d104      	bne.n	800244e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800244c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f004 f9d6 	bl	8006804 <USB_ReadInterrupts>
 8002458:	4603      	mov	r3, r0
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b02      	cmp	r3, #2
 8002460:	d103      	bne.n	800246a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2202      	movs	r2, #2
 8002468:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f004 f9c8 	bl	8006804 <USB_ReadInterrupts>
 8002474:	4603      	mov	r3, r0
 8002476:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800247a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800247e:	d120      	bne.n	80024c2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002488:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d113      	bne.n	80024c2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800249a:	2110      	movs	r1, #16
 800249c:	6938      	ldr	r0, [r7, #16]
 800249e:	f004 f8bb 	bl	8006618 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80024a2:	6938      	ldr	r0, [r7, #16]
 80024a4:	f004 f8ea 	bl	800667c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	7a5b      	ldrb	r3, [r3, #9]
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d105      	bne.n	80024bc <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2101      	movs	r1, #1
 80024b6:	4618      	mov	r0, r3
 80024b8:	f004 fadc 	bl	8006a74 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f006 fa6b 	bl	8008998 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f004 f99c 	bl	8006804 <USB_ReadInterrupts>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024d6:	d102      	bne.n	80024de <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f001 fd17 	bl	8003f0c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f004 f98e 	bl	8006804 <USB_ReadInterrupts>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d106      	bne.n	8002500 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f006 fa34 	bl	8008960 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2208      	movs	r2, #8
 80024fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f004 f97d 	bl	8006804 <USB_ReadInterrupts>
 800250a:	4603      	mov	r3, r0
 800250c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002510:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002514:	d139      	bne.n	800258a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f004 feee 	bl	80072fc <USB_HC_ReadInterrupt>
 8002520:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	e025      	b.n	8002574 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d018      	beq.n	800256e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	015a      	lsls	r2, r3, #5
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4413      	add	r3, r2
 8002544:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800254e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002552:	d106      	bne.n	8002562 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	4619      	mov	r1, r3
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f8e9 	bl	8002732 <HCD_HC_IN_IRQHandler>
 8002560:	e005      	b.n	800256e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	b2db      	uxtb	r3, r3
 8002566:	4619      	mov	r1, r3
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 ff4b 	bl	8003404 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	3301      	adds	r3, #1
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	795b      	ldrb	r3, [r3, #5]
 8002578:	461a      	mov	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	4293      	cmp	r3, r2
 800257e:	d3d3      	bcc.n	8002528 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002588:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f004 f938 	bl	8006804 <USB_ReadInterrupts>
 8002594:	4603      	mov	r3, r0
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	2b10      	cmp	r3, #16
 800259c:	d101      	bne.n	80025a2 <HAL_HCD_IRQHandler+0x1ea>
 800259e:	2301      	movs	r3, #1
 80025a0:	e000      	b.n	80025a4 <HAL_HCD_IRQHandler+0x1ec>
 80025a2:	2300      	movs	r3, #0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d014      	beq.n	80025d2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	699a      	ldr	r2, [r3, #24]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0210 	bic.w	r2, r2, #16
 80025b6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f001 fbc8 	bl	8003d4e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699a      	ldr	r2, [r3, #24]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0210 	orr.w	r2, r2, #16
 80025cc:	619a      	str	r2, [r3, #24]
 80025ce:	e000      	b.n	80025d2 <HAL_HCD_IRQHandler+0x21a>
      return;
 80025d0:	bf00      	nop
    }
  }
}
 80025d2:	3718      	adds	r7, #24
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d101      	bne.n	80025ee <HAL_HCD_Start+0x16>
 80025ea:	2302      	movs	r3, #2
 80025ec:	e013      	b.n	8002616 <HAL_HCD_Start+0x3e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2101      	movs	r1, #1
 80025fc:	4618      	mov	r0, r3
 80025fe:	f004 fa76 	bl	8006aee <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f003 ff98 	bl	800653c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_HCD_Stop+0x16>
 8002630:	2302      	movs	r3, #2
 8002632:	e00d      	b.n	8002650 <HAL_HCD_Stop+0x32>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f004 ffc9 	bl	80075d8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	334c      	adds	r3, #76	@ 0x4c
 8002674:	781b      	ldrb	r3, [r3, #0]
}
 8002676:	4618      	mov	r0, r3
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	460b      	mov	r3, r1
 800268c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800268e:	78fa      	ldrb	r2, [r7, #3]
 8002690:	6879      	ldr	r1, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	011b      	lsls	r3, r3, #4
 8002696:	1a9b      	subs	r3, r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	440b      	add	r3, r1
 800269c:	3338      	adds	r3, #56	@ 0x38
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f004 fa68 	bl	8006b8e <USB_GetCurrentFrame>
 80026be:	4603      	mov	r3, r0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	331a      	adds	r3, #26
 80026e4:	2200      	movs	r2, #0
 80026e6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	331b      	adds	r3, #27
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	4613      	mov	r3, r2
 8002702:	011b      	lsls	r3, r3, #4
 8002704:	1a9b      	subs	r3, r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	3325      	adds	r3, #37	@ 0x25
 800270c:	2200      	movs	r2, #0
 800270e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	3324      	adds	r3, #36	@ 0x24
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	460b      	mov	r3, r1
 800273c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f004 f86a 	bl	800682a <USB_ReadChInterrupts>
 8002756:	4603      	mov	r3, r0
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b04      	cmp	r3, #4
 800275e:	d11a      	bne.n	8002796 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002760:	78fb      	ldrb	r3, [r7, #3]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800276c:	461a      	mov	r2, r3
 800276e:	2304      	movs	r3, #4
 8002770:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002772:	78fa      	ldrb	r2, [r7, #3]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	1a9b      	subs	r3, r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	334d      	adds	r3, #77	@ 0x4d
 8002782:	2207      	movs	r2, #7
 8002784:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f004 fdc5 	bl	800731e <USB_HC_Halt>
 8002794:	e09e      	b.n	80028d4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	78fa      	ldrb	r2, [r7, #3]
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f004 f843 	bl	800682a <USB_ReadChInterrupts>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027ae:	d11b      	bne.n	80027e8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80027b0:	78fb      	ldrb	r3, [r7, #3]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027bc:	461a      	mov	r2, r3
 80027be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80027c4:	78fa      	ldrb	r2, [r7, #3]
 80027c6:	6879      	ldr	r1, [r7, #4]
 80027c8:	4613      	mov	r3, r2
 80027ca:	011b      	lsls	r3, r3, #4
 80027cc:	1a9b      	subs	r3, r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	440b      	add	r3, r1
 80027d2:	334d      	adds	r3, #77	@ 0x4d
 80027d4:	2208      	movs	r2, #8
 80027d6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	78fa      	ldrb	r2, [r7, #3]
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f004 fd9c 	bl	800731e <USB_HC_Halt>
 80027e6:	e075      	b.n	80028d4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	78fa      	ldrb	r2, [r7, #3]
 80027ee:	4611      	mov	r1, r2
 80027f0:	4618      	mov	r0, r3
 80027f2:	f004 f81a 	bl	800682a <USB_ReadChInterrupts>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d11a      	bne.n	8002836 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002800:	78fb      	ldrb	r3, [r7, #3]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	4413      	add	r3, r2
 8002808:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800280c:	461a      	mov	r2, r3
 800280e:	2308      	movs	r3, #8
 8002810:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	334d      	adds	r3, #77	@ 0x4d
 8002822:	2206      	movs	r2, #6
 8002824:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	4611      	mov	r1, r2
 800282e:	4618      	mov	r0, r3
 8002830:	f004 fd75 	bl	800731e <USB_HC_Halt>
 8002834:	e04e      	b.n	80028d4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	78fa      	ldrb	r2, [r7, #3]
 800283c:	4611      	mov	r1, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f003 fff3 	bl	800682a <USB_ReadChInterrupts>
 8002844:	4603      	mov	r3, r0
 8002846:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800284a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800284e:	d11b      	bne.n	8002888 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002850:	78fb      	ldrb	r3, [r7, #3]
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4413      	add	r3, r2
 8002858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800285c:	461a      	mov	r2, r3
 800285e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002862:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002864:	78fa      	ldrb	r2, [r7, #3]
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	4613      	mov	r3, r2
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	334d      	adds	r3, #77	@ 0x4d
 8002874:	2209      	movs	r2, #9
 8002876:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	78fa      	ldrb	r2, [r7, #3]
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f004 fd4c 	bl	800731e <USB_HC_Halt>
 8002886:	e025      	b.n	80028d4 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f003 ffca 	bl	800682a <USB_ReadChInterrupts>
 8002896:	4603      	mov	r3, r0
 8002898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800289c:	2b80      	cmp	r3, #128	@ 0x80
 800289e:	d119      	bne.n	80028d4 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80028a0:	78fb      	ldrb	r3, [r7, #3]
 80028a2:	015a      	lsls	r2, r3, #5
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	4413      	add	r3, r2
 80028a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028ac:	461a      	mov	r2, r3
 80028ae:	2380      	movs	r3, #128	@ 0x80
 80028b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80028b2:	78fa      	ldrb	r2, [r7, #3]
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	4613      	mov	r3, r2
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	1a9b      	subs	r3, r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	334d      	adds	r3, #77	@ 0x4d
 80028c2:	2207      	movs	r2, #7
 80028c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f004 fd25 	bl	800731e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f003 ffa4 	bl	800682a <USB_ReadChInterrupts>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028ec:	d112      	bne.n	8002914 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	4611      	mov	r1, r2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f004 fd11 	bl	800731e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002908:	461a      	mov	r2, r3
 800290a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800290e:	6093      	str	r3, [r2, #8]
 8002910:	f000 bd75 	b.w	80033fe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f003 ff84 	bl	800682a <USB_ReadChInterrupts>
 8002922:	4603      	mov	r3, r0
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b01      	cmp	r3, #1
 800292a:	f040 8128 	bne.w	8002b7e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4413      	add	r3, r2
 8002936:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800293a:	461a      	mov	r2, r3
 800293c:	2320      	movs	r3, #32
 800293e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	331b      	adds	r3, #27
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d119      	bne.n	800298a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	331b      	adds	r3, #27
 8002966:	2200      	movs	r2, #0
 8002968:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800296a:	78fb      	ldrb	r3, [r7, #3]
 800296c:	015a      	lsls	r2, r3, #5
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4413      	add	r3, r2
 8002972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	0151      	lsls	r1, r2, #5
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	440a      	add	r2, r1
 8002980:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002984:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002988:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	799b      	ldrb	r3, [r3, #6]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d01b      	beq.n	80029ca <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	4613      	mov	r3, r2
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	1a9b      	subs	r3, r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	3330      	adds	r3, #48	@ 0x30
 80029a2:	6819      	ldr	r1, [r3, #0]
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	1ac9      	subs	r1, r1, r3
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4403      	add	r3, r0
 80029c6:	3338      	adds	r3, #56	@ 0x38
 80029c8:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80029ca:	78fa      	ldrb	r2, [r7, #3]
 80029cc:	6879      	ldr	r1, [r7, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	1a9b      	subs	r3, r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	440b      	add	r3, r1
 80029d8:	334d      	adds	r3, #77	@ 0x4d
 80029da:	2201      	movs	r2, #1
 80029dc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	4613      	mov	r3, r2
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	3344      	adds	r3, #68	@ 0x44
 80029ee:	2200      	movs	r2, #0
 80029f0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80029f2:	78fb      	ldrb	r3, [r7, #3]
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029fe:	461a      	mov	r2, r3
 8002a00:	2301      	movs	r3, #1
 8002a02:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a04:	78fa      	ldrb	r2, [r7, #3]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	3326      	adds	r3, #38	@ 0x26
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d00a      	beq.n	8002a30 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	1a9b      	subs	r3, r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	3326      	adds	r3, #38	@ 0x26
 8002a2a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d110      	bne.n	8002a52 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	78fa      	ldrb	r2, [r7, #3]
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f004 fc70 	bl	800731e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002a3e:	78fb      	ldrb	r3, [r7, #3]
 8002a40:	015a      	lsls	r2, r3, #5
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4413      	add	r3, r2
 8002a46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	2310      	movs	r3, #16
 8002a4e:	6093      	str	r3, [r2, #8]
 8002a50:	e03d      	b.n	8002ace <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002a52:	78fa      	ldrb	r2, [r7, #3]
 8002a54:	6879      	ldr	r1, [r7, #4]
 8002a56:	4613      	mov	r3, r2
 8002a58:	011b      	lsls	r3, r3, #4
 8002a5a:	1a9b      	subs	r3, r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	440b      	add	r3, r1
 8002a60:	3326      	adds	r3, #38	@ 0x26
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d00a      	beq.n	8002a7e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	6879      	ldr	r1, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	3326      	adds	r3, #38	@ 0x26
 8002a78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d127      	bne.n	8002ace <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	015a      	lsls	r2, r3, #5
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	4413      	add	r3, r2
 8002a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	0151      	lsls	r1, r2, #5
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	440a      	add	r2, r1
 8002a94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002a9c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	334c      	adds	r3, #76	@ 0x4c
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ab2:	78fa      	ldrb	r2, [r7, #3]
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	1a9b      	subs	r3, r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	334c      	adds	r3, #76	@ 0x4c
 8002ac2:	781a      	ldrb	r2, [r3, #0]
 8002ac4:	78fb      	ldrb	r3, [r7, #3]
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f005 ff73 	bl	80089b4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	799b      	ldrb	r3, [r3, #6]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d13b      	bne.n	8002b4e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002ad6:	78fa      	ldrb	r2, [r7, #3]
 8002ad8:	6879      	ldr	r1, [r7, #4]
 8002ada:	4613      	mov	r3, r2
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	1a9b      	subs	r3, r3, r2
 8002ae0:	009b      	lsls	r3, r3, #2
 8002ae2:	440b      	add	r3, r1
 8002ae4:	3338      	adds	r3, #56	@ 0x38
 8002ae6:	6819      	ldr	r1, [r3, #0]
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4403      	add	r3, r0
 8002af6:	3328      	adds	r3, #40	@ 0x28
 8002af8:	881b      	ldrh	r3, [r3, #0]
 8002afa:	440b      	add	r3, r1
 8002afc:	1e59      	subs	r1, r3, #1
 8002afe:	78fa      	ldrb	r2, [r7, #3]
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4403      	add	r3, r0
 8002b0c:	3328      	adds	r3, #40	@ 0x28
 8002b0e:	881b      	ldrh	r3, [r3, #0]
 8002b10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f000 8470 	beq.w	80033fe <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	333c      	adds	r3, #60	@ 0x3c
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	f083 0301 	eor.w	r3, r3, #1
 8002b36:	b2d8      	uxtb	r0, r3
 8002b38:	6879      	ldr	r1, [r7, #4]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	1a9b      	subs	r3, r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	333c      	adds	r3, #60	@ 0x3c
 8002b46:	4602      	mov	r2, r0
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	f000 bc58 	b.w	80033fe <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	333c      	adds	r3, #60	@ 0x3c
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	f083 0301 	eor.w	r3, r3, #1
 8002b66:	b2d8      	uxtb	r0, r3
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	011b      	lsls	r3, r3, #4
 8002b6e:	1a9b      	subs	r3, r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	440b      	add	r3, r1
 8002b74:	333c      	adds	r3, #60	@ 0x3c
 8002b76:	4602      	mov	r2, r0
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	f000 bc40 	b.w	80033fe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f003 fe4f 	bl	800682a <USB_ReadChInterrupts>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b20      	cmp	r3, #32
 8002b94:	d131      	bne.n	8002bfa <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b96:	78fb      	ldrb	r3, [r7, #3]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	2320      	movs	r3, #32
 8002ba6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	331a      	adds	r3, #26
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	f040 841f 	bne.w	80033fe <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002bc0:	78fa      	ldrb	r2, [r7, #3]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	1a9b      	subs	r3, r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	331b      	adds	r3, #27
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002bd4:	78fa      	ldrb	r2, [r7, #3]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	334d      	adds	r3, #77	@ 0x4d
 8002be4:	2203      	movs	r2, #3
 8002be6:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f004 fb94 	bl	800731e <USB_HC_Halt>
 8002bf6:	f000 bc02 	b.w	80033fe <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	4611      	mov	r1, r2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f003 fe11 	bl	800682a <USB_ReadChInterrupts>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	f040 8305 	bne.w	800321e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	015a      	lsls	r2, r3, #5
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c20:	461a      	mov	r2, r3
 8002c22:	2302      	movs	r3, #2
 8002c24:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	011b      	lsls	r3, r3, #4
 8002c2e:	1a9b      	subs	r3, r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	334d      	adds	r3, #77	@ 0x4d
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d114      	bne.n	8002c66 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	334d      	adds	r3, #77	@ 0x4d
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002c50:	78fa      	ldrb	r2, [r7, #3]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	334c      	adds	r3, #76	@ 0x4c
 8002c60:	2201      	movs	r2, #1
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	e2cc      	b.n	8003200 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	334d      	adds	r3, #77	@ 0x4d
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b06      	cmp	r3, #6
 8002c7a:	d114      	bne.n	8002ca6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	334d      	adds	r3, #77	@ 0x4d
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	334c      	adds	r3, #76	@ 0x4c
 8002ca0:	2205      	movs	r2, #5
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	e2ac      	b.n	8003200 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ca6:	78fa      	ldrb	r2, [r7, #3]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	011b      	lsls	r3, r3, #4
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	334d      	adds	r3, #77	@ 0x4d
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b07      	cmp	r3, #7
 8002cba:	d00b      	beq.n	8002cd4 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	011b      	lsls	r3, r3, #4
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	334d      	adds	r3, #77	@ 0x4d
 8002ccc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002cce:	2b09      	cmp	r3, #9
 8002cd0:	f040 80a6 	bne.w	8002e20 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cd4:	78fa      	ldrb	r2, [r7, #3]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	334d      	adds	r3, #77	@ 0x4d
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	3344      	adds	r3, #68	@ 0x44
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	1c59      	adds	r1, r3, #1
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	4403      	add	r3, r0
 8002d08:	3344      	adds	r3, #68	@ 0x44
 8002d0a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d0c:	78fa      	ldrb	r2, [r7, #3]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	1a9b      	subs	r3, r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	3344      	adds	r3, #68	@ 0x44
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d943      	bls.n	8002daa <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002d22:	78fa      	ldrb	r2, [r7, #3]
 8002d24:	6879      	ldr	r1, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	011b      	lsls	r3, r3, #4
 8002d2a:	1a9b      	subs	r3, r3, r2
 8002d2c:	009b      	lsls	r3, r3, #2
 8002d2e:	440b      	add	r3, r1
 8002d30:	3344      	adds	r3, #68	@ 0x44
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	331a      	adds	r3, #26
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d123      	bne.n	8002d94 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002d4c:	78fa      	ldrb	r2, [r7, #3]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	331b      	adds	r3, #27
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	331c      	adds	r3, #28
 8002d70:	2200      	movs	r2, #0
 8002d72:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	0151      	lsls	r1, r2, #5
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	440a      	add	r2, r1
 8002d8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d92:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	1a9b      	subs	r3, r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	334c      	adds	r3, #76	@ 0x4c
 8002da4:	2204      	movs	r2, #4
 8002da6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002da8:	e229      	b.n	80031fe <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002daa:	78fa      	ldrb	r2, [r7, #3]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	334c      	adds	r3, #76	@ 0x4c
 8002dba:	2202      	movs	r2, #2
 8002dbc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	3326      	adds	r3, #38	@ 0x26
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00b      	beq.n	8002dec <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002dd4:	78fa      	ldrb	r2, [r7, #3]
 8002dd6:	6879      	ldr	r1, [r7, #4]
 8002dd8:	4613      	mov	r3, r2
 8002dda:	011b      	lsls	r3, r3, #4
 8002ddc:	1a9b      	subs	r3, r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	3326      	adds	r3, #38	@ 0x26
 8002de4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	f040 8209 	bne.w	80031fe <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e02:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e0a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e0c:	78fb      	ldrb	r3, [r7, #3]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e18:	461a      	mov	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e1e:	e1ee      	b.n	80031fe <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002e20:	78fa      	ldrb	r2, [r7, #3]
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	1a9b      	subs	r3, r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	334d      	adds	r3, #77	@ 0x4d
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b05      	cmp	r3, #5
 8002e34:	f040 80c8 	bne.w	8002fc8 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e38:	78fa      	ldrb	r2, [r7, #3]
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	4613      	mov	r3, r2
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	1a9b      	subs	r3, r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	440b      	add	r3, r1
 8002e46:	334d      	adds	r3, #77	@ 0x4d
 8002e48:	2202      	movs	r2, #2
 8002e4a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002e4c:	78fa      	ldrb	r2, [r7, #3]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	331b      	adds	r3, #27
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	f040 81ce 	bne.w	8003200 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	011b      	lsls	r3, r3, #4
 8002e6c:	1a9b      	subs	r3, r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	3326      	adds	r3, #38	@ 0x26
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d16b      	bne.n	8002f52 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	3348      	adds	r3, #72	@ 0x48
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	1c59      	adds	r1, r3, #1
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4403      	add	r3, r0
 8002e9a:	3348      	adds	r3, #72	@ 0x48
 8002e9c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	3348      	adds	r3, #72	@ 0x48
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d943      	bls.n	8002f3c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	3348      	adds	r3, #72	@ 0x48
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002ec8:	78fa      	ldrb	r2, [r7, #3]
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	011b      	lsls	r3, r3, #4
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	331b      	adds	r3, #27
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	3344      	adds	r3, #68	@ 0x44
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d809      	bhi.n	8002f06 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	331c      	adds	r3, #28
 8002f02:	2201      	movs	r2, #1
 8002f04:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	0151      	lsls	r1, r2, #5
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	440a      	add	r2, r1
 8002f1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f24:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	334c      	adds	r3, #76	@ 0x4c
 8002f36:	2204      	movs	r2, #4
 8002f38:	701a      	strb	r2, [r3, #0]
 8002f3a:	e014      	b.n	8002f66 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	334c      	adds	r3, #76	@ 0x4c
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	701a      	strb	r2, [r3, #0]
 8002f50:	e009      	b.n	8002f66 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	334c      	adds	r3, #76	@ 0x4c
 8002f62:	2202      	movs	r2, #2
 8002f64:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	3326      	adds	r3, #38	@ 0x26
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00b      	beq.n	8002f94 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	3326      	adds	r3, #38	@ 0x26
 8002f8c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	f040 8136 	bne.w	8003200 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002faa:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002fb2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	015a      	lsls	r2, r3, #5
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	4413      	add	r3, r2
 8002fbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6013      	str	r3, [r2, #0]
 8002fc6:	e11b      	b.n	8003200 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	334d      	adds	r3, #77	@ 0x4d
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	f040 8081 	bne.w	80030e2 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	334d      	adds	r3, #77	@ 0x4d
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	331b      	adds	r3, #27
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	2b01      	cmp	r3, #1
 8003008:	f040 80fa 	bne.w	8003200 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	1a9b      	subs	r3, r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	334c      	adds	r3, #76	@ 0x4c
 800301c:	2202      	movs	r2, #2
 800301e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4413      	add	r3, r2
 8003028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	0151      	lsls	r1, r2, #5
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	440a      	add	r2, r1
 8003036:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800303a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800303e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	0151      	lsls	r1, r2, #5
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	440a      	add	r2, r1
 8003056:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800305a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800305e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	4413      	add	r3, r2
 8003068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	0151      	lsls	r1, r2, #5
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	440a      	add	r2, r1
 8003076:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800307a:	f023 0320 	bic.w	r3, r3, #32
 800307e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	3326      	adds	r3, #38	@ 0x26
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00b      	beq.n	80030ae <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	440b      	add	r3, r1
 80030a4:	3326      	adds	r3, #38	@ 0x26
 80030a6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	f040 80a9 	bne.w	8003200 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80030ae:	78fb      	ldrb	r3, [r7, #3]
 80030b0:	015a      	lsls	r2, r3, #5
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4413      	add	r3, r2
 80030b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80030c4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80030cc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030da:	461a      	mov	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	e08e      	b.n	8003200 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	334d      	adds	r3, #77	@ 0x4d
 80030f2:	781b      	ldrb	r3, [r3, #0]
 80030f4:	2b04      	cmp	r3, #4
 80030f6:	d143      	bne.n	8003180 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	1a9b      	subs	r3, r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	440b      	add	r3, r1
 8003106:	334d      	adds	r3, #77	@ 0x4d
 8003108:	2202      	movs	r2, #2
 800310a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800310c:	78fa      	ldrb	r2, [r7, #3]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	1a9b      	subs	r3, r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	334c      	adds	r3, #76	@ 0x4c
 800311c:	2202      	movs	r2, #2
 800311e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	011b      	lsls	r3, r3, #4
 8003128:	1a9b      	subs	r3, r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	3326      	adds	r3, #38	@ 0x26
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00a      	beq.n	800314c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	1a9b      	subs	r3, r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	3326      	adds	r3, #38	@ 0x26
 8003146:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003148:	2b02      	cmp	r3, #2
 800314a:	d159      	bne.n	8003200 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	4413      	add	r3, r2
 8003154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003162:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800316a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800316c:	78fb      	ldrb	r3, [r7, #3]
 800316e:	015a      	lsls	r2, r3, #5
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4413      	add	r3, r2
 8003174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003178:	461a      	mov	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	e03f      	b.n	8003200 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	334d      	adds	r3, #77	@ 0x4d
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b08      	cmp	r3, #8
 8003194:	d126      	bne.n	80031e4 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003196:	78fa      	ldrb	r2, [r7, #3]
 8003198:	6879      	ldr	r1, [r7, #4]
 800319a:	4613      	mov	r3, r2
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	1a9b      	subs	r3, r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	440b      	add	r3, r1
 80031a4:	334d      	adds	r3, #77	@ 0x4d
 80031a6:	2202      	movs	r2, #2
 80031a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80031aa:	78fa      	ldrb	r2, [r7, #3]
 80031ac:	6879      	ldr	r1, [r7, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	011b      	lsls	r3, r3, #4
 80031b2:	1a9b      	subs	r3, r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	440b      	add	r3, r1
 80031b8:	3344      	adds	r3, #68	@ 0x44
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	1c59      	adds	r1, r3, #1
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4403      	add	r3, r0
 80031ca:	3344      	adds	r3, #68	@ 0x44
 80031cc:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	334c      	adds	r3, #76	@ 0x4c
 80031de:	2204      	movs	r2, #4
 80031e0:	701a      	strb	r2, [r3, #0]
 80031e2:	e00d      	b.n	8003200 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	334d      	adds	r3, #77	@ 0x4d
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	f000 8100 	beq.w	80033fc <HCD_HC_IN_IRQHandler+0xcca>
 80031fc:	e000      	b.n	8003200 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031fe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	334c      	adds	r3, #76	@ 0x4c
 8003210:	781a      	ldrb	r2, [r3, #0]
 8003212:	78fb      	ldrb	r3, [r7, #3]
 8003214:	4619      	mov	r1, r3
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f005 fbcc 	bl	80089b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800321c:	e0ef      	b.n	80033fe <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	78fa      	ldrb	r2, [r7, #3]
 8003224:	4611      	mov	r1, r2
 8003226:	4618      	mov	r0, r3
 8003228:	f003 faff 	bl	800682a <USB_ReadChInterrupts>
 800322c:	4603      	mov	r3, r0
 800322e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003232:	2b40      	cmp	r3, #64	@ 0x40
 8003234:	d12f      	bne.n	8003296 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4413      	add	r3, r2
 800323e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003242:	461a      	mov	r2, r3
 8003244:	2340      	movs	r3, #64	@ 0x40
 8003246:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	334d      	adds	r3, #77	@ 0x4d
 8003258:	2205      	movs	r2, #5
 800325a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800325c:	78fa      	ldrb	r2, [r7, #3]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	331a      	adds	r3, #26
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d109      	bne.n	8003286 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003272:	78fa      	ldrb	r2, [r7, #3]
 8003274:	6879      	ldr	r1, [r7, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	011b      	lsls	r3, r3, #4
 800327a:	1a9b      	subs	r3, r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	3344      	adds	r3, #68	@ 0x44
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	78fa      	ldrb	r2, [r7, #3]
 800328c:	4611      	mov	r1, r2
 800328e:	4618      	mov	r0, r3
 8003290:	f004 f845 	bl	800731e <USB_HC_Halt>
 8003294:	e0b3      	b.n	80033fe <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	4611      	mov	r1, r2
 800329e:	4618      	mov	r0, r3
 80032a0:	f003 fac3 	bl	800682a <USB_ReadChInterrupts>
 80032a4:	4603      	mov	r3, r0
 80032a6:	f003 0310 	and.w	r3, r3, #16
 80032aa:	2b10      	cmp	r3, #16
 80032ac:	f040 80a7 	bne.w	80033fe <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	3326      	adds	r3, #38	@ 0x26
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	d11b      	bne.n	80032fe <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80032c6:	78fa      	ldrb	r2, [r7, #3]
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	011b      	lsls	r3, r3, #4
 80032ce:	1a9b      	subs	r3, r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	3344      	adds	r3, #68	@ 0x44
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	334d      	adds	r3, #77	@ 0x4d
 80032ea:	2204      	movs	r2, #4
 80032ec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	78fa      	ldrb	r2, [r7, #3]
 80032f4:	4611      	mov	r1, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f004 f811 	bl	800731e <USB_HC_Halt>
 80032fc:	e03f      	b.n	800337e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	3326      	adds	r3, #38	@ 0x26
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	3326      	adds	r3, #38	@ 0x26
 8003324:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003326:	2b02      	cmp	r3, #2
 8003328:	d129      	bne.n	800337e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	3344      	adds	r3, #68	@ 0x44
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	799b      	ldrb	r3, [r3, #6]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <HCD_HC_IN_IRQHandler+0xc2a>
 8003346:	78fa      	ldrb	r2, [r7, #3]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	331b      	adds	r3, #27
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d110      	bne.n	800337e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	334d      	adds	r3, #77	@ 0x4d
 800336c:	2204      	movs	r2, #4
 800336e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f003 ffd0 	bl	800731e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800337e:	78fa      	ldrb	r2, [r7, #3]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	331b      	adds	r3, #27
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d129      	bne.n	80033e8 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003394:	78fa      	ldrb	r2, [r7, #3]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	331b      	adds	r3, #27
 80033a4:	2200      	movs	r2, #0
 80033a6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	78fa      	ldrb	r2, [r7, #3]
 80033b8:	0151      	lsls	r1, r2, #5
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	440a      	add	r2, r1
 80033be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033c6:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	0151      	lsls	r1, r2, #5
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	440a      	add	r2, r1
 80033de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033e2:	f043 0320 	orr.w	r3, r3, #32
 80033e6:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033f4:	461a      	mov	r2, r3
 80033f6:	2310      	movs	r3, #16
 80033f8:	6093      	str	r3, [r2, #8]
 80033fa:	e000      	b.n	80033fe <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80033fc:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	460b      	mov	r3, r1
 800340e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	78fa      	ldrb	r2, [r7, #3]
 8003420:	4611      	mov	r1, r2
 8003422:	4618      	mov	r0, r3
 8003424:	f003 fa01 	bl	800682a <USB_ReadChInterrupts>
 8003428:	4603      	mov	r3, r0
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b04      	cmp	r3, #4
 8003430:	d11b      	bne.n	800346a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003432:	78fb      	ldrb	r3, [r7, #3]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4413      	add	r3, r2
 800343a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800343e:	461a      	mov	r2, r3
 8003440:	2304      	movs	r3, #4
 8003442:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	334d      	adds	r3, #77	@ 0x4d
 8003454:	2207      	movs	r2, #7
 8003456:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f003 ff5c 	bl	800731e <USB_HC_Halt>
 8003466:	f000 bc6f 	b.w	8003d48 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	4611      	mov	r1, r2
 8003472:	4618      	mov	r0, r3
 8003474:	f003 f9d9 	bl	800682a <USB_ReadChInterrupts>
 8003478:	4603      	mov	r3, r0
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b20      	cmp	r3, #32
 8003480:	f040 8082 	bne.w	8003588 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003484:	78fb      	ldrb	r3, [r7, #3]
 8003486:	015a      	lsls	r2, r3, #5
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4413      	add	r3, r2
 800348c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003490:	461a      	mov	r2, r3
 8003492:	2320      	movs	r3, #32
 8003494:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003496:	78fa      	ldrb	r2, [r7, #3]
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	4613      	mov	r3, r2
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	1a9b      	subs	r3, r3, r2
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	440b      	add	r3, r1
 80034a4:	3319      	adds	r3, #25
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d124      	bne.n	80034f6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	3319      	adds	r3, #25
 80034bc:	2200      	movs	r2, #0
 80034be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	334c      	adds	r3, #76	@ 0x4c
 80034d0:	2202      	movs	r2, #2
 80034d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	334d      	adds	r3, #77	@ 0x4d
 80034e4:	2203      	movs	r2, #3
 80034e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	78fa      	ldrb	r2, [r7, #3]
 80034ee:	4611      	mov	r1, r2
 80034f0:	4618      	mov	r0, r3
 80034f2:	f003 ff14 	bl	800731e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80034f6:	78fa      	ldrb	r2, [r7, #3]
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	4613      	mov	r3, r2
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	1a9b      	subs	r3, r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	440b      	add	r3, r1
 8003504:	331a      	adds	r3, #26
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b01      	cmp	r3, #1
 800350a:	f040 841d 	bne.w	8003d48 <HCD_HC_OUT_IRQHandler+0x944>
 800350e:	78fa      	ldrb	r2, [r7, #3]
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	1a9b      	subs	r3, r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	331b      	adds	r3, #27
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	f040 8411 	bne.w	8003d48 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	3326      	adds	r3, #38	@ 0x26
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d009      	beq.n	8003550 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800353c:	78fa      	ldrb	r2, [r7, #3]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	331b      	adds	r3, #27
 800354c:	2201      	movs	r2, #1
 800354e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	334d      	adds	r3, #77	@ 0x4d
 8003560:	2203      	movs	r2, #3
 8003562:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	78fa      	ldrb	r2, [r7, #3]
 800356a:	4611      	mov	r1, r2
 800356c:	4618      	mov	r0, r3
 800356e:	f003 fed6 	bl	800731e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	3344      	adds	r3, #68	@ 0x44
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	e3df      	b.n	8003d48 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	4611      	mov	r1, r2
 8003590:	4618      	mov	r0, r3
 8003592:	f003 f94a 	bl	800682a <USB_ReadChInterrupts>
 8003596:	4603      	mov	r3, r0
 8003598:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800359c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035a0:	d111      	bne.n	80035c6 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80035a2:	78fb      	ldrb	r3, [r7, #3]
 80035a4:	015a      	lsls	r2, r3, #5
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4413      	add	r3, r2
 80035aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ae:	461a      	mov	r2, r3
 80035b0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035b4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	78fa      	ldrb	r2, [r7, #3]
 80035bc:	4611      	mov	r1, r2
 80035be:	4618      	mov	r0, r3
 80035c0:	f003 fead 	bl	800731e <USB_HC_Halt>
 80035c4:	e3c0      	b.n	8003d48 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	78fa      	ldrb	r2, [r7, #3]
 80035cc:	4611      	mov	r1, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f003 f92b 	bl	800682a <USB_ReadChInterrupts>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d168      	bne.n	80036b0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80035de:	78fa      	ldrb	r2, [r7, #3]
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	3344      	adds	r3, #68	@ 0x44
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	78fa      	ldrb	r2, [r7, #3]
 80035f8:	4611      	mov	r1, r2
 80035fa:	4618      	mov	r0, r3
 80035fc:	f003 f915 	bl	800682a <USB_ReadChInterrupts>
 8003600:	4603      	mov	r3, r0
 8003602:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003606:	2b40      	cmp	r3, #64	@ 0x40
 8003608:	d112      	bne.n	8003630 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	1a9b      	subs	r3, r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	3319      	adds	r3, #25
 800361a:	2201      	movs	r2, #1
 800361c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	015a      	lsls	r2, r3, #5
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	4413      	add	r3, r2
 8003626:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800362a:	461a      	mov	r2, r3
 800362c:	2340      	movs	r3, #64	@ 0x40
 800362e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003630:	78fa      	ldrb	r2, [r7, #3]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	331b      	adds	r3, #27
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d019      	beq.n	800367a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003646:	78fa      	ldrb	r2, [r7, #3]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	011b      	lsls	r3, r3, #4
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	440b      	add	r3, r1
 8003654:	331b      	adds	r3, #27
 8003656:	2200      	movs	r2, #0
 8003658:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800365a:	78fb      	ldrb	r3, [r7, #3]
 800365c:	015a      	lsls	r2, r3, #5
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	4413      	add	r3, r2
 8003662:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	0151      	lsls	r1, r2, #5
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	440a      	add	r2, r1
 8003670:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003674:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003678:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800367a:	78fb      	ldrb	r3, [r7, #3]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4413      	add	r3, r2
 8003682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003686:	461a      	mov	r2, r3
 8003688:	2301      	movs	r3, #1
 800368a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	334d      	adds	r3, #77	@ 0x4d
 800369c:	2201      	movs	r2, #1
 800369e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	78fa      	ldrb	r2, [r7, #3]
 80036a6:	4611      	mov	r1, r2
 80036a8:	4618      	mov	r0, r3
 80036aa:	f003 fe38 	bl	800731e <USB_HC_Halt>
 80036ae:	e34b      	b.n	8003d48 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	78fa      	ldrb	r2, [r7, #3]
 80036b6:	4611      	mov	r1, r2
 80036b8:	4618      	mov	r0, r3
 80036ba:	f003 f8b6 	bl	800682a <USB_ReadChInterrupts>
 80036be:	4603      	mov	r3, r0
 80036c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c4:	2b40      	cmp	r3, #64	@ 0x40
 80036c6:	d139      	bne.n	800373c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	334d      	adds	r3, #77	@ 0x4d
 80036d8:	2205      	movs	r2, #5
 80036da:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80036dc:	78fa      	ldrb	r2, [r7, #3]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	331a      	adds	r3, #26
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d109      	bne.n	8003706 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	3319      	adds	r3, #25
 8003702:	2201      	movs	r2, #1
 8003704:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	3344      	adds	r3, #68	@ 0x44
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	4611      	mov	r1, r2
 8003722:	4618      	mov	r0, r3
 8003724:	f003 fdfb 	bl	800731e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4413      	add	r3, r2
 8003730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003734:	461a      	mov	r2, r3
 8003736:	2340      	movs	r3, #64	@ 0x40
 8003738:	6093      	str	r3, [r2, #8]
 800373a:	e305      	b.n	8003d48 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	78fa      	ldrb	r2, [r7, #3]
 8003742:	4611      	mov	r1, r2
 8003744:	4618      	mov	r0, r3
 8003746:	f003 f870 	bl	800682a <USB_ReadChInterrupts>
 800374a:	4603      	mov	r3, r0
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b08      	cmp	r3, #8
 8003752:	d11a      	bne.n	800378a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	4413      	add	r3, r2
 800375c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003760:	461a      	mov	r2, r3
 8003762:	2308      	movs	r3, #8
 8003764:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003766:	78fa      	ldrb	r2, [r7, #3]
 8003768:	6879      	ldr	r1, [r7, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	1a9b      	subs	r3, r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	440b      	add	r3, r1
 8003774:	334d      	adds	r3, #77	@ 0x4d
 8003776:	2206      	movs	r2, #6
 8003778:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f003 fdcb 	bl	800731e <USB_HC_Halt>
 8003788:	e2de      	b.n	8003d48 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	4611      	mov	r1, r2
 8003792:	4618      	mov	r0, r3
 8003794:	f003 f849 	bl	800682a <USB_ReadChInterrupts>
 8003798:	4603      	mov	r3, r0
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b10      	cmp	r3, #16
 80037a0:	d144      	bne.n	800382c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	3344      	adds	r3, #68	@ 0x44
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	334d      	adds	r3, #77	@ 0x4d
 80037c6:	2204      	movs	r2, #4
 80037c8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	3319      	adds	r3, #25
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d114      	bne.n	800380a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	3318      	adds	r3, #24
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	3319      	adds	r3, #25
 8003806:	2201      	movs	r2, #1
 8003808:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	78fa      	ldrb	r2, [r7, #3]
 8003810:	4611      	mov	r1, r2
 8003812:	4618      	mov	r0, r3
 8003814:	f003 fd83 	bl	800731e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	4413      	add	r3, r2
 8003820:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003824:	461a      	mov	r2, r3
 8003826:	2310      	movs	r3, #16
 8003828:	6093      	str	r3, [r2, #8]
 800382a:	e28d      	b.n	8003d48 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	4611      	mov	r1, r2
 8003834:	4618      	mov	r0, r3
 8003836:	f002 fff8 	bl	800682a <USB_ReadChInterrupts>
 800383a:	4603      	mov	r3, r0
 800383c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003840:	2b80      	cmp	r3, #128	@ 0x80
 8003842:	d169      	bne.n	8003918 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	799b      	ldrb	r3, [r3, #6]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d111      	bne.n	8003870 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800384c:	78fa      	ldrb	r2, [r7, #3]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	334d      	adds	r3, #77	@ 0x4d
 800385c:	2207      	movs	r2, #7
 800385e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	4611      	mov	r1, r2
 8003868:	4618      	mov	r0, r3
 800386a:	f003 fd58 	bl	800731e <USB_HC_Halt>
 800386e:	e049      	b.n	8003904 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003870:	78fa      	ldrb	r2, [r7, #3]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	3344      	adds	r3, #68	@ 0x44
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	1c59      	adds	r1, r3, #1
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4403      	add	r3, r0
 8003890:	3344      	adds	r3, #68	@ 0x44
 8003892:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003894:	78fa      	ldrb	r2, [r7, #3]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	3344      	adds	r3, #68	@ 0x44
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d922      	bls.n	80038f0 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80038aa:	78fa      	ldrb	r2, [r7, #3]
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	1a9b      	subs	r3, r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	3344      	adds	r3, #68	@ 0x44
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	334c      	adds	r3, #76	@ 0x4c
 80038ce:	2204      	movs	r2, #4
 80038d0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80038d2:	78fa      	ldrb	r2, [r7, #3]
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	334c      	adds	r3, #76	@ 0x4c
 80038e2:	781a      	ldrb	r2, [r3, #0]
 80038e4:	78fb      	ldrb	r3, [r7, #3]
 80038e6:	4619      	mov	r1, r3
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f005 f863 	bl	80089b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80038ee:	e009      	b.n	8003904 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038f0:	78fa      	ldrb	r2, [r7, #3]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	334c      	adds	r3, #76	@ 0x4c
 8003900:	2202      	movs	r2, #2
 8003902:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4413      	add	r3, r2
 800390c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003910:	461a      	mov	r2, r3
 8003912:	2380      	movs	r3, #128	@ 0x80
 8003914:	6093      	str	r3, [r2, #8]
 8003916:	e217      	b.n	8003d48 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	78fa      	ldrb	r2, [r7, #3]
 800391e:	4611      	mov	r1, r2
 8003920:	4618      	mov	r0, r3
 8003922:	f002 ff82 	bl	800682a <USB_ReadChInterrupts>
 8003926:	4603      	mov	r3, r0
 8003928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800392c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003930:	d11b      	bne.n	800396a <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	334d      	adds	r3, #77	@ 0x4d
 8003942:	2209      	movs	r2, #9
 8003944:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	78fa      	ldrb	r2, [r7, #3]
 800394c:	4611      	mov	r1, r2
 800394e:	4618      	mov	r0, r3
 8003950:	f003 fce5 	bl	800731e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4413      	add	r3, r2
 800395c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003960:	461a      	mov	r2, r3
 8003962:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003966:	6093      	str	r3, [r2, #8]
 8003968:	e1ee      	b.n	8003d48 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	4611      	mov	r1, r2
 8003972:	4618      	mov	r0, r3
 8003974:	f002 ff59 	bl	800682a <USB_ReadChInterrupts>
 8003978:	4603      	mov	r3, r0
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b02      	cmp	r3, #2
 8003980:	f040 81df 	bne.w	8003d42 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	4413      	add	r3, r2
 800398c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003990:	461a      	mov	r2, r3
 8003992:	2302      	movs	r3, #2
 8003994:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003996:	78fa      	ldrb	r2, [r7, #3]
 8003998:	6879      	ldr	r1, [r7, #4]
 800399a:	4613      	mov	r3, r2
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	1a9b      	subs	r3, r3, r2
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	440b      	add	r3, r1
 80039a4:	334d      	adds	r3, #77	@ 0x4d
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	f040 8093 	bne.w	8003ad4 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	6879      	ldr	r1, [r7, #4]
 80039b2:	4613      	mov	r3, r2
 80039b4:	011b      	lsls	r3, r3, #4
 80039b6:	1a9b      	subs	r3, r3, r2
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	440b      	add	r3, r1
 80039bc:	334d      	adds	r3, #77	@ 0x4d
 80039be:	2202      	movs	r2, #2
 80039c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80039c2:	78fa      	ldrb	r2, [r7, #3]
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	4613      	mov	r3, r2
 80039c8:	011b      	lsls	r3, r3, #4
 80039ca:	1a9b      	subs	r3, r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	440b      	add	r3, r1
 80039d0:	334c      	adds	r3, #76	@ 0x4c
 80039d2:	2201      	movs	r2, #1
 80039d4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80039d6:	78fa      	ldrb	r2, [r7, #3]
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	4613      	mov	r3, r2
 80039dc:	011b      	lsls	r3, r3, #4
 80039de:	1a9b      	subs	r3, r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	3326      	adds	r3, #38	@ 0x26
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d00b      	beq.n	8003a04 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	3326      	adds	r3, #38	@ 0x26
 80039fc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	f040 8190 	bne.w	8003d24 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	799b      	ldrb	r3, [r3, #6]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d115      	bne.n	8003a38 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	333d      	adds	r3, #61	@ 0x3d
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	f083 0301 	eor.w	r3, r3, #1
 8003a24:	b2d8      	uxtb	r0, r3
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	333d      	adds	r3, #61	@ 0x3d
 8003a34:	4602      	mov	r2, r0
 8003a36:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	799b      	ldrb	r3, [r3, #6]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	f040 8171 	bne.w	8003d24 <HCD_HC_OUT_IRQHandler+0x920>
 8003a42:	78fa      	ldrb	r2, [r7, #3]
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	4613      	mov	r3, r2
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	1a9b      	subs	r3, r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	3334      	adds	r3, #52	@ 0x34
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 8165 	beq.w	8003d24 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003a5a:	78fa      	ldrb	r2, [r7, #3]
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	3334      	adds	r3, #52	@ 0x34
 8003a6a:	6819      	ldr	r1, [r3, #0]
 8003a6c:	78fa      	ldrb	r2, [r7, #3]
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4403      	add	r3, r0
 8003a7a:	3328      	adds	r3, #40	@ 0x28
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	440b      	add	r3, r1
 8003a80:	1e59      	subs	r1, r3, #1
 8003a82:	78fa      	ldrb	r2, [r7, #3]
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	4613      	mov	r3, r2
 8003a88:	011b      	lsls	r3, r3, #4
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4403      	add	r3, r0
 8003a90:	3328      	adds	r3, #40	@ 0x28
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a98:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f000 813f 	beq.w	8003d24 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	333d      	adds	r3, #61	@ 0x3d
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	78fa      	ldrb	r2, [r7, #3]
 8003aba:	f083 0301 	eor.w	r3, r3, #1
 8003abe:	b2d8      	uxtb	r0, r3
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	1a9b      	subs	r3, r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	333d      	adds	r3, #61	@ 0x3d
 8003ace:	4602      	mov	r2, r0
 8003ad0:	701a      	strb	r2, [r3, #0]
 8003ad2:	e127      	b.n	8003d24 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	334d      	adds	r3, #77	@ 0x4d
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b03      	cmp	r3, #3
 8003ae8:	d120      	bne.n	8003b2c <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003aea:	78fa      	ldrb	r2, [r7, #3]
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	334d      	adds	r3, #77	@ 0x4d
 8003afa:	2202      	movs	r2, #2
 8003afc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003afe:	78fa      	ldrb	r2, [r7, #3]
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	331b      	adds	r3, #27
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	f040 8107 	bne.w	8003d24 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b16:	78fa      	ldrb	r2, [r7, #3]
 8003b18:	6879      	ldr	r1, [r7, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	1a9b      	subs	r3, r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	440b      	add	r3, r1
 8003b24:	334c      	adds	r3, #76	@ 0x4c
 8003b26:	2202      	movs	r2, #2
 8003b28:	701a      	strb	r2, [r3, #0]
 8003b2a:	e0fb      	b.n	8003d24 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003b2c:	78fa      	ldrb	r2, [r7, #3]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	1a9b      	subs	r3, r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	334d      	adds	r3, #77	@ 0x4d
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d13a      	bne.n	8003bb8 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	1a9b      	subs	r3, r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	334d      	adds	r3, #77	@ 0x4d
 8003b52:	2202      	movs	r2, #2
 8003b54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b56:	78fa      	ldrb	r2, [r7, #3]
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	1a9b      	subs	r3, r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	334c      	adds	r3, #76	@ 0x4c
 8003b66:	2202      	movs	r2, #2
 8003b68:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	1a9b      	subs	r3, r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	331b      	adds	r3, #27
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	f040 80d1 	bne.w	8003d24 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003b82:	78fa      	ldrb	r2, [r7, #3]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	331b      	adds	r3, #27
 8003b92:	2200      	movs	r2, #0
 8003b94:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b96:	78fb      	ldrb	r3, [r7, #3]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	78fa      	ldrb	r2, [r7, #3]
 8003ba6:	0151      	lsls	r1, r2, #5
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	440a      	add	r2, r1
 8003bac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003bb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bb4:	6053      	str	r3, [r2, #4]
 8003bb6:	e0b5      	b.n	8003d24 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003bb8:	78fa      	ldrb	r2, [r7, #3]
 8003bba:	6879      	ldr	r1, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	334d      	adds	r3, #77	@ 0x4d
 8003bc8:	781b      	ldrb	r3, [r3, #0]
 8003bca:	2b05      	cmp	r3, #5
 8003bcc:	d114      	bne.n	8003bf8 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bce:	78fa      	ldrb	r2, [r7, #3]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	334d      	adds	r3, #77	@ 0x4d
 8003bde:	2202      	movs	r2, #2
 8003be0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003be2:	78fa      	ldrb	r2, [r7, #3]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	334c      	adds	r3, #76	@ 0x4c
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	701a      	strb	r2, [r3, #0]
 8003bf6:	e095      	b.n	8003d24 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	334d      	adds	r3, #77	@ 0x4d
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b06      	cmp	r3, #6
 8003c0c:	d114      	bne.n	8003c38 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c0e:	78fa      	ldrb	r2, [r7, #3]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	1a9b      	subs	r3, r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	334d      	adds	r3, #77	@ 0x4d
 8003c1e:	2202      	movs	r2, #2
 8003c20:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	1a9b      	subs	r3, r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	334c      	adds	r3, #76	@ 0x4c
 8003c32:	2205      	movs	r2, #5
 8003c34:	701a      	strb	r2, [r3, #0]
 8003c36:	e075      	b.n	8003d24 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c38:	78fa      	ldrb	r2, [r7, #3]
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	334d      	adds	r3, #77	@ 0x4d
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b07      	cmp	r3, #7
 8003c4c:	d00a      	beq.n	8003c64 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003c4e:	78fa      	ldrb	r2, [r7, #3]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	334d      	adds	r3, #77	@ 0x4d
 8003c5e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c60:	2b09      	cmp	r3, #9
 8003c62:	d170      	bne.n	8003d46 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c64:	78fa      	ldrb	r2, [r7, #3]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	1a9b      	subs	r3, r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	334d      	adds	r3, #77	@ 0x4d
 8003c74:	2202      	movs	r2, #2
 8003c76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	3344      	adds	r3, #68	@ 0x44
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	1c59      	adds	r1, r3, #1
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	1a9b      	subs	r3, r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4403      	add	r3, r0
 8003c98:	3344      	adds	r3, #68	@ 0x44
 8003c9a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c9c:	78fa      	ldrb	r2, [r7, #3]
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	3344      	adds	r3, #68	@ 0x44
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d914      	bls.n	8003cdc <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003cb2:	78fa      	ldrb	r2, [r7, #3]
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	1a9b      	subs	r3, r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	3344      	adds	r3, #68	@ 0x44
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003cc6:	78fa      	ldrb	r2, [r7, #3]
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	334c      	adds	r3, #76	@ 0x4c
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003cda:	e022      	b.n	8003d22 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	6879      	ldr	r1, [r7, #4]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	1a9b      	subs	r3, r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	440b      	add	r3, r1
 8003cea:	334c      	adds	r3, #76	@ 0x4c
 8003cec:	2202      	movs	r2, #2
 8003cee:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d06:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d0e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d10:	78fb      	ldrb	r3, [r7, #3]
 8003d12:	015a      	lsls	r2, r3, #5
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	4413      	add	r3, r2
 8003d18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d22:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d24:	78fa      	ldrb	r2, [r7, #3]
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	334c      	adds	r3, #76	@ 0x4c
 8003d34:	781a      	ldrb	r2, [r3, #0]
 8003d36:	78fb      	ldrb	r3, [r7, #3]
 8003d38:	4619      	mov	r1, r3
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f004 fe3a 	bl	80089b4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d40:	e002      	b.n	8003d48 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003d42:	bf00      	nop
 8003d44:	e000      	b.n	8003d48 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003d46:	bf00      	nop
  }
}
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b08a      	sub	sp, #40	@ 0x28
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	0c5b      	lsrs	r3, r3, #17
 8003d74:	f003 030f 	and.w	r3, r3, #15
 8003d78:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d82:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d004      	beq.n	8003d94 <HCD_RXQLVL_IRQHandler+0x46>
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2b05      	cmp	r3, #5
 8003d8e:	f000 80b6 	beq.w	8003efe <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003d92:	e0b7      	b.n	8003f04 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 80b3 	beq.w	8003f02 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4613      	mov	r3, r2
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	332c      	adds	r3, #44	@ 0x2c
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 80a7 	beq.w	8003f02 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003db4:	6879      	ldr	r1, [r7, #4]
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4613      	mov	r3, r2
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	1a9b      	subs	r3, r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	3338      	adds	r3, #56	@ 0x38
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	18d1      	adds	r1, r2, r3
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4403      	add	r3, r0
 8003dd8:	3334      	adds	r3, #52	@ 0x34
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4299      	cmp	r1, r3
 8003dde:	f200 8083 	bhi.w	8003ee8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4613      	mov	r3, r2
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	332c      	adds	r3, #44	@ 0x2c
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	b292      	uxth	r2, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	f002 fca9 	bl	8006754 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4613      	mov	r3, r2
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	332c      	adds	r3, #44	@ 0x2c
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	18d1      	adds	r1, r2, r3
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4403      	add	r3, r0
 8003e26:	332c      	adds	r3, #44	@ 0x2c
 8003e28:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	011b      	lsls	r3, r3, #4
 8003e32:	1a9b      	subs	r3, r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	440b      	add	r3, r1
 8003e38:	3338      	adds	r3, #56	@ 0x38
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	18d1      	adds	r1, r2, r3
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4613      	mov	r3, r2
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4403      	add	r3, r0
 8003e4e:	3338      	adds	r3, #56	@ 0x38
 8003e50:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	0cdb      	lsrs	r3, r3, #19
 8003e62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e66:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	3328      	adds	r3, #40	@ 0x28
 8003e78:	881b      	ldrh	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d13f      	bne.n	8003f02 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d03c      	beq.n	8003f02 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e9e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ea6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	333c      	adds	r3, #60	@ 0x3c
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	f083 0301 	eor.w	r3, r3, #1
 8003ed0:	b2d8      	uxtb	r0, r3
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	333c      	adds	r3, #60	@ 0x3c
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	701a      	strb	r2, [r3, #0]
      break;
 8003ee6:	e00c      	b.n	8003f02 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4613      	mov	r3, r2
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	1a9b      	subs	r3, r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	334c      	adds	r3, #76	@ 0x4c
 8003ef8:	2204      	movs	r2, #4
 8003efa:	701a      	strb	r2, [r3, #0]
      break;
 8003efc:	e001      	b.n	8003f02 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003efe:	bf00      	nop
 8003f00:	e000      	b.n	8003f04 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003f02:	bf00      	nop
  }
}
 8003f04:	bf00      	nop
 8003f06:	3728      	adds	r7, #40	@ 0x28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003f38:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d10b      	bne.n	8003f5c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d102      	bne.n	8003f54 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f004 fd14 	bl	800897c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	f043 0302 	orr.w	r3, r3, #2
 8003f5a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d132      	bne.n	8003fcc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	f043 0308 	orr.w	r3, r3, #8
 8003f6c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b04      	cmp	r3, #4
 8003f76:	d126      	bne.n	8003fc6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	7a5b      	ldrb	r3, [r3, #9]
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d113      	bne.n	8003fa8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003f86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f8a:	d106      	bne.n	8003f9a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2102      	movs	r1, #2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f002 fd6e 	bl	8006a74 <USB_InitFSLSPClkSel>
 8003f98:	e011      	b.n	8003fbe <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f002 fd67 	bl	8006a74 <USB_InitFSLSPClkSel>
 8003fa6:	e00a      	b.n	8003fbe <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	79db      	ldrb	r3, [r3, #7]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d106      	bne.n	8003fbe <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003fbc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f004 fd06 	bl	80089d0 <HAL_HCD_PortEnabled_Callback>
 8003fc4:	e002      	b.n	8003fcc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f004 fd10 	bl	80089ec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b20      	cmp	r3, #32
 8003fd4:	d103      	bne.n	8003fde <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f043 0320 	orr.w	r3, r3, #32
 8003fdc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	6013      	str	r3, [r2, #0]
}
 8003fea:	bf00      	nop
 8003fec:	3718      	adds	r7, #24
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e12b      	b.n	800425e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fd f94c 	bl	80012b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2224      	movs	r2, #36	@ 0x24
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0201 	bic.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004046:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004056:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004058:	f001 fa20 	bl	800549c <HAL_RCC_GetPCLK1Freq>
 800405c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4a81      	ldr	r2, [pc, #516]	@ (8004268 <HAL_I2C_Init+0x274>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d807      	bhi.n	8004078 <HAL_I2C_Init+0x84>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a80      	ldr	r2, [pc, #512]	@ (800426c <HAL_I2C_Init+0x278>)
 800406c:	4293      	cmp	r3, r2
 800406e:	bf94      	ite	ls
 8004070:	2301      	movls	r3, #1
 8004072:	2300      	movhi	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	e006      	b.n	8004086 <HAL_I2C_Init+0x92>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	4a7d      	ldr	r2, [pc, #500]	@ (8004270 <HAL_I2C_Init+0x27c>)
 800407c:	4293      	cmp	r3, r2
 800407e:	bf94      	ite	ls
 8004080:	2301      	movls	r3, #1
 8004082:	2300      	movhi	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e0e7      	b.n	800425e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4a78      	ldr	r2, [pc, #480]	@ (8004274 <HAL_I2C_Init+0x280>)
 8004092:	fba2 2303 	umull	r2, r3, r2, r3
 8004096:	0c9b      	lsrs	r3, r3, #18
 8004098:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	4a6a      	ldr	r2, [pc, #424]	@ (8004268 <HAL_I2C_Init+0x274>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d802      	bhi.n	80040c8 <HAL_I2C_Init+0xd4>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	3301      	adds	r3, #1
 80040c6:	e009      	b.n	80040dc <HAL_I2C_Init+0xe8>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040ce:	fb02 f303 	mul.w	r3, r2, r3
 80040d2:	4a69      	ldr	r2, [pc, #420]	@ (8004278 <HAL_I2C_Init+0x284>)
 80040d4:	fba2 2303 	umull	r2, r3, r2, r3
 80040d8:	099b      	lsrs	r3, r3, #6
 80040da:	3301      	adds	r3, #1
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6812      	ldr	r2, [r2, #0]
 80040e0:	430b      	orrs	r3, r1
 80040e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80040ee:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	495c      	ldr	r1, [pc, #368]	@ (8004268 <HAL_I2C_Init+0x274>)
 80040f8:	428b      	cmp	r3, r1
 80040fa:	d819      	bhi.n	8004130 <HAL_I2C_Init+0x13c>
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	1e59      	subs	r1, r3, #1
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	fbb1 f3f3 	udiv	r3, r1, r3
 800410a:	1c59      	adds	r1, r3, #1
 800410c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004110:	400b      	ands	r3, r1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_I2C_Init+0x138>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1e59      	subs	r1, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	fbb1 f3f3 	udiv	r3, r1, r3
 8004124:	3301      	adds	r3, #1
 8004126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800412a:	e051      	b.n	80041d0 <HAL_I2C_Init+0x1dc>
 800412c:	2304      	movs	r3, #4
 800412e:	e04f      	b.n	80041d0 <HAL_I2C_Init+0x1dc>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d111      	bne.n	800415c <HAL_I2C_Init+0x168>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	1e58      	subs	r0, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6859      	ldr	r1, [r3, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	440b      	add	r3, r1
 8004146:	fbb0 f3f3 	udiv	r3, r0, r3
 800414a:	3301      	adds	r3, #1
 800414c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004150:	2b00      	cmp	r3, #0
 8004152:	bf0c      	ite	eq
 8004154:	2301      	moveq	r3, #1
 8004156:	2300      	movne	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	e012      	b.n	8004182 <HAL_I2C_Init+0x18e>
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	1e58      	subs	r0, r3, #1
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6859      	ldr	r1, [r3, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	0099      	lsls	r1, r3, #2
 800416c:	440b      	add	r3, r1
 800416e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004172:	3301      	adds	r3, #1
 8004174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004178:	2b00      	cmp	r3, #0
 800417a:	bf0c      	ite	eq
 800417c:	2301      	moveq	r3, #1
 800417e:	2300      	movne	r3, #0
 8004180:	b2db      	uxtb	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_I2C_Init+0x196>
 8004186:	2301      	movs	r3, #1
 8004188:	e022      	b.n	80041d0 <HAL_I2C_Init+0x1dc>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10e      	bne.n	80041b0 <HAL_I2C_Init+0x1bc>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1e58      	subs	r0, r3, #1
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6859      	ldr	r1, [r3, #4]
 800419a:	460b      	mov	r3, r1
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	440b      	add	r3, r1
 80041a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80041a4:	3301      	adds	r3, #1
 80041a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041ae:	e00f      	b.n	80041d0 <HAL_I2C_Init+0x1dc>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	1e58      	subs	r0, r3, #1
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6859      	ldr	r1, [r3, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	0099      	lsls	r1, r3, #2
 80041c0:	440b      	add	r3, r1
 80041c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041c6:	3301      	adds	r3, #1
 80041c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	6809      	ldr	r1, [r1, #0]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69da      	ldr	r2, [r3, #28]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80041fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6911      	ldr	r1, [r2, #16]
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	68d2      	ldr	r2, [r2, #12]
 800420a:	4311      	orrs	r1, r2
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6812      	ldr	r2, [r2, #0]
 8004210:	430b      	orrs	r3, r1
 8004212:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695a      	ldr	r2, [r3, #20]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	431a      	orrs	r2, r3
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f042 0201 	orr.w	r2, r2, #1
 800423e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	000186a0 	.word	0x000186a0
 800426c:	001e847f 	.word	0x001e847f
 8004270:	003d08ff 	.word	0x003d08ff
 8004274:	431bde83 	.word	0x431bde83
 8004278:	10624dd3 	.word	0x10624dd3

0800427c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d101      	bne.n	800428e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e128      	b.n	80044e0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d109      	bne.n	80042ae <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a90      	ldr	r2, [pc, #576]	@ (80044e8 <HAL_I2S_Init+0x26c>)
 80042a6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7fd f84d 	bl	8001348 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2202      	movs	r2, #2
 80042b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80042c4:	f023 030f 	bic.w	r3, r3, #15
 80042c8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2202      	movs	r2, #2
 80042d0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	695b      	ldr	r3, [r3, #20]
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d060      	beq.n	800439c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d102      	bne.n	80042e8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80042e2:	2310      	movs	r3, #16
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	e001      	b.n	80042ec <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80042e8:	2320      	movs	r3, #32
 80042ea:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	d802      	bhi.n	80042fa <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80042fa:	2001      	movs	r0, #1
 80042fc:	f001 f9c4 	bl	8005688 <HAL_RCCEx_GetPeriphCLKFreq>
 8004300:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800430a:	d125      	bne.n	8004358 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d010      	beq.n	8004336 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	fbb2 f2f3 	udiv	r2, r2, r3
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	461a      	mov	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004330:	3305      	adds	r3, #5
 8004332:	613b      	str	r3, [r7, #16]
 8004334:	e01f      	b.n	8004376 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004340:	4613      	mov	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4413      	add	r3, r2
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	461a      	mov	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004352:	3305      	adds	r3, #5
 8004354:	613b      	str	r3, [r7, #16]
 8004356:	e00e      	b.n	8004376 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	005b      	lsls	r3, r3, #1
 8004368:	461a      	mov	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004372:	3305      	adds	r3, #5
 8004374:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	4a5c      	ldr	r2, [pc, #368]	@ (80044ec <HAL_I2S_Init+0x270>)
 800437a:	fba2 2303 	umull	r2, r3, r2, r3
 800437e:	08db      	lsrs	r3, r3, #3
 8004380:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	f003 0301 	and.w	r3, r3, #1
 8004388:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	085b      	lsrs	r3, r3, #1
 8004392:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	61bb      	str	r3, [r7, #24]
 800439a:	e003      	b.n	80043a4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800439c:	2302      	movs	r3, #2
 800439e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80043a4:	69fb      	ldr	r3, [r7, #28]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d902      	bls.n	80043b0 <HAL_I2S_Init+0x134>
 80043aa:	69fb      	ldr	r3, [r7, #28]
 80043ac:	2bff      	cmp	r3, #255	@ 0xff
 80043ae:	d907      	bls.n	80043c0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b4:	f043 0210 	orr.w	r2, r3, #16
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e08f      	b.n	80044e0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	691a      	ldr	r2, [r3, #16]
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	ea42 0103 	orr.w	r1, r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80043de:	f023 030f 	bic.w	r3, r3, #15
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6851      	ldr	r1, [r2, #4]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6892      	ldr	r2, [r2, #8]
 80043ea:	4311      	orrs	r1, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	68d2      	ldr	r2, [r2, #12]
 80043f0:	4311      	orrs	r1, r2
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6992      	ldr	r2, [r2, #24]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	431a      	orrs	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004402:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d161      	bne.n	80044d0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a38      	ldr	r2, [pc, #224]	@ (80044f0 <HAL_I2S_Init+0x274>)
 8004410:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a37      	ldr	r2, [pc, #220]	@ (80044f4 <HAL_I2S_Init+0x278>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d101      	bne.n	8004420 <HAL_I2S_Init+0x1a4>
 800441c:	4b36      	ldr	r3, [pc, #216]	@ (80044f8 <HAL_I2S_Init+0x27c>)
 800441e:	e001      	b.n	8004424 <HAL_I2S_Init+0x1a8>
 8004420:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6812      	ldr	r2, [r2, #0]
 800442a:	4932      	ldr	r1, [pc, #200]	@ (80044f4 <HAL_I2S_Init+0x278>)
 800442c:	428a      	cmp	r2, r1
 800442e:	d101      	bne.n	8004434 <HAL_I2S_Init+0x1b8>
 8004430:	4a31      	ldr	r2, [pc, #196]	@ (80044f8 <HAL_I2S_Init+0x27c>)
 8004432:	e001      	b.n	8004438 <HAL_I2S_Init+0x1bc>
 8004434:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004438:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800443c:	f023 030f 	bic.w	r3, r3, #15
 8004440:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a2b      	ldr	r2, [pc, #172]	@ (80044f4 <HAL_I2S_Init+0x278>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d101      	bne.n	8004450 <HAL_I2S_Init+0x1d4>
 800444c:	4b2a      	ldr	r3, [pc, #168]	@ (80044f8 <HAL_I2S_Init+0x27c>)
 800444e:	e001      	b.n	8004454 <HAL_I2S_Init+0x1d8>
 8004450:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004454:	2202      	movs	r2, #2
 8004456:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a25      	ldr	r2, [pc, #148]	@ (80044f4 <HAL_I2S_Init+0x278>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d101      	bne.n	8004466 <HAL_I2S_Init+0x1ea>
 8004462:	4b25      	ldr	r3, [pc, #148]	@ (80044f8 <HAL_I2S_Init+0x27c>)
 8004464:	e001      	b.n	800446a <HAL_I2S_Init+0x1ee>
 8004466:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004476:	d003      	beq.n	8004480 <HAL_I2S_Init+0x204>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d103      	bne.n	8004488 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004480:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004484:	613b      	str	r3, [r7, #16]
 8004486:	e001      	b.n	800448c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004488:	2300      	movs	r3, #0
 800448a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004496:	4313      	orrs	r3, r2
 8004498:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80044a0:	4313      	orrs	r3, r2
 80044a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80044aa:	4313      	orrs	r3, r2
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	897b      	ldrh	r3, [r7, #10]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80044b8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a0d      	ldr	r2, [pc, #52]	@ (80044f4 <HAL_I2S_Init+0x278>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d101      	bne.n	80044c8 <HAL_I2S_Init+0x24c>
 80044c4:	4b0c      	ldr	r3, [pc, #48]	@ (80044f8 <HAL_I2S_Init+0x27c>)
 80044c6:	e001      	b.n	80044cc <HAL_I2S_Init+0x250>
 80044c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044cc:	897a      	ldrh	r2, [r7, #10]
 80044ce:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2201      	movs	r2, #1
 80044da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3720      	adds	r7, #32
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	080045f3 	.word	0x080045f3
 80044ec:	cccccccd 	.word	0xcccccccd
 80044f0:	08004709 	.word	0x08004709
 80044f4:	40003800 	.word	0x40003800
 80044f8:	40003400 	.word	0x40003400

080044fc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004544:	881a      	ldrh	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004550:	1c9a      	adds	r2, r3, #2
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10e      	bne.n	800458c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800457c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f7ff ffb8 	bl	80044fc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800458c:	bf00      	nop
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	68da      	ldr	r2, [r3, #12]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a6:	b292      	uxth	r2, r2
 80045a8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ae:	1c9a      	adds	r2, r3, #2
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10e      	bne.n	80045ea <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	685a      	ldr	r2, [r3, #4]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045da:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff ff93 	bl	8004510 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80045ea:	bf00      	nop
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b086      	sub	sp, #24
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b04      	cmp	r3, #4
 800460c:	d13a      	bne.n	8004684 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b01      	cmp	r3, #1
 8004616:	d109      	bne.n	800462c <I2S_IRQHandler+0x3a>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004622:	2b40      	cmp	r3, #64	@ 0x40
 8004624:	d102      	bne.n	800462c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f7ff ffb4 	bl	8004594 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004632:	2b40      	cmp	r3, #64	@ 0x40
 8004634:	d126      	bne.n	8004684 <I2S_IRQHandler+0x92>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f003 0320 	and.w	r3, r3, #32
 8004640:	2b20      	cmp	r3, #32
 8004642:	d11f      	bne.n	8004684 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685a      	ldr	r2, [r3, #4]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004652:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004654:	2300      	movs	r3, #0
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	613b      	str	r3, [r7, #16]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	613b      	str	r3, [r7, #16]
 8004668:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004676:	f043 0202 	orr.w	r2, r3, #2
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7ff ff50 	bl	8004524 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b03      	cmp	r3, #3
 800468e:	d136      	bne.n	80046fe <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b02      	cmp	r3, #2
 8004698:	d109      	bne.n	80046ae <I2S_IRQHandler+0xbc>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a4:	2b80      	cmp	r3, #128	@ 0x80
 80046a6:	d102      	bne.n	80046ae <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f7ff ff45 	bl	8004538 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d122      	bne.n	80046fe <I2S_IRQHandler+0x10c>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b20      	cmp	r3, #32
 80046c4:	d11b      	bne.n	80046fe <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80046d4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80046d6:	2300      	movs	r3, #0
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f0:	f043 0204 	orr.w	r2, r3, #4
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7ff ff13 	bl	8004524 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046fe:	bf00      	nop
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
	...

08004708 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b088      	sub	sp, #32
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a92      	ldr	r2, [pc, #584]	@ (8004968 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d101      	bne.n	8004726 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004722:	4b92      	ldr	r3, [pc, #584]	@ (800496c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004724:	e001      	b.n	800472a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004726:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a8b      	ldr	r2, [pc, #556]	@ (8004968 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d101      	bne.n	8004744 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004740:	4b8a      	ldr	r3, [pc, #552]	@ (800496c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004742:	e001      	b.n	8004748 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004744:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004754:	d004      	beq.n	8004760 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	f040 8099 	bne.w	8004892 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b02      	cmp	r3, #2
 8004768:	d107      	bne.n	800477a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004770:	2b00      	cmp	r3, #0
 8004772:	d002      	beq.n	800477a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f925 	bl	80049c4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	2b01      	cmp	r3, #1
 8004782:	d107      	bne.n	8004794 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f9c8 	bl	8004b24 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800479a:	2b40      	cmp	r3, #64	@ 0x40
 800479c:	d13a      	bne.n	8004814 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	f003 0320 	and.w	r3, r3, #32
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d035      	beq.n	8004814 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a6e      	ldr	r2, [pc, #440]	@ (8004968 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d101      	bne.n	80047b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80047b2:	4b6e      	ldr	r3, [pc, #440]	@ (800496c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047b4:	e001      	b.n	80047ba <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80047b6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4969      	ldr	r1, [pc, #420]	@ (8004968 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047c2:	428b      	cmp	r3, r1
 80047c4:	d101      	bne.n	80047ca <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80047c6:	4b69      	ldr	r3, [pc, #420]	@ (800496c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047c8:	e001      	b.n	80047ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80047ca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047ce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047d2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685a      	ldr	r2, [r3, #4]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047e2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004806:	f043 0202 	orr.w	r2, r3, #2
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff fe88 	bl	8004524 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b08      	cmp	r3, #8
 800481c:	f040 80c3 	bne.w	80049a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f003 0320 	and.w	r3, r3, #32
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 80bd 	beq.w	80049a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800483a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a49      	ldr	r2, [pc, #292]	@ (8004968 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d101      	bne.n	800484a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004846:	4b49      	ldr	r3, [pc, #292]	@ (800496c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004848:	e001      	b.n	800484e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800484a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4944      	ldr	r1, [pc, #272]	@ (8004968 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004856:	428b      	cmp	r3, r1
 8004858:	d101      	bne.n	800485e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800485a:	4b44      	ldr	r3, [pc, #272]	@ (800496c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800485c:	e001      	b.n	8004862 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800485e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004862:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004866:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004868:	2300      	movs	r3, #0
 800486a:	60bb      	str	r3, [r7, #8]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	60bb      	str	r3, [r7, #8]
 8004874:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004882:	f043 0204 	orr.w	r2, r3, #4
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff fe4a 	bl	8004524 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004890:	e089      	b.n	80049a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b02      	cmp	r3, #2
 800489a:	d107      	bne.n	80048ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d002      	beq.n	80048ac <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f8be 	bl	8004a28 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d107      	bne.n	80048c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f8fd 	bl	8004ac0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048cc:	2b40      	cmp	r3, #64	@ 0x40
 80048ce:	d12f      	bne.n	8004930 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f003 0320 	and.w	r3, r3, #32
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d02a      	beq.n	8004930 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80048e8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004968 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d101      	bne.n	80048f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80048f4:	4b1d      	ldr	r3, [pc, #116]	@ (800496c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048f6:	e001      	b.n	80048fc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80048f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4919      	ldr	r1, [pc, #100]	@ (8004968 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004904:	428b      	cmp	r3, r1
 8004906:	d101      	bne.n	800490c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004908:	4b18      	ldr	r3, [pc, #96]	@ (800496c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800490a:	e001      	b.n	8004910 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800490c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004910:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004914:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004922:	f043 0202 	orr.w	r2, r3, #2
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7ff fdfa 	bl	8004524 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b08      	cmp	r3, #8
 8004938:	d136      	bne.n	80049a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f003 0320 	and.w	r3, r3, #32
 8004940:	2b00      	cmp	r3, #0
 8004942:	d031      	beq.n	80049a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a07      	ldr	r2, [pc, #28]	@ (8004968 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d101      	bne.n	8004952 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800494e:	4b07      	ldr	r3, [pc, #28]	@ (800496c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004950:	e001      	b.n	8004956 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004952:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4902      	ldr	r1, [pc, #8]	@ (8004968 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800495e:	428b      	cmp	r3, r1
 8004960:	d106      	bne.n	8004970 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004962:	4b02      	ldr	r3, [pc, #8]	@ (800496c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004964:	e006      	b.n	8004974 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004966:	bf00      	nop
 8004968:	40003800 	.word	0x40003800
 800496c:	40003400 	.word	0x40003400
 8004970:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004974:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004978:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004988:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004996:	f043 0204 	orr.w	r2, r3, #4
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7ff fdc0 	bl	8004524 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049a4:	e000      	b.n	80049a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049a6:	bf00      	nop
}
 80049a8:	bf00      	nop
 80049aa:	3720      	adds	r7, #32
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d0:	1c99      	adds	r1, r3, #2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6251      	str	r1, [r2, #36]	@ 0x24
 80049d6:	881a      	ldrh	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d113      	bne.n	8004a1e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a04:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d106      	bne.n	8004a1e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff ffc9 	bl	80049b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a1e:	bf00      	nop
 8004a20:	3708      	adds	r7, #8
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a34:	1c99      	adds	r1, r3, #2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6251      	str	r1, [r2, #36]	@ 0x24
 8004a3a:	8819      	ldrh	r1, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a1d      	ldr	r2, [pc, #116]	@ (8004ab8 <I2SEx_TxISR_I2SExt+0x90>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d101      	bne.n	8004a4a <I2SEx_TxISR_I2SExt+0x22>
 8004a46:	4b1d      	ldr	r3, [pc, #116]	@ (8004abc <I2SEx_TxISR_I2SExt+0x94>)
 8004a48:	e001      	b.n	8004a4e <I2SEx_TxISR_I2SExt+0x26>
 8004a4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a4e:	460a      	mov	r2, r1
 8004a50:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d121      	bne.n	8004aae <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a12      	ldr	r2, [pc, #72]	@ (8004ab8 <I2SEx_TxISR_I2SExt+0x90>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d101      	bne.n	8004a78 <I2SEx_TxISR_I2SExt+0x50>
 8004a74:	4b11      	ldr	r3, [pc, #68]	@ (8004abc <I2SEx_TxISR_I2SExt+0x94>)
 8004a76:	e001      	b.n	8004a7c <I2SEx_TxISR_I2SExt+0x54>
 8004a78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	490d      	ldr	r1, [pc, #52]	@ (8004ab8 <I2SEx_TxISR_I2SExt+0x90>)
 8004a84:	428b      	cmp	r3, r1
 8004a86:	d101      	bne.n	8004a8c <I2SEx_TxISR_I2SExt+0x64>
 8004a88:	4b0c      	ldr	r3, [pc, #48]	@ (8004abc <I2SEx_TxISR_I2SExt+0x94>)
 8004a8a:	e001      	b.n	8004a90 <I2SEx_TxISR_I2SExt+0x68>
 8004a8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a90:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a94:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d106      	bne.n	8004aae <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7ff ff81 	bl	80049b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004aae:	bf00      	nop
 8004ab0:	3708      	adds	r7, #8
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	40003800 	.word	0x40003800
 8004abc:	40003400 	.word	0x40003400

08004ac0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68d8      	ldr	r0, [r3, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad2:	1c99      	adds	r1, r3, #2
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004ad8:	b282      	uxth	r2, r0
 8004ada:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d113      	bne.n	8004b1c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b02:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff ff4a 	bl	80049b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b1c:	bf00      	nop
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a20      	ldr	r2, [pc, #128]	@ (8004bb4 <I2SEx_RxISR_I2SExt+0x90>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d101      	bne.n	8004b3a <I2SEx_RxISR_I2SExt+0x16>
 8004b36:	4b20      	ldr	r3, [pc, #128]	@ (8004bb8 <I2SEx_RxISR_I2SExt+0x94>)
 8004b38:	e001      	b.n	8004b3e <I2SEx_RxISR_I2SExt+0x1a>
 8004b3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b3e:	68d8      	ldr	r0, [r3, #12]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b44:	1c99      	adds	r1, r3, #2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004b4a:	b282      	uxth	r2, r0
 8004b4c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	3b01      	subs	r3, #1
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d121      	bne.n	8004baa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a12      	ldr	r2, [pc, #72]	@ (8004bb4 <I2SEx_RxISR_I2SExt+0x90>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d101      	bne.n	8004b74 <I2SEx_RxISR_I2SExt+0x50>
 8004b70:	4b11      	ldr	r3, [pc, #68]	@ (8004bb8 <I2SEx_RxISR_I2SExt+0x94>)
 8004b72:	e001      	b.n	8004b78 <I2SEx_RxISR_I2SExt+0x54>
 8004b74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	490d      	ldr	r1, [pc, #52]	@ (8004bb4 <I2SEx_RxISR_I2SExt+0x90>)
 8004b80:	428b      	cmp	r3, r1
 8004b82:	d101      	bne.n	8004b88 <I2SEx_RxISR_I2SExt+0x64>
 8004b84:	4b0c      	ldr	r3, [pc, #48]	@ (8004bb8 <I2SEx_RxISR_I2SExt+0x94>)
 8004b86:	e001      	b.n	8004b8c <I2SEx_RxISR_I2SExt+0x68>
 8004b88:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b90:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d106      	bne.n	8004baa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff ff03 	bl	80049b0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004baa:	bf00      	nop
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40003800 	.word	0x40003800
 8004bb8:	40003400 	.word	0x40003400

08004bbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e267      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d075      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bda:	4b88      	ldr	r3, [pc, #544]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d00c      	beq.n	8004c00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004be6:	4b85      	ldr	r3, [pc, #532]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d112      	bne.n	8004c18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bf2:	4b82      	ldr	r3, [pc, #520]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bfe:	d10b      	bne.n	8004c18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c00:	4b7e      	ldr	r3, [pc, #504]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d05b      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x108>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d157      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e242      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c20:	d106      	bne.n	8004c30 <HAL_RCC_OscConfig+0x74>
 8004c22:	4b76      	ldr	r3, [pc, #472]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a75      	ldr	r2, [pc, #468]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	e01d      	b.n	8004c6c <HAL_RCC_OscConfig+0xb0>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c38:	d10c      	bne.n	8004c54 <HAL_RCC_OscConfig+0x98>
 8004c3a:	4b70      	ldr	r3, [pc, #448]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a6f      	ldr	r2, [pc, #444]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	4b6d      	ldr	r3, [pc, #436]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a6c      	ldr	r2, [pc, #432]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	e00b      	b.n	8004c6c <HAL_RCC_OscConfig+0xb0>
 8004c54:	4b69      	ldr	r3, [pc, #420]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a68      	ldr	r2, [pc, #416]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	4b66      	ldr	r3, [pc, #408]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a65      	ldr	r2, [pc, #404]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d013      	beq.n	8004c9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c74:	f7fc fdb0 	bl	80017d8 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c7c:	f7fc fdac 	bl	80017d8 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b64      	cmp	r3, #100	@ 0x64
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e207      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c8e:	4b5b      	ldr	r3, [pc, #364]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0f0      	beq.n	8004c7c <HAL_RCC_OscConfig+0xc0>
 8004c9a:	e014      	b.n	8004cc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9c:	f7fc fd9c 	bl	80017d8 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ca4:	f7fc fd98 	bl	80017d8 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	@ 0x64
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e1f3      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cb6:	4b51      	ldr	r3, [pc, #324]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f0      	bne.n	8004ca4 <HAL_RCC_OscConfig+0xe8>
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d063      	beq.n	8004d9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cd2:	4b4a      	ldr	r3, [pc, #296]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 030c 	and.w	r3, r3, #12
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00b      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cde:	4b47      	ldr	r3, [pc, #284]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	d11c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cea:	4b44      	ldr	r3, [pc, #272]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d116      	bne.n	8004d24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cf6:	4b41      	ldr	r3, [pc, #260]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d005      	beq.n	8004d0e <HAL_RCC_OscConfig+0x152>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d001      	beq.n	8004d0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e1c7      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d0e:	4b3b      	ldr	r3, [pc, #236]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4937      	ldr	r1, [pc, #220]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d22:	e03a      	b.n	8004d9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d020      	beq.n	8004d6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d2c:	4b34      	ldr	r3, [pc, #208]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004d2e:	2201      	movs	r2, #1
 8004d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d32:	f7fc fd51 	bl	80017d8 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d3a:	f7fc fd4d 	bl	80017d8 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e1a8      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d58:	4b28      	ldr	r3, [pc, #160]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	4925      	ldr	r1, [pc, #148]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	600b      	str	r3, [r1, #0]
 8004d6c:	e015      	b.n	8004d9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d6e:	4b24      	ldr	r3, [pc, #144]	@ (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7fc fd30 	bl	80017d8 <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d7c:	f7fc fd2c 	bl	80017d8 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e187      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d036      	beq.n	8004e14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d016      	beq.n	8004ddc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dae:	4b15      	ldr	r3, [pc, #84]	@ (8004e04 <HAL_RCC_OscConfig+0x248>)
 8004db0:	2201      	movs	r2, #1
 8004db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db4:	f7fc fd10 	bl	80017d8 <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dbc:	f7fc fd0c 	bl	80017d8 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e167      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dce:	4b0b      	ldr	r3, [pc, #44]	@ (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0f0      	beq.n	8004dbc <HAL_RCC_OscConfig+0x200>
 8004dda:	e01b      	b.n	8004e14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ddc:	4b09      	ldr	r3, [pc, #36]	@ (8004e04 <HAL_RCC_OscConfig+0x248>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de2:	f7fc fcf9 	bl	80017d8 <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004de8:	e00e      	b.n	8004e08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dea:	f7fc fcf5 	bl	80017d8 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d907      	bls.n	8004e08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e150      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	42470000 	.word	0x42470000
 8004e04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e08:	4b88      	ldr	r3, [pc, #544]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004e0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1ea      	bne.n	8004dea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8097 	beq.w	8004f50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e22:	2300      	movs	r3, #0
 8004e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e26:	4b81      	ldr	r3, [pc, #516]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10f      	bne.n	8004e52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e32:	2300      	movs	r3, #0
 8004e34:	60bb      	str	r3, [r7, #8]
 8004e36:	4b7d      	ldr	r3, [pc, #500]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3a:	4a7c      	ldr	r2, [pc, #496]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e42:	4b7a      	ldr	r3, [pc, #488]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e4a:	60bb      	str	r3, [r7, #8]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e52:	4b77      	ldr	r3, [pc, #476]	@ (8005030 <HAL_RCC_OscConfig+0x474>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d118      	bne.n	8004e90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e5e:	4b74      	ldr	r3, [pc, #464]	@ (8005030 <HAL_RCC_OscConfig+0x474>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a73      	ldr	r2, [pc, #460]	@ (8005030 <HAL_RCC_OscConfig+0x474>)
 8004e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e6a:	f7fc fcb5 	bl	80017d8 <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e72:	f7fc fcb1 	bl	80017d8 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e10c      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e84:	4b6a      	ldr	r3, [pc, #424]	@ (8005030 <HAL_RCC_OscConfig+0x474>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0f0      	beq.n	8004e72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d106      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x2ea>
 8004e98:	4b64      	ldr	r3, [pc, #400]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e9c:	4a63      	ldr	r2, [pc, #396]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004e9e:	f043 0301 	orr.w	r3, r3, #1
 8004ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ea4:	e01c      	b.n	8004ee0 <HAL_RCC_OscConfig+0x324>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b05      	cmp	r3, #5
 8004eac:	d10c      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x30c>
 8004eae:	4b5f      	ldr	r3, [pc, #380]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb2:	4a5e      	ldr	r2, [pc, #376]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004eb4:	f043 0304 	orr.w	r3, r3, #4
 8004eb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004eba:	4b5c      	ldr	r3, [pc, #368]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ebe:	4a5b      	ldr	r2, [pc, #364]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ec6:	e00b      	b.n	8004ee0 <HAL_RCC_OscConfig+0x324>
 8004ec8:	4b58      	ldr	r3, [pc, #352]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ecc:	4a57      	ldr	r2, [pc, #348]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004ece:	f023 0301 	bic.w	r3, r3, #1
 8004ed2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ed4:	4b55      	ldr	r3, [pc, #340]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed8:	4a54      	ldr	r2, [pc, #336]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004eda:	f023 0304 	bic.w	r3, r3, #4
 8004ede:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d015      	beq.n	8004f14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee8:	f7fc fc76 	bl	80017d8 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eee:	e00a      	b.n	8004f06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ef0:	f7fc fc72 	bl	80017d8 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e0cb      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f06:	4b49      	ldr	r3, [pc, #292]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0ee      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x334>
 8004f12:	e014      	b.n	8004f3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f14:	f7fc fc60 	bl	80017d8 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f1a:	e00a      	b.n	8004f32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f1c:	f7fc fc5c 	bl	80017d8 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e0b5      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f32:	4b3e      	ldr	r3, [pc, #248]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1ee      	bne.n	8004f1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d105      	bne.n	8004f50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f44:	4b39      	ldr	r3, [pc, #228]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f48:	4a38      	ldr	r2, [pc, #224]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004f4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80a1 	beq.w	800509c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f5a:	4b34      	ldr	r3, [pc, #208]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d05c      	beq.n	8005020 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d141      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f6e:	4b31      	ldr	r3, [pc, #196]	@ (8005034 <HAL_RCC_OscConfig+0x478>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f74:	f7fc fc30 	bl	80017d8 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f7c:	f7fc fc2c 	bl	80017d8 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e087      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f8e:	4b27      	ldr	r3, [pc, #156]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f0      	bne.n	8004f7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69da      	ldr	r2, [r3, #28]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa8:	019b      	lsls	r3, r3, #6
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb0:	085b      	lsrs	r3, r3, #1
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	041b      	lsls	r3, r3, #16
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbc:	061b      	lsls	r3, r3, #24
 8004fbe:	491b      	ldr	r1, [pc, #108]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8005034 <HAL_RCC_OscConfig+0x478>)
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fca:	f7fc fc05 	bl	80017d8 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd2:	f7fc fc01 	bl	80017d8 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e05c      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fe4:	4b11      	ldr	r3, [pc, #68]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x416>
 8004ff0:	e054      	b.n	800509c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff2:	4b10      	ldr	r3, [pc, #64]	@ (8005034 <HAL_RCC_OscConfig+0x478>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff8:	f7fc fbee 	bl	80017d8 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005000:	f7fc fbea 	bl	80017d8 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e045      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005012:	4b06      	ldr	r3, [pc, #24]	@ (800502c <HAL_RCC_OscConfig+0x470>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1f0      	bne.n	8005000 <HAL_RCC_OscConfig+0x444>
 800501e:	e03d      	b.n	800509c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d107      	bne.n	8005038 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e038      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
 800502c:	40023800 	.word	0x40023800
 8005030:	40007000 	.word	0x40007000
 8005034:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005038:	4b1b      	ldr	r3, [pc, #108]	@ (80050a8 <HAL_RCC_OscConfig+0x4ec>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d028      	beq.n	8005098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005050:	429a      	cmp	r2, r3
 8005052:	d121      	bne.n	8005098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800505e:	429a      	cmp	r2, r3
 8005060:	d11a      	bne.n	8005098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005068:	4013      	ands	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800506e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005070:	4293      	cmp	r3, r2
 8005072:	d111      	bne.n	8005098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507e:	085b      	lsrs	r3, r3, #1
 8005080:	3b01      	subs	r3, #1
 8005082:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005084:	429a      	cmp	r2, r3
 8005086:	d107      	bne.n	8005098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005092:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005094:	429a      	cmp	r2, r3
 8005096:	d001      	beq.n	800509c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40023800 	.word	0x40023800

080050ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0cc      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050c0:	4b68      	ldr	r3, [pc, #416]	@ (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d90c      	bls.n	80050e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ce:	4b65      	ldr	r3, [pc, #404]	@ (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d6:	4b63      	ldr	r3, [pc, #396]	@ (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d001      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e0b8      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d020      	beq.n	8005136 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d005      	beq.n	800510c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005100:	4b59      	ldr	r3, [pc, #356]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	4a58      	ldr	r2, [pc, #352]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005106:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800510a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0308 	and.w	r3, r3, #8
 8005114:	2b00      	cmp	r3, #0
 8005116:	d005      	beq.n	8005124 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005118:	4b53      	ldr	r3, [pc, #332]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	4a52      	ldr	r2, [pc, #328]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800511e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005122:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005124:	4b50      	ldr	r3, [pc, #320]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	494d      	ldr	r1, [pc, #308]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	4313      	orrs	r3, r2
 8005134:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d044      	beq.n	80051cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d107      	bne.n	800515a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800514a:	4b47      	ldr	r3, [pc, #284]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d119      	bne.n	800518a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e07f      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b02      	cmp	r3, #2
 8005160:	d003      	beq.n	800516a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005166:	2b03      	cmp	r3, #3
 8005168:	d107      	bne.n	800517a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800516a:	4b3f      	ldr	r3, [pc, #252]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d109      	bne.n	800518a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e06f      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800517a:	4b3b      	ldr	r3, [pc, #236]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e067      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800518a:	4b37      	ldr	r3, [pc, #220]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f023 0203 	bic.w	r2, r3, #3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	4934      	ldr	r1, [pc, #208]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005198:	4313      	orrs	r3, r2
 800519a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800519c:	f7fc fb1c 	bl	80017d8 <HAL_GetTick>
 80051a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051a2:	e00a      	b.n	80051ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051a4:	f7fc fb18 	bl	80017d8 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e04f      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ba:	4b2b      	ldr	r3, [pc, #172]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 020c 	and.w	r2, r3, #12
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d1eb      	bne.n	80051a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051cc:	4b25      	ldr	r3, [pc, #148]	@ (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d20c      	bcs.n	80051f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051da:	4b22      	ldr	r3, [pc, #136]	@ (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051e2:	4b20      	ldr	r3, [pc, #128]	@ (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d001      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e032      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d008      	beq.n	8005212 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005200:	4b19      	ldr	r3, [pc, #100]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	4916      	ldr	r1, [pc, #88]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800520e:	4313      	orrs	r3, r2
 8005210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b00      	cmp	r3, #0
 800521c:	d009      	beq.n	8005232 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800521e:	4b12      	ldr	r3, [pc, #72]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	490e      	ldr	r1, [pc, #56]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800522e:	4313      	orrs	r3, r2
 8005230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005232:	f000 f821 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8005236:	4602      	mov	r2, r0
 8005238:	4b0b      	ldr	r3, [pc, #44]	@ (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	091b      	lsrs	r3, r3, #4
 800523e:	f003 030f 	and.w	r3, r3, #15
 8005242:	490a      	ldr	r1, [pc, #40]	@ (800526c <HAL_RCC_ClockConfig+0x1c0>)
 8005244:	5ccb      	ldrb	r3, [r1, r3]
 8005246:	fa22 f303 	lsr.w	r3, r2, r3
 800524a:	4a09      	ldr	r2, [pc, #36]	@ (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 800524c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800524e:	4b09      	ldr	r3, [pc, #36]	@ (8005274 <HAL_RCC_ClockConfig+0x1c8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f7fc fa7c 	bl	8001750 <HAL_InitTick>

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40023c00 	.word	0x40023c00
 8005268:	40023800 	.word	0x40023800
 800526c:	08009010 	.word	0x08009010
 8005270:	20000004 	.word	0x20000004
 8005274:	20000008 	.word	0x20000008

08005278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800527c:	b094      	sub	sp, #80	@ 0x50
 800527e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	647b      	str	r3, [r7, #68]	@ 0x44
 8005284:	2300      	movs	r3, #0
 8005286:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005288:	2300      	movs	r3, #0
 800528a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005290:	4b79      	ldr	r3, [pc, #484]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 030c 	and.w	r3, r3, #12
 8005298:	2b08      	cmp	r3, #8
 800529a:	d00d      	beq.n	80052b8 <HAL_RCC_GetSysClockFreq+0x40>
 800529c:	2b08      	cmp	r3, #8
 800529e:	f200 80e1 	bhi.w	8005464 <HAL_RCC_GetSysClockFreq+0x1ec>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_RCC_GetSysClockFreq+0x34>
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d003      	beq.n	80052b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80052aa:	e0db      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052ac:	4b73      	ldr	r3, [pc, #460]	@ (800547c <HAL_RCC_GetSysClockFreq+0x204>)
 80052ae:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80052b0:	e0db      	b.n	800546a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052b2:	4b73      	ldr	r3, [pc, #460]	@ (8005480 <HAL_RCC_GetSysClockFreq+0x208>)
 80052b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052b6:	e0d8      	b.n	800546a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052b8:	4b6f      	ldr	r3, [pc, #444]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052c2:	4b6d      	ldr	r3, [pc, #436]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d063      	beq.n	8005396 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ce:	4b6a      	ldr	r3, [pc, #424]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	099b      	lsrs	r3, r3, #6
 80052d4:	2200      	movs	r2, #0
 80052d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80052da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80052e2:	2300      	movs	r3, #0
 80052e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80052e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80052ea:	4622      	mov	r2, r4
 80052ec:	462b      	mov	r3, r5
 80052ee:	f04f 0000 	mov.w	r0, #0
 80052f2:	f04f 0100 	mov.w	r1, #0
 80052f6:	0159      	lsls	r1, r3, #5
 80052f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052fc:	0150      	lsls	r0, r2, #5
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4621      	mov	r1, r4
 8005304:	1a51      	subs	r1, r2, r1
 8005306:	6139      	str	r1, [r7, #16]
 8005308:	4629      	mov	r1, r5
 800530a:	eb63 0301 	sbc.w	r3, r3, r1
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800531c:	4659      	mov	r1, fp
 800531e:	018b      	lsls	r3, r1, #6
 8005320:	4651      	mov	r1, sl
 8005322:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005326:	4651      	mov	r1, sl
 8005328:	018a      	lsls	r2, r1, #6
 800532a:	4651      	mov	r1, sl
 800532c:	ebb2 0801 	subs.w	r8, r2, r1
 8005330:	4659      	mov	r1, fp
 8005332:	eb63 0901 	sbc.w	r9, r3, r1
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005342:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005346:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800534a:	4690      	mov	r8, r2
 800534c:	4699      	mov	r9, r3
 800534e:	4623      	mov	r3, r4
 8005350:	eb18 0303 	adds.w	r3, r8, r3
 8005354:	60bb      	str	r3, [r7, #8]
 8005356:	462b      	mov	r3, r5
 8005358:	eb49 0303 	adc.w	r3, r9, r3
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800536a:	4629      	mov	r1, r5
 800536c:	024b      	lsls	r3, r1, #9
 800536e:	4621      	mov	r1, r4
 8005370:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005374:	4621      	mov	r1, r4
 8005376:	024a      	lsls	r2, r1, #9
 8005378:	4610      	mov	r0, r2
 800537a:	4619      	mov	r1, r3
 800537c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800537e:	2200      	movs	r2, #0
 8005380:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005382:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005384:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005388:	f7fb fa2c 	bl	80007e4 <__aeabi_uldivmod>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4613      	mov	r3, r2
 8005392:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005394:	e058      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005396:	4b38      	ldr	r3, [pc, #224]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	099b      	lsrs	r3, r3, #6
 800539c:	2200      	movs	r2, #0
 800539e:	4618      	mov	r0, r3
 80053a0:	4611      	mov	r1, r2
 80053a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053a6:	623b      	str	r3, [r7, #32]
 80053a8:	2300      	movs	r3, #0
 80053aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053b0:	4642      	mov	r2, r8
 80053b2:	464b      	mov	r3, r9
 80053b4:	f04f 0000 	mov.w	r0, #0
 80053b8:	f04f 0100 	mov.w	r1, #0
 80053bc:	0159      	lsls	r1, r3, #5
 80053be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053c2:	0150      	lsls	r0, r2, #5
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4641      	mov	r1, r8
 80053ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80053ce:	4649      	mov	r1, r9
 80053d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053e8:	ebb2 040a 	subs.w	r4, r2, sl
 80053ec:	eb63 050b 	sbc.w	r5, r3, fp
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	00eb      	lsls	r3, r5, #3
 80053fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053fe:	00e2      	lsls	r2, r4, #3
 8005400:	4614      	mov	r4, r2
 8005402:	461d      	mov	r5, r3
 8005404:	4643      	mov	r3, r8
 8005406:	18e3      	adds	r3, r4, r3
 8005408:	603b      	str	r3, [r7, #0]
 800540a:	464b      	mov	r3, r9
 800540c:	eb45 0303 	adc.w	r3, r5, r3
 8005410:	607b      	str	r3, [r7, #4]
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800541e:	4629      	mov	r1, r5
 8005420:	028b      	lsls	r3, r1, #10
 8005422:	4621      	mov	r1, r4
 8005424:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005428:	4621      	mov	r1, r4
 800542a:	028a      	lsls	r2, r1, #10
 800542c:	4610      	mov	r0, r2
 800542e:	4619      	mov	r1, r3
 8005430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005432:	2200      	movs	r2, #0
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	61fa      	str	r2, [r7, #28]
 8005438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800543c:	f7fb f9d2 	bl	80007e4 <__aeabi_uldivmod>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4613      	mov	r3, r2
 8005446:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005448:	4b0b      	ldr	r3, [pc, #44]	@ (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	0c1b      	lsrs	r3, r3, #16
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	3301      	adds	r3, #1
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005458:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800545a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800545c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005460:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005462:	e002      	b.n	800546a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005464:	4b05      	ldr	r3, [pc, #20]	@ (800547c <HAL_RCC_GetSysClockFreq+0x204>)
 8005466:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800546a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800546c:	4618      	mov	r0, r3
 800546e:	3750      	adds	r7, #80	@ 0x50
 8005470:	46bd      	mov	sp, r7
 8005472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005476:	bf00      	nop
 8005478:	40023800 	.word	0x40023800
 800547c:	00f42400 	.word	0x00f42400
 8005480:	007a1200 	.word	0x007a1200

08005484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005488:	4b03      	ldr	r3, [pc, #12]	@ (8005498 <HAL_RCC_GetHCLKFreq+0x14>)
 800548a:	681b      	ldr	r3, [r3, #0]
}
 800548c:	4618      	mov	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	20000004 	.word	0x20000004

0800549c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054a0:	f7ff fff0 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 80054a4:	4602      	mov	r2, r0
 80054a6:	4b05      	ldr	r3, [pc, #20]	@ (80054bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	0a9b      	lsrs	r3, r3, #10
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	4903      	ldr	r1, [pc, #12]	@ (80054c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054b2:	5ccb      	ldrb	r3, [r1, r3]
 80054b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40023800 	.word	0x40023800
 80054c0:	08009020 	.word	0x08009020

080054c4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80054d0:	2300      	movs	r3, #0
 80054d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d105      	bne.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d035      	beq.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80054ec:	4b62      	ldr	r3, [pc, #392]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054f2:	f7fc f971 	bl	80017d8 <HAL_GetTick>
 80054f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054f8:	e008      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80054fa:	f7fc f96d 	bl	80017d8 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b02      	cmp	r3, #2
 8005506:	d901      	bls.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e0b0      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800550c:	4b5b      	ldr	r3, [pc, #364]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1f0      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	019a      	lsls	r2, r3, #6
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	071b      	lsls	r3, r3, #28
 8005524:	4955      	ldr	r1, [pc, #340]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005526:	4313      	orrs	r3, r2
 8005528:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800552c:	4b52      	ldr	r3, [pc, #328]	@ (8005678 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800552e:	2201      	movs	r2, #1
 8005530:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005532:	f7fc f951 	bl	80017d8 <HAL_GetTick>
 8005536:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005538:	e008      	b.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800553a:	f7fc f94d 	bl	80017d8 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	2b02      	cmp	r3, #2
 8005546:	d901      	bls.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005548:	2303      	movs	r3, #3
 800554a:	e090      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800554c:	4b4b      	ldr	r3, [pc, #300]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d0f0      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 8083 	beq.w	800566c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005566:	2300      	movs	r3, #0
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	4b44      	ldr	r3, [pc, #272]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800556c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556e:	4a43      	ldr	r2, [pc, #268]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005574:	6413      	str	r3, [r2, #64]	@ 0x40
 8005576:	4b41      	ldr	r3, [pc, #260]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005582:	4b3f      	ldr	r3, [pc, #252]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a3e      	ldr	r2, [pc, #248]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800558c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800558e:	f7fc f923 	bl	80017d8 <HAL_GetTick>
 8005592:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005594:	e008      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005596:	f7fc f91f 	bl	80017d8 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d901      	bls.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e062      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80055a8:	4b35      	ldr	r3, [pc, #212]	@ (8005680 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0f0      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055b4:	4b31      	ldr	r3, [pc, #196]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055bc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d02f      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d028      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055d2:	4b2a      	ldr	r3, [pc, #168]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055da:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055dc:	4b29      	ldr	r3, [pc, #164]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80055de:	2201      	movs	r2, #1
 80055e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055e2:	4b28      	ldr	r3, [pc, #160]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80055e8:	4a24      	ldr	r2, [pc, #144]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055ee:	4b23      	ldr	r3, [pc, #140]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d114      	bne.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80055fa:	f7fc f8ed 	bl	80017d8 <HAL_GetTick>
 80055fe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005600:	e00a      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005602:	f7fc f8e9 	bl	80017d8 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005610:	4293      	cmp	r3, r2
 8005612:	d901      	bls.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e02a      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005618:	4b18      	ldr	r3, [pc, #96]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800561a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d0ee      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800562c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005630:	d10d      	bne.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005632:	4b12      	ldr	r3, [pc, #72]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005642:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005646:	490d      	ldr	r1, [pc, #52]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005648:	4313      	orrs	r3, r2
 800564a:	608b      	str	r3, [r1, #8]
 800564c:	e005      	b.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800564e:	4b0b      	ldr	r3, [pc, #44]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	4a0a      	ldr	r2, [pc, #40]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005654:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005658:	6093      	str	r3, [r2, #8]
 800565a:	4b08      	ldr	r3, [pc, #32]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800565c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005666:	4905      	ldr	r1, [pc, #20]	@ (800567c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005668:	4313      	orrs	r3, r2
 800566a:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3718      	adds	r7, #24
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	42470068 	.word	0x42470068
 800567c:	40023800 	.word	0x40023800
 8005680:	40007000 	.word	0x40007000
 8005684:	42470e40 	.word	0x42470e40

08005688 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005688:	b480      	push	{r7}
 800568a:	b087      	sub	sp, #28
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005698:	2300      	movs	r3, #0
 800569a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d13f      	bne.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80056a6:	4b24      	ldr	r3, [pc, #144]	@ (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d006      	beq.n	80056c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056bc:	d12f      	bne.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80056be:	4b1f      	ldr	r3, [pc, #124]	@ (800573c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80056c0:	617b      	str	r3, [r7, #20]
          break;
 80056c2:	e02f      	b.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80056c4:	4b1c      	ldr	r3, [pc, #112]	@ (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056d0:	d108      	bne.n	80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80056d2:	4b19      	ldr	r3, [pc, #100]	@ (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056da:	4a19      	ldr	r2, [pc, #100]	@ (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80056dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e0:	613b      	str	r3, [r7, #16]
 80056e2:	e007      	b.n	80056f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80056e4:	4b14      	ldr	r3, [pc, #80]	@ (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056ec:	4a15      	ldr	r2, [pc, #84]	@ (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80056ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80056f4:	4b10      	ldr	r3, [pc, #64]	@ (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056fa:	099b      	lsrs	r3, r3, #6
 80056fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	fb02 f303 	mul.w	r3, r2, r3
 8005706:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005708:	4b0b      	ldr	r3, [pc, #44]	@ (8005738 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800570a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800570e:	0f1b      	lsrs	r3, r3, #28
 8005710:	f003 0307 	and.w	r3, r3, #7
 8005714:	68ba      	ldr	r2, [r7, #8]
 8005716:	fbb2 f3f3 	udiv	r3, r2, r3
 800571a:	617b      	str	r3, [r7, #20]
          break;
 800571c:	e002      	b.n	8005724 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	617b      	str	r3, [r7, #20]
          break;
 8005722:	bf00      	nop
        }
      }
      break;
 8005724:	e000      	b.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8005726:	bf00      	nop
    }
  }
  return frequency;
 8005728:	697b      	ldr	r3, [r7, #20]
}
 800572a:	4618      	mov	r0, r3
 800572c:	371c      	adds	r7, #28
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	40023800 	.word	0x40023800
 800573c:	00bb8000 	.word	0x00bb8000
 8005740:	007a1200 	.word	0x007a1200
 8005744:	00f42400 	.word	0x00f42400

08005748 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e07b      	b.n	8005852 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575e:	2b00      	cmp	r3, #0
 8005760:	d108      	bne.n	8005774 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800576a:	d009      	beq.n	8005780 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2200      	movs	r2, #0
 8005770:	61da      	str	r2, [r3, #28]
 8005772:	e005      	b.n	8005780 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fb fe54 	bl	8001448 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80057c8:	431a      	orrs	r2, r3
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	431a      	orrs	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	431a      	orrs	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057fa:	431a      	orrs	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005804:	ea42 0103 	orr.w	r1, r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800580c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	430a      	orrs	r2, r1
 8005816:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	0c1b      	lsrs	r3, r3, #16
 800581e:	f003 0104 	and.w	r1, r3, #4
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005826:	f003 0210 	and.w	r2, r3, #16
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	69da      	ldr	r2, [r3, #28]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005840:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b082      	sub	sp, #8
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e041      	b.n	80058f0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	d106      	bne.n	8005886 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7fb fe29 	bl	80014d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2202      	movs	r2, #2
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	3304      	adds	r3, #4
 8005896:	4619      	mov	r1, r3
 8005898:	4610      	mov	r0, r2
 800589a:	f000 fa79 	bl	8005d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3708      	adds	r7, #8
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b01      	cmp	r3, #1
 800590a:	d001      	beq.n	8005910 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e046      	b.n	800599e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a23      	ldr	r2, [pc, #140]	@ (80059ac <HAL_TIM_Base_Start+0xb4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d022      	beq.n	8005968 <HAL_TIM_Base_Start+0x70>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800592a:	d01d      	beq.n	8005968 <HAL_TIM_Base_Start+0x70>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a1f      	ldr	r2, [pc, #124]	@ (80059b0 <HAL_TIM_Base_Start+0xb8>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d018      	beq.n	8005968 <HAL_TIM_Base_Start+0x70>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a1e      	ldr	r2, [pc, #120]	@ (80059b4 <HAL_TIM_Base_Start+0xbc>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d013      	beq.n	8005968 <HAL_TIM_Base_Start+0x70>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a1c      	ldr	r2, [pc, #112]	@ (80059b8 <HAL_TIM_Base_Start+0xc0>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00e      	beq.n	8005968 <HAL_TIM_Base_Start+0x70>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a1b      	ldr	r2, [pc, #108]	@ (80059bc <HAL_TIM_Base_Start+0xc4>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d009      	beq.n	8005968 <HAL_TIM_Base_Start+0x70>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a19      	ldr	r2, [pc, #100]	@ (80059c0 <HAL_TIM_Base_Start+0xc8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d004      	beq.n	8005968 <HAL_TIM_Base_Start+0x70>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a18      	ldr	r2, [pc, #96]	@ (80059c4 <HAL_TIM_Base_Start+0xcc>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d111      	bne.n	800598c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 0307 	and.w	r3, r3, #7
 8005972:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b06      	cmp	r3, #6
 8005978:	d010      	beq.n	800599c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 0201 	orr.w	r2, r2, #1
 8005988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598a:	e007      	b.n	800599c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f042 0201 	orr.w	r2, r2, #1
 800599a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	40010000 	.word	0x40010000
 80059b0:	40000400 	.word	0x40000400
 80059b4:	40000800 	.word	0x40000800
 80059b8:	40000c00 	.word	0x40000c00
 80059bc:	40010400 	.word	0x40010400
 80059c0:	40014000 	.word	0x40014000
 80059c4:	40001800 	.word	0x40001800

080059c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e041      	b.n	8005a5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f839 	bl	8005a66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4619      	mov	r1, r3
 8005a06:	4610      	mov	r0, r2
 8005a08:	f000 f9c2 	bl	8005d90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005a6e:	bf00      	nop
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
	...

08005a7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d101      	bne.n	8005a9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a96:	2302      	movs	r3, #2
 8005a98:	e0ae      	b.n	8005bf8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b0c      	cmp	r3, #12
 8005aa6:	f200 809f 	bhi.w	8005be8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab0:	08005ae5 	.word	0x08005ae5
 8005ab4:	08005be9 	.word	0x08005be9
 8005ab8:	08005be9 	.word	0x08005be9
 8005abc:	08005be9 	.word	0x08005be9
 8005ac0:	08005b25 	.word	0x08005b25
 8005ac4:	08005be9 	.word	0x08005be9
 8005ac8:	08005be9 	.word	0x08005be9
 8005acc:	08005be9 	.word	0x08005be9
 8005ad0:	08005b67 	.word	0x08005b67
 8005ad4:	08005be9 	.word	0x08005be9
 8005ad8:	08005be9 	.word	0x08005be9
 8005adc:	08005be9 	.word	0x08005be9
 8005ae0:	08005ba7 	.word	0x08005ba7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68b9      	ldr	r1, [r7, #8]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 f9fc 	bl	8005ee8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	699a      	ldr	r2, [r3, #24]
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0208 	orr.w	r2, r2, #8
 8005afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	699a      	ldr	r2, [r3, #24]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0204 	bic.w	r2, r2, #4
 8005b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6999      	ldr	r1, [r3, #24]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	691a      	ldr	r2, [r3, #16]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	430a      	orrs	r2, r1
 8005b20:	619a      	str	r2, [r3, #24]
      break;
 8005b22:	e064      	b.n	8005bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68b9      	ldr	r1, [r7, #8]
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 fa4c 	bl	8005fc8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699a      	ldr	r2, [r3, #24]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699a      	ldr	r2, [r3, #24]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6999      	ldr	r1, [r3, #24]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	021a      	lsls	r2, r3, #8
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	619a      	str	r2, [r3, #24]
      break;
 8005b64:	e043      	b.n	8005bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68b9      	ldr	r1, [r7, #8]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 faa1 	bl	80060b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	69da      	ldr	r2, [r3, #28]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 0208 	orr.w	r2, r2, #8
 8005b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	69da      	ldr	r2, [r3, #28]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 0204 	bic.w	r2, r2, #4
 8005b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69d9      	ldr	r1, [r3, #28]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	691a      	ldr	r2, [r3, #16]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	430a      	orrs	r2, r1
 8005ba2:	61da      	str	r2, [r3, #28]
      break;
 8005ba4:	e023      	b.n	8005bee <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68b9      	ldr	r1, [r7, #8]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 faf5 	bl	800619c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	69da      	ldr	r2, [r3, #28]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69da      	ldr	r2, [r3, #28]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69d9      	ldr	r1, [r3, #28]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	021a      	lsls	r2, r3, #8
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	61da      	str	r2, [r3, #28]
      break;
 8005be6:	e002      	b.n	8005bee <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	75fb      	strb	r3, [r7, #23]
      break;
 8005bec:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3718      	adds	r7, #24
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d101      	bne.n	8005c1c <HAL_TIM_ConfigClockSource+0x1c>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	e0b4      	b.n	8005d86 <HAL_TIM_ConfigClockSource+0x186>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2202      	movs	r2, #2
 8005c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c42:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	68ba      	ldr	r2, [r7, #8]
 8005c4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c54:	d03e      	beq.n	8005cd4 <HAL_TIM_ConfigClockSource+0xd4>
 8005c56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c5a:	f200 8087 	bhi.w	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c62:	f000 8086 	beq.w	8005d72 <HAL_TIM_ConfigClockSource+0x172>
 8005c66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c6a:	d87f      	bhi.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c6c:	2b70      	cmp	r3, #112	@ 0x70
 8005c6e:	d01a      	beq.n	8005ca6 <HAL_TIM_ConfigClockSource+0xa6>
 8005c70:	2b70      	cmp	r3, #112	@ 0x70
 8005c72:	d87b      	bhi.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c74:	2b60      	cmp	r3, #96	@ 0x60
 8005c76:	d050      	beq.n	8005d1a <HAL_TIM_ConfigClockSource+0x11a>
 8005c78:	2b60      	cmp	r3, #96	@ 0x60
 8005c7a:	d877      	bhi.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c7c:	2b50      	cmp	r3, #80	@ 0x50
 8005c7e:	d03c      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0xfa>
 8005c80:	2b50      	cmp	r3, #80	@ 0x50
 8005c82:	d873      	bhi.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c84:	2b40      	cmp	r3, #64	@ 0x40
 8005c86:	d058      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0x13a>
 8005c88:	2b40      	cmp	r3, #64	@ 0x40
 8005c8a:	d86f      	bhi.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c8c:	2b30      	cmp	r3, #48	@ 0x30
 8005c8e:	d064      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x15a>
 8005c90:	2b30      	cmp	r3, #48	@ 0x30
 8005c92:	d86b      	bhi.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d060      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x15a>
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d867      	bhi.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d05c      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x15a>
 8005ca0:	2b10      	cmp	r3, #16
 8005ca2:	d05a      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0x15a>
 8005ca4:	e062      	b.n	8005d6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cb6:	f000 fb41 	bl	800633c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005cc8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	609a      	str	r2, [r3, #8]
      break;
 8005cd2:	e04f      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ce4:	f000 fb2a 	bl	800633c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	689a      	ldr	r2, [r3, #8]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005cf6:	609a      	str	r2, [r3, #8]
      break;
 8005cf8:	e03c      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d06:	461a      	mov	r2, r3
 8005d08:	f000 fa9e 	bl	8006248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2150      	movs	r1, #80	@ 0x50
 8005d12:	4618      	mov	r0, r3
 8005d14:	f000 faf7 	bl	8006306 <TIM_ITRx_SetConfig>
      break;
 8005d18:	e02c      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d26:	461a      	mov	r2, r3
 8005d28:	f000 fabd 	bl	80062a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2160      	movs	r1, #96	@ 0x60
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fae7 	bl	8006306 <TIM_ITRx_SetConfig>
      break;
 8005d38:	e01c      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d46:	461a      	mov	r2, r3
 8005d48:	f000 fa7e 	bl	8006248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2140      	movs	r1, #64	@ 0x40
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fad7 	bl	8006306 <TIM_ITRx_SetConfig>
      break;
 8005d58:	e00c      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4619      	mov	r1, r3
 8005d64:	4610      	mov	r0, r2
 8005d66:	f000 face 	bl	8006306 <TIM_ITRx_SetConfig>
      break;
 8005d6a:	e003      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d70:	e000      	b.n	8005d74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a46      	ldr	r2, [pc, #280]	@ (8005ebc <TIM_Base_SetConfig+0x12c>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d013      	beq.n	8005dd0 <TIM_Base_SetConfig+0x40>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dae:	d00f      	beq.n	8005dd0 <TIM_Base_SetConfig+0x40>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a43      	ldr	r2, [pc, #268]	@ (8005ec0 <TIM_Base_SetConfig+0x130>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00b      	beq.n	8005dd0 <TIM_Base_SetConfig+0x40>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a42      	ldr	r2, [pc, #264]	@ (8005ec4 <TIM_Base_SetConfig+0x134>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d007      	beq.n	8005dd0 <TIM_Base_SetConfig+0x40>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a41      	ldr	r2, [pc, #260]	@ (8005ec8 <TIM_Base_SetConfig+0x138>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d003      	beq.n	8005dd0 <TIM_Base_SetConfig+0x40>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a40      	ldr	r2, [pc, #256]	@ (8005ecc <TIM_Base_SetConfig+0x13c>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d108      	bne.n	8005de2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a35      	ldr	r2, [pc, #212]	@ (8005ebc <TIM_Base_SetConfig+0x12c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d02b      	beq.n	8005e42 <TIM_Base_SetConfig+0xb2>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005df0:	d027      	beq.n	8005e42 <TIM_Base_SetConfig+0xb2>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a32      	ldr	r2, [pc, #200]	@ (8005ec0 <TIM_Base_SetConfig+0x130>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d023      	beq.n	8005e42 <TIM_Base_SetConfig+0xb2>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a31      	ldr	r2, [pc, #196]	@ (8005ec4 <TIM_Base_SetConfig+0x134>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d01f      	beq.n	8005e42 <TIM_Base_SetConfig+0xb2>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a30      	ldr	r2, [pc, #192]	@ (8005ec8 <TIM_Base_SetConfig+0x138>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d01b      	beq.n	8005e42 <TIM_Base_SetConfig+0xb2>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a2f      	ldr	r2, [pc, #188]	@ (8005ecc <TIM_Base_SetConfig+0x13c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d017      	beq.n	8005e42 <TIM_Base_SetConfig+0xb2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a2e      	ldr	r2, [pc, #184]	@ (8005ed0 <TIM_Base_SetConfig+0x140>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d013      	beq.n	8005e42 <TIM_Base_SetConfig+0xb2>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a2d      	ldr	r2, [pc, #180]	@ (8005ed4 <TIM_Base_SetConfig+0x144>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d00f      	beq.n	8005e42 <TIM_Base_SetConfig+0xb2>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a2c      	ldr	r2, [pc, #176]	@ (8005ed8 <TIM_Base_SetConfig+0x148>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d00b      	beq.n	8005e42 <TIM_Base_SetConfig+0xb2>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8005edc <TIM_Base_SetConfig+0x14c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d007      	beq.n	8005e42 <TIM_Base_SetConfig+0xb2>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	4a2a      	ldr	r2, [pc, #168]	@ (8005ee0 <TIM_Base_SetConfig+0x150>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d003      	beq.n	8005e42 <TIM_Base_SetConfig+0xb2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a29      	ldr	r2, [pc, #164]	@ (8005ee4 <TIM_Base_SetConfig+0x154>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d108      	bne.n	8005e54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a10      	ldr	r2, [pc, #64]	@ (8005ebc <TIM_Base_SetConfig+0x12c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d003      	beq.n	8005e88 <TIM_Base_SetConfig+0xf8>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a12      	ldr	r2, [pc, #72]	@ (8005ecc <TIM_Base_SetConfig+0x13c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d103      	bne.n	8005e90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	691a      	ldr	r2, [r3, #16]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d105      	bne.n	8005eae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f023 0201 	bic.w	r2, r3, #1
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	611a      	str	r2, [r3, #16]
  }
}
 8005eae:	bf00      	nop
 8005eb0:	3714      	adds	r7, #20
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	40010000 	.word	0x40010000
 8005ec0:	40000400 	.word	0x40000400
 8005ec4:	40000800 	.word	0x40000800
 8005ec8:	40000c00 	.word	0x40000c00
 8005ecc:	40010400 	.word	0x40010400
 8005ed0:	40014000 	.word	0x40014000
 8005ed4:	40014400 	.word	0x40014400
 8005ed8:	40014800 	.word	0x40014800
 8005edc:	40001800 	.word	0x40001800
 8005ee0:	40001c00 	.word	0x40001c00
 8005ee4:	40002000 	.word	0x40002000

08005ee8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b087      	sub	sp, #28
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	f023 0201 	bic.w	r2, r3, #1
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0303 	bic.w	r3, r3, #3
 8005f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	f023 0302 	bic.w	r3, r3, #2
 8005f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a20      	ldr	r2, [pc, #128]	@ (8005fc0 <TIM_OC1_SetConfig+0xd8>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d003      	beq.n	8005f4c <TIM_OC1_SetConfig+0x64>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc4 <TIM_OC1_SetConfig+0xdc>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d10c      	bne.n	8005f66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	f023 0308 	bic.w	r3, r3, #8
 8005f52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f023 0304 	bic.w	r3, r3, #4
 8005f64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a15      	ldr	r2, [pc, #84]	@ (8005fc0 <TIM_OC1_SetConfig+0xd8>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d003      	beq.n	8005f76 <TIM_OC1_SetConfig+0x8e>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a14      	ldr	r2, [pc, #80]	@ (8005fc4 <TIM_OC1_SetConfig+0xdc>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d111      	bne.n	8005f9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	621a      	str	r2, [r3, #32]
}
 8005fb4:	bf00      	nop
 8005fb6:	371c      	adds	r7, #28
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	40010000 	.word	0x40010000
 8005fc4:	40010400 	.word	0x40010400

08005fc8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a1b      	ldr	r3, [r3, #32]
 8005fdc:	f023 0210 	bic.w	r2, r3, #16
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	021b      	lsls	r3, r3, #8
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	4313      	orrs	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f023 0320 	bic.w	r3, r3, #32
 8006012:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a22      	ldr	r2, [pc, #136]	@ (80060ac <TIM_OC2_SetConfig+0xe4>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d003      	beq.n	8006030 <TIM_OC2_SetConfig+0x68>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a21      	ldr	r2, [pc, #132]	@ (80060b0 <TIM_OC2_SetConfig+0xe8>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d10d      	bne.n	800604c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	011b      	lsls	r3, r3, #4
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	4313      	orrs	r3, r2
 8006042:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800604a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a17      	ldr	r2, [pc, #92]	@ (80060ac <TIM_OC2_SetConfig+0xe4>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d003      	beq.n	800605c <TIM_OC2_SetConfig+0x94>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a16      	ldr	r2, [pc, #88]	@ (80060b0 <TIM_OC2_SetConfig+0xe8>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d113      	bne.n	8006084 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800606a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	695b      	ldr	r3, [r3, #20]
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	4313      	orrs	r3, r2
 8006076:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	4313      	orrs	r3, r2
 8006082:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685a      	ldr	r2, [r3, #4]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	697a      	ldr	r2, [r7, #20]
 800609c:	621a      	str	r2, [r3, #32]
}
 800609e:	bf00      	nop
 80060a0:	371c      	adds	r7, #28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40010000 	.word	0x40010000
 80060b0:	40010400 	.word	0x40010400

080060b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b087      	sub	sp, #28
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6a1b      	ldr	r3, [r3, #32]
 80060c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f023 0303 	bic.w	r3, r3, #3
 80060ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80060fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	021b      	lsls	r3, r3, #8
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a21      	ldr	r2, [pc, #132]	@ (8006194 <TIM_OC3_SetConfig+0xe0>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d003      	beq.n	800611a <TIM_OC3_SetConfig+0x66>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a20      	ldr	r2, [pc, #128]	@ (8006198 <TIM_OC3_SetConfig+0xe4>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d10d      	bne.n	8006136 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006120:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	021b      	lsls	r3, r3, #8
 8006128:	697a      	ldr	r2, [r7, #20]
 800612a:	4313      	orrs	r3, r2
 800612c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a16      	ldr	r2, [pc, #88]	@ (8006194 <TIM_OC3_SetConfig+0xe0>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d003      	beq.n	8006146 <TIM_OC3_SetConfig+0x92>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a15      	ldr	r2, [pc, #84]	@ (8006198 <TIM_OC3_SetConfig+0xe4>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d113      	bne.n	800616e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800614c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	4313      	orrs	r3, r2
 8006160:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	699b      	ldr	r3, [r3, #24]
 8006166:	011b      	lsls	r3, r3, #4
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	4313      	orrs	r3, r2
 800616c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	621a      	str	r2, [r3, #32]
}
 8006188:	bf00      	nop
 800618a:	371c      	adds	r7, #28
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	40010000 	.word	0x40010000
 8006198:	40010400 	.word	0x40010400

0800619c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	021b      	lsls	r3, r3, #8
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	4313      	orrs	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	031b      	lsls	r3, r3, #12
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a12      	ldr	r2, [pc, #72]	@ (8006240 <TIM_OC4_SetConfig+0xa4>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d003      	beq.n	8006204 <TIM_OC4_SetConfig+0x68>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a11      	ldr	r2, [pc, #68]	@ (8006244 <TIM_OC4_SetConfig+0xa8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d109      	bne.n	8006218 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800620a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	019b      	lsls	r3, r3, #6
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	4313      	orrs	r3, r2
 8006216:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	621a      	str	r2, [r3, #32]
}
 8006232:	bf00      	nop
 8006234:	371c      	adds	r7, #28
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	40010000 	.word	0x40010000
 8006244:	40010400 	.word	0x40010400

08006248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006248:	b480      	push	{r7}
 800624a:	b087      	sub	sp, #28
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6a1b      	ldr	r3, [r3, #32]
 800625e:	f023 0201 	bic.w	r2, r3, #1
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	699b      	ldr	r3, [r3, #24]
 800626a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	011b      	lsls	r3, r3, #4
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	4313      	orrs	r3, r2
 800627c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f023 030a 	bic.w	r3, r3, #10
 8006284:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	4313      	orrs	r3, r2
 800628c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	621a      	str	r2, [r3, #32]
}
 800629a:	bf00      	nop
 800629c:	371c      	adds	r7, #28
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b087      	sub	sp, #28
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	60b9      	str	r1, [r7, #8]
 80062b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	f023 0210 	bic.w	r2, r3, #16
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	031b      	lsls	r3, r3, #12
 80062d6:	693a      	ldr	r2, [r7, #16]
 80062d8:	4313      	orrs	r3, r2
 80062da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80062e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	697a      	ldr	r2, [r7, #20]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	621a      	str	r2, [r3, #32]
}
 80062fa:	bf00      	nop
 80062fc:	371c      	adds	r7, #28
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006306:	b480      	push	{r7}
 8006308:	b085      	sub	sp, #20
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800631c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4313      	orrs	r3, r2
 8006324:	f043 0307 	orr.w	r3, r3, #7
 8006328:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	609a      	str	r2, [r3, #8]
}
 8006330:	bf00      	nop
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800633c:	b480      	push	{r7}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
 8006348:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006356:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	021a      	lsls	r2, r3, #8
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	431a      	orrs	r2, r3
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4313      	orrs	r3, r2
 8006364:	697a      	ldr	r2, [r7, #20]
 8006366:	4313      	orrs	r3, r2
 8006368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	609a      	str	r2, [r3, #8]
}
 8006370:	bf00      	nop
 8006372:	371c      	adds	r7, #28
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800637c:	b480      	push	{r7}
 800637e:	b085      	sub	sp, #20
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800638c:	2b01      	cmp	r3, #1
 800638e:	d101      	bne.n	8006394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006390:	2302      	movs	r3, #2
 8006392:	e05a      	b.n	800644a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2202      	movs	r2, #2
 80063a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a21      	ldr	r2, [pc, #132]	@ (8006458 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d022      	beq.n	800641e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063e0:	d01d      	beq.n	800641e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a1d      	ldr	r2, [pc, #116]	@ (800645c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d018      	beq.n	800641e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006460 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d013      	beq.n	800641e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a1a      	ldr	r2, [pc, #104]	@ (8006464 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d00e      	beq.n	800641e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a18      	ldr	r2, [pc, #96]	@ (8006468 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d009      	beq.n	800641e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a17      	ldr	r2, [pc, #92]	@ (800646c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d004      	beq.n	800641e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a15      	ldr	r2, [pc, #84]	@ (8006470 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d10c      	bne.n	8006438 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006424:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	68ba      	ldr	r2, [r7, #8]
 800642c:	4313      	orrs	r3, r2
 800642e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	40010000 	.word	0x40010000
 800645c:	40000400 	.word	0x40000400
 8006460:	40000800 	.word	0x40000800
 8006464:	40000c00 	.word	0x40000c00
 8006468:	40010400 	.word	0x40010400
 800646c:	40014000 	.word	0x40014000
 8006470:	40001800 	.word	0x40001800

08006474 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006474:	b084      	sub	sp, #16
 8006476:	b580      	push	{r7, lr}
 8006478:	b084      	sub	sp, #16
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
 800647e:	f107 001c 	add.w	r0, r7, #28
 8006482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006486:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800648a:	2b01      	cmp	r3, #1
 800648c:	d123      	bne.n	80064d6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006492:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80064a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d105      	bne.n	80064ca <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f9dc 	bl	8006888 <USB_CoreReset>
 80064d0:	4603      	mov	r3, r0
 80064d2:	73fb      	strb	r3, [r7, #15]
 80064d4:	e01b      	b.n	800650e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 f9d0 	bl	8006888 <USB_CoreReset>
 80064e8:	4603      	mov	r3, r0
 80064ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80064ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d106      	bne.n	8006502 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8006500:	e005      	b.n	800650e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006506:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800650e:	7fbb      	ldrb	r3, [r7, #30]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d10b      	bne.n	800652c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	f043 0206 	orr.w	r2, r3, #6
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f043 0220 	orr.w	r2, r3, #32
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800652c:	7bfb      	ldrb	r3, [r7, #15]
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006538:	b004      	add	sp, #16
 800653a:	4770      	bx	lr

0800653c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f043 0201 	orr.w	r2, r3, #1
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	370c      	adds	r7, #12
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr

0800655e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800655e:	b480      	push	{r7}
 8006560:	b083      	sub	sp, #12
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f023 0201 	bic.w	r2, r3, #1
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	460b      	mov	r3, r1
 800658a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800658c:	2300      	movs	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d115      	bne.n	80065ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80065ae:	200a      	movs	r0, #10
 80065b0:	f7fb f91e 	bl	80017f0 <HAL_Delay>
      ms += 10U;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	330a      	adds	r3, #10
 80065b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f956 	bl	800686c <USB_GetMode>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d01e      	beq.n	8006604 <USB_SetCurrentMode+0x84>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80065ca:	d9f0      	bls.n	80065ae <USB_SetCurrentMode+0x2e>
 80065cc:	e01a      	b.n	8006604 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80065ce:	78fb      	ldrb	r3, [r7, #3]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d115      	bne.n	8006600 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80065e0:	200a      	movs	r0, #10
 80065e2:	f7fb f905 	bl	80017f0 <HAL_Delay>
      ms += 10U;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	330a      	adds	r3, #10
 80065ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 f93d 	bl	800686c <USB_GetMode>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d005      	beq.n	8006604 <USB_SetCurrentMode+0x84>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80065fc:	d9f0      	bls.n	80065e0 <USB_SetCurrentMode+0x60>
 80065fe:	e001      	b.n	8006604 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e005      	b.n	8006610 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2bc8      	cmp	r3, #200	@ 0xc8
 8006608:	d101      	bne.n	800660e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e000      	b.n	8006610 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3301      	adds	r3, #1
 800662a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006632:	d901      	bls.n	8006638 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e01b      	b.n	8006670 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	daf2      	bge.n	8006626 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006640:	2300      	movs	r3, #0
 8006642:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	019b      	lsls	r3, r3, #6
 8006648:	f043 0220 	orr.w	r2, r3, #32
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	3301      	adds	r3, #1
 8006654:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800665c:	d901      	bls.n	8006662 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e006      	b.n	8006670 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b20      	cmp	r3, #32
 800666c:	d0f0      	beq.n	8006650 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	3301      	adds	r3, #1
 800668c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006694:	d901      	bls.n	800669a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006696:	2303      	movs	r3, #3
 8006698:	e018      	b.n	80066cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	daf2      	bge.n	8006688 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2210      	movs	r2, #16
 80066aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	3301      	adds	r3, #1
 80066b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066b8:	d901      	bls.n	80066be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e006      	b.n	80066cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	f003 0310 	and.w	r3, r3, #16
 80066c6:	2b10      	cmp	r3, #16
 80066c8:	d0f0      	beq.n	80066ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80066d8:	b480      	push	{r7}
 80066da:	b089      	sub	sp, #36	@ 0x24
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	4611      	mov	r1, r2
 80066e4:	461a      	mov	r2, r3
 80066e6:	460b      	mov	r3, r1
 80066e8:	71fb      	strb	r3, [r7, #7]
 80066ea:	4613      	mov	r3, r2
 80066ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80066f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d123      	bne.n	8006746 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80066fe:	88bb      	ldrh	r3, [r7, #4]
 8006700:	3303      	adds	r3, #3
 8006702:	089b      	lsrs	r3, r3, #2
 8006704:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006706:	2300      	movs	r3, #0
 8006708:	61bb      	str	r3, [r7, #24]
 800670a:	e018      	b.n	800673e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800670c:	79fb      	ldrb	r3, [r7, #7]
 800670e:	031a      	lsls	r2, r3, #12
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	4413      	add	r3, r2
 8006714:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006718:	461a      	mov	r2, r3
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	3301      	adds	r3, #1
 8006724:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	3301      	adds	r3, #1
 800672a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	3301      	adds	r3, #1
 8006730:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	3301      	adds	r3, #1
 8006736:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	3301      	adds	r3, #1
 800673c:	61bb      	str	r3, [r7, #24]
 800673e:	69ba      	ldr	r2, [r7, #24]
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	429a      	cmp	r2, r3
 8006744:	d3e2      	bcc.n	800670c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3724      	adds	r7, #36	@ 0x24
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006754:	b480      	push	{r7}
 8006756:	b08b      	sub	sp, #44	@ 0x2c
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	4613      	mov	r3, r2
 8006760:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800676a:	88fb      	ldrh	r3, [r7, #6]
 800676c:	089b      	lsrs	r3, r3, #2
 800676e:	b29b      	uxth	r3, r3
 8006770:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006772:	88fb      	ldrh	r3, [r7, #6]
 8006774:	f003 0303 	and.w	r3, r3, #3
 8006778:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800677a:	2300      	movs	r3, #0
 800677c:	623b      	str	r3, [r7, #32]
 800677e:	e014      	b.n	80067aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006780:	69bb      	ldr	r3, [r7, #24]
 8006782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678a:	601a      	str	r2, [r3, #0]
    pDest++;
 800678c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678e:	3301      	adds	r3, #1
 8006790:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006794:	3301      	adds	r3, #1
 8006796:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679a:	3301      	adds	r3, #1
 800679c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800679e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a0:	3301      	adds	r3, #1
 80067a2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	3301      	adds	r3, #1
 80067a8:	623b      	str	r3, [r7, #32]
 80067aa:	6a3a      	ldr	r2, [r7, #32]
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d3e6      	bcc.n	8006780 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80067b2:	8bfb      	ldrh	r3, [r7, #30]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d01e      	beq.n	80067f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80067b8:	2300      	movs	r3, #0
 80067ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80067c2:	461a      	mov	r2, r3
 80067c4:	f107 0310 	add.w	r3, r7, #16
 80067c8:	6812      	ldr	r2, [r2, #0]
 80067ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	fa22 f303 	lsr.w	r3, r2, r3
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	701a      	strb	r2, [r3, #0]
      i++;
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	3301      	adds	r3, #1
 80067e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80067e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e6:	3301      	adds	r3, #1
 80067e8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80067ea:	8bfb      	ldrh	r3, [r7, #30]
 80067ec:	3b01      	subs	r3, #1
 80067ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80067f0:	8bfb      	ldrh	r3, [r7, #30]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1ea      	bne.n	80067cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	372c      	adds	r7, #44	@ 0x2c
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	68fa      	ldr	r2, [r7, #12]
 8006818:	4013      	ands	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800681c:	68fb      	ldr	r3, [r7, #12]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3714      	adds	r7, #20
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800682a:	b480      	push	{r7}
 800682c:	b085      	sub	sp, #20
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
 8006832:	460b      	mov	r3, r1
 8006834:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800683a:	78fb      	ldrb	r3, [r7, #3]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	4413      	add	r3, r2
 8006842:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800684a:	78fb      	ldrb	r3, [r7, #3]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4413      	add	r3, r2
 8006852:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	4013      	ands	r3, r2
 800685c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800685e:	68bb      	ldr	r3, [r7, #8]
}
 8006860:	4618      	mov	r0, r3
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	695b      	ldr	r3, [r3, #20]
 8006878:	f003 0301 	and.w	r3, r3, #1
}
 800687c:	4618      	mov	r0, r3
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3301      	adds	r3, #1
 8006898:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068a0:	d901      	bls.n	80068a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80068a2:	2303      	movs	r3, #3
 80068a4:	e01b      	b.n	80068de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	691b      	ldr	r3, [r3, #16]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	daf2      	bge.n	8006894 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80068ae:	2300      	movs	r3, #0
 80068b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	f043 0201 	orr.w	r2, r3, #1
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3301      	adds	r3, #1
 80068c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068ca:	d901      	bls.n	80068d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e006      	b.n	80068de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d0f0      	beq.n	80068be <USB_CoreReset+0x36>

  return HAL_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
	...

080068ec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068ec:	b084      	sub	sp, #16
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b086      	sub	sp, #24
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80068fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800690c:	461a      	mov	r2, r3
 800690e:	2300      	movs	r3, #0
 8006910:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006916:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006922:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800692e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800693e:	2b00      	cmp	r3, #0
 8006940:	d119      	bne.n	8006976 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006942:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006946:	2b01      	cmp	r3, #1
 8006948:	d10a      	bne.n	8006960 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006958:	f043 0304 	orr.w	r3, r3, #4
 800695c:	6013      	str	r3, [r2, #0]
 800695e:	e014      	b.n	800698a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800696e:	f023 0304 	bic.w	r3, r3, #4
 8006972:	6013      	str	r3, [r2, #0]
 8006974:	e009      	b.n	800698a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006984:	f023 0304 	bic.w	r3, r3, #4
 8006988:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800698a:	2110      	movs	r1, #16
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff fe43 	bl	8006618 <USB_FlushTxFifo>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff fe6d 	bl	800667c <USB_FlushRxFifo>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80069ac:	2300      	movs	r3, #0
 80069ae:	613b      	str	r3, [r7, #16]
 80069b0:	e015      	b.n	80069de <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069be:	461a      	mov	r2, r3
 80069c0:	f04f 33ff 	mov.w	r3, #4294967295
 80069c4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069d2:	461a      	mov	r2, r3
 80069d4:	2300      	movs	r3, #0
 80069d6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	3301      	adds	r3, #1
 80069dc:	613b      	str	r3, [r7, #16]
 80069de:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80069e2:	461a      	mov	r2, r3
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d3e3      	bcc.n	80069b2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f04f 32ff 	mov.w	r2, #4294967295
 80069f6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a18      	ldr	r2, [pc, #96]	@ (8006a5c <USB_HostInit+0x170>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d10b      	bne.n	8006a18 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a06:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	4a15      	ldr	r2, [pc, #84]	@ (8006a60 <USB_HostInit+0x174>)
 8006a0c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a14      	ldr	r2, [pc, #80]	@ (8006a64 <USB_HostInit+0x178>)
 8006a12:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8006a16:	e009      	b.n	8006a2c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2280      	movs	r2, #128	@ 0x80
 8006a1c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a11      	ldr	r2, [pc, #68]	@ (8006a68 <USB_HostInit+0x17c>)
 8006a22:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a11      	ldr	r2, [pc, #68]	@ (8006a6c <USB_HostInit+0x180>)
 8006a28:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006a2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d105      	bne.n	8006a40 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	f043 0210 	orr.w	r2, r3, #16
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	699a      	ldr	r2, [r3, #24]
 8006a44:	4b0a      	ldr	r3, [pc, #40]	@ (8006a70 <USB_HostInit+0x184>)
 8006a46:	4313      	orrs	r3, r2
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a58:	b004      	add	sp, #16
 8006a5a:	4770      	bx	lr
 8006a5c:	40040000 	.word	0x40040000
 8006a60:	01000200 	.word	0x01000200
 8006a64:	00e00300 	.word	0x00e00300
 8006a68:	00600080 	.word	0x00600080
 8006a6c:	004000e0 	.word	0x004000e0
 8006a70:	a3200008 	.word	0xa3200008

08006a74 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006a92:	f023 0303 	bic.w	r3, r3, #3
 8006a96:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	78fb      	ldrb	r3, [r7, #3]
 8006aa2:	f003 0303 	and.w	r3, r3, #3
 8006aa6:	68f9      	ldr	r1, [r7, #12]
 8006aa8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006aac:	4313      	orrs	r3, r2
 8006aae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006ab0:	78fb      	ldrb	r3, [r7, #3]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d107      	bne.n	8006ac6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006abc:	461a      	mov	r2, r3
 8006abe:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006ac2:	6053      	str	r3, [r2, #4]
 8006ac4:	e00c      	b.n	8006ae0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006ac6:	78fb      	ldrb	r3, [r7, #3]
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d107      	bne.n	8006adc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006ad8:	6053      	str	r3, [r2, #4]
 8006ada:	e001      	b.n	8006ae0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e000      	b.n	8006ae2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3714      	adds	r7, #20
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aec:	4770      	bx	lr

08006aee <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006aee:	b480      	push	{r7}
 8006af0:	b085      	sub	sp, #20
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
 8006af6:	460b      	mov	r3, r1
 8006af8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006b12:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d109      	bne.n	8006b32 <USB_DriveVbus+0x44>
 8006b1e:	78fb      	ldrb	r3, [r7, #3]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d106      	bne.n	8006b32 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006b2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006b30:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b3c:	d109      	bne.n	8006b52 <USB_DriveVbus+0x64>
 8006b3e:	78fb      	ldrb	r3, [r7, #3]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d106      	bne.n	8006b52 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006b4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b50:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3714      	adds	r7, #20
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	0c5b      	lsrs	r3, r3, #17
 8006b7e:	f003 0303 	and.w	r3, r3, #3
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b085      	sub	sp, #20
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	b29b      	uxth	r3, r3
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b088      	sub	sp, #32
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	4608      	mov	r0, r1
 8006bba:	4611      	mov	r1, r2
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	70fb      	strb	r3, [r7, #3]
 8006bc2:	460b      	mov	r3, r1
 8006bc4:	70bb      	strb	r3, [r7, #2]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006bd2:	78fb      	ldrb	r3, [r7, #3]
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bde:	461a      	mov	r2, r3
 8006be0:	f04f 33ff 	mov.w	r3, #4294967295
 8006be4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006be6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	d87c      	bhi.n	8006ce8 <USB_HC_Init+0x138>
 8006bee:	a201      	add	r2, pc, #4	@ (adr r2, 8006bf4 <USB_HC_Init+0x44>)
 8006bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf4:	08006c05 	.word	0x08006c05
 8006bf8:	08006cab 	.word	0x08006cab
 8006bfc:	08006c05 	.word	0x08006c05
 8006c00:	08006c6d 	.word	0x08006c6d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c04:	78fb      	ldrb	r3, [r7, #3]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c10:	461a      	mov	r2, r3
 8006c12:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006c16:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006c18:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	da10      	bge.n	8006c42 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c20:	78fb      	ldrb	r3, [r7, #3]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	78fa      	ldrb	r2, [r7, #3]
 8006c30:	0151      	lsls	r1, r2, #5
 8006c32:	693a      	ldr	r2, [r7, #16]
 8006c34:	440a      	add	r2, r1
 8006c36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c3e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006c40:	e055      	b.n	8006cee <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a6f      	ldr	r2, [pc, #444]	@ (8006e04 <USB_HC_Init+0x254>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d151      	bne.n	8006cee <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006c4a:	78fb      	ldrb	r3, [r7, #3]
 8006c4c:	015a      	lsls	r2, r3, #5
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	4413      	add	r3, r2
 8006c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	78fa      	ldrb	r2, [r7, #3]
 8006c5a:	0151      	lsls	r1, r2, #5
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	440a      	add	r2, r1
 8006c60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c64:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006c68:	60d3      	str	r3, [r2, #12]
      break;
 8006c6a:	e040      	b.n	8006cee <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c78:	461a      	mov	r2, r3
 8006c7a:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006c7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006c80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	da34      	bge.n	8006cf2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006c88:	78fb      	ldrb	r3, [r7, #3]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	78fa      	ldrb	r2, [r7, #3]
 8006c98:	0151      	lsls	r1, r2, #5
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ca2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ca6:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006ca8:	e023      	b.n	8006cf2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006caa:	78fb      	ldrb	r3, [r7, #3]
 8006cac:	015a      	lsls	r2, r3, #5
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	f240 2325 	movw	r3, #549	@ 0x225
 8006cbc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006cbe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	da17      	bge.n	8006cf6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006cc6:	78fb      	ldrb	r3, [r7, #3]
 8006cc8:	015a      	lsls	r2, r3, #5
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	4413      	add	r3, r2
 8006cce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	78fa      	ldrb	r2, [r7, #3]
 8006cd6:	0151      	lsls	r1, r2, #5
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	440a      	add	r2, r1
 8006cdc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ce0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006ce4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006ce6:	e006      	b.n	8006cf6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	77fb      	strb	r3, [r7, #31]
      break;
 8006cec:	e004      	b.n	8006cf8 <USB_HC_Init+0x148>
      break;
 8006cee:	bf00      	nop
 8006cf0:	e002      	b.n	8006cf8 <USB_HC_Init+0x148>
      break;
 8006cf2:	bf00      	nop
 8006cf4:	e000      	b.n	8006cf8 <USB_HC_Init+0x148>
      break;
 8006cf6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006cf8:	78fb      	ldrb	r3, [r7, #3]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d04:	461a      	mov	r2, r3
 8006d06:	2300      	movs	r3, #0
 8006d08:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006d0a:	78fb      	ldrb	r3, [r7, #3]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	78fa      	ldrb	r2, [r7, #3]
 8006d1a:	0151      	lsls	r1, r2, #5
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	440a      	add	r2, r1
 8006d20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d24:	f043 0302 	orr.w	r3, r3, #2
 8006d28:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d30:	699a      	ldr	r2, [r3, #24]
 8006d32:	78fb      	ldrb	r3, [r7, #3]
 8006d34:	f003 030f 	and.w	r3, r3, #15
 8006d38:	2101      	movs	r1, #1
 8006d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d3e:	6939      	ldr	r1, [r7, #16]
 8006d40:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006d44:	4313      	orrs	r3, r2
 8006d46:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006d54:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	da03      	bge.n	8006d64 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006d5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d60:	61bb      	str	r3, [r7, #24]
 8006d62:	e001      	b.n	8006d68 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7ff fef9 	bl	8006b60 <USB_GetHostSpeed>
 8006d6e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006d70:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d106      	bne.n	8006d86 <USB_HC_Init+0x1d6>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d003      	beq.n	8006d86 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006d7e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006d82:	617b      	str	r3, [r7, #20]
 8006d84:	e001      	b.n	8006d8a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d8a:	787b      	ldrb	r3, [r7, #1]
 8006d8c:	059b      	lsls	r3, r3, #22
 8006d8e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006d92:	78bb      	ldrb	r3, [r7, #2]
 8006d94:	02db      	lsls	r3, r3, #11
 8006d96:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006d9a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006d9c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006da0:	049b      	lsls	r3, r3, #18
 8006da2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006da6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006da8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006daa:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006dae:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	431a      	orrs	r2, r3
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006db8:	78fa      	ldrb	r2, [r7, #3]
 8006dba:	0151      	lsls	r1, r2, #5
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	440a      	add	r2, r1
 8006dc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006dc4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006dc8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006dca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006dce:	2b03      	cmp	r3, #3
 8006dd0:	d003      	beq.n	8006dda <USB_HC_Init+0x22a>
 8006dd2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006dd6:	2b01      	cmp	r3, #1
 8006dd8:	d10f      	bne.n	8006dfa <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006dda:	78fb      	ldrb	r3, [r7, #3]
 8006ddc:	015a      	lsls	r2, r3, #5
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	4413      	add	r3, r2
 8006de2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	78fa      	ldrb	r2, [r7, #3]
 8006dea:	0151      	lsls	r1, r2, #5
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	440a      	add	r2, r1
 8006df0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006df4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006df8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006dfa:	7ffb      	ldrb	r3, [r7, #31]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3720      	adds	r7, #32
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	40040000 	.word	0x40040000

08006e08 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b08c      	sub	sp, #48	@ 0x30
 8006e0c:	af02      	add	r7, sp, #8
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	4613      	mov	r3, r2
 8006e14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	785b      	ldrb	r3, [r3, #1]
 8006e1e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006e20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006e24:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	4a5d      	ldr	r2, [pc, #372]	@ (8006fa0 <USB_HC_StartXfer+0x198>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d12f      	bne.n	8006e8e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006e2e:	79fb      	ldrb	r3, [r7, #7]
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d11c      	bne.n	8006e6e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	7c9b      	ldrb	r3, [r3, #18]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <USB_HC_StartXfer+0x3c>
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	7c9b      	ldrb	r3, [r3, #18]
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d124      	bne.n	8006e8e <USB_HC_StartXfer+0x86>
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	799b      	ldrb	r3, [r3, #6]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d120      	bne.n	8006e8e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	6a3b      	ldr	r3, [r7, #32]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	69fa      	ldr	r2, [r7, #28]
 8006e5c:	0151      	lsls	r1, r2, #5
 8006e5e:	6a3a      	ldr	r2, [r7, #32]
 8006e60:	440a      	add	r2, r1
 8006e62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e6a:	60d3      	str	r3, [r2, #12]
 8006e6c:	e00f      	b.n	8006e8e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	791b      	ldrb	r3, [r3, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10b      	bne.n	8006e8e <USB_HC_StartXfer+0x86>
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	795b      	ldrb	r3, [r3, #5]
 8006e7a:	2b01      	cmp	r3, #1
 8006e7c:	d107      	bne.n	8006e8e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	785b      	ldrb	r3, [r3, #1]
 8006e82:	4619      	mov	r1, r3
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f000 fb6b 	bl	8007560 <USB_DoPing>
        return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	e232      	b.n	80072f4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	799b      	ldrb	r3, [r3, #6]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d158      	bne.n	8006f48 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006e96:	2301      	movs	r3, #1
 8006e98:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	78db      	ldrb	r3, [r3, #3]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d007      	beq.n	8006eb2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ea2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	8a92      	ldrh	r2, [r2, #20]
 8006ea8:	fb03 f202 	mul.w	r2, r3, r2
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	61da      	str	r2, [r3, #28]
 8006eb0:	e07c      	b.n	8006fac <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	7c9b      	ldrb	r3, [r3, #18]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d130      	bne.n	8006f1c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	2bbc      	cmp	r3, #188	@ 0xbc
 8006ec0:	d918      	bls.n	8006ef4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	8a9b      	ldrh	r3, [r3, #20]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	69da      	ldr	r2, [r3, #28]
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	68db      	ldr	r3, [r3, #12]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d003      	beq.n	8006ee4 <USB_HC_StartXfer+0xdc>
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d103      	bne.n	8006eec <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	60da      	str	r2, [r3, #12]
 8006eea:	e05f      	b.n	8006fac <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	60da      	str	r2, [r3, #12]
 8006ef2:	e05b      	b.n	8006fac <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	6a1a      	ldr	r2, [r3, #32]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d007      	beq.n	8006f14 <USB_HC_StartXfer+0x10c>
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d003      	beq.n	8006f14 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2204      	movs	r2, #4
 8006f10:	60da      	str	r2, [r3, #12]
 8006f12:	e04b      	b.n	8006fac <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	2203      	movs	r2, #3
 8006f18:	60da      	str	r2, [r3, #12]
 8006f1a:	e047      	b.n	8006fac <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006f1c:	79fb      	ldrb	r3, [r7, #7]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d10d      	bne.n	8006f3e <USB_HC_StartXfer+0x136>
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	8a92      	ldrh	r2, [r2, #20]
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d907      	bls.n	8006f3e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006f2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	8a92      	ldrh	r2, [r2, #20]
 8006f34:	fb03 f202 	mul.w	r2, r3, r2
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	61da      	str	r2, [r3, #28]
 8006f3c:	e036      	b.n	8006fac <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	6a1a      	ldr	r2, [r3, #32]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	61da      	str	r2, [r3, #28]
 8006f46:	e031      	b.n	8006fac <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	6a1b      	ldr	r3, [r3, #32]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d018      	beq.n	8006f82 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	6a1b      	ldr	r3, [r3, #32]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	8a92      	ldrh	r2, [r2, #20]
 8006f58:	4413      	add	r3, r2
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	8a92      	ldrh	r2, [r2, #20]
 8006f60:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f64:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006f66:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006f68:	8b7b      	ldrh	r3, [r7, #26]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d90b      	bls.n	8006f86 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006f6e:	8b7b      	ldrh	r3, [r7, #26]
 8006f70:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006f72:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	8a92      	ldrh	r2, [r2, #20]
 8006f78:	fb03 f202 	mul.w	r2, r3, r2
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	61da      	str	r2, [r3, #28]
 8006f80:	e001      	b.n	8006f86 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006f82:	2301      	movs	r3, #1
 8006f84:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	78db      	ldrb	r3, [r3, #3]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00a      	beq.n	8006fa4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006f8e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	8a92      	ldrh	r2, [r2, #20]
 8006f94:	fb03 f202 	mul.w	r2, r3, r2
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	61da      	str	r2, [r3, #28]
 8006f9c:	e006      	b.n	8006fac <USB_HC_StartXfer+0x1a4>
 8006f9e:	bf00      	nop
 8006fa0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	6a1a      	ldr	r2, [r3, #32]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006fb4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006fb6:	04d9      	lsls	r1, r3, #19
 8006fb8:	4ba3      	ldr	r3, [pc, #652]	@ (8007248 <USB_HC_StartXfer+0x440>)
 8006fba:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006fbc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	7d9b      	ldrb	r3, [r3, #22]
 8006fc2:	075b      	lsls	r3, r3, #29
 8006fc4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006fc8:	69f9      	ldr	r1, [r7, #28]
 8006fca:	0148      	lsls	r0, r1, #5
 8006fcc:	6a39      	ldr	r1, [r7, #32]
 8006fce:	4401      	add	r1, r0
 8006fd0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006fd4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006fd6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006fd8:	79fb      	ldrb	r3, [r7, #7]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d009      	beq.n	8006ff2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	6999      	ldr	r1, [r3, #24]
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	015a      	lsls	r2, r3, #5
 8006fe6:	6a3b      	ldr	r3, [r7, #32]
 8006fe8:	4413      	add	r3, r2
 8006fea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fee:	460a      	mov	r2, r1
 8006ff0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	bf0c      	ite	eq
 8007002:	2301      	moveq	r3, #1
 8007004:	2300      	movne	r3, #0
 8007006:	b2db      	uxtb	r3, r3
 8007008:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	015a      	lsls	r2, r3, #5
 800700e:	6a3b      	ldr	r3, [r7, #32]
 8007010:	4413      	add	r3, r2
 8007012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	69fa      	ldr	r2, [r7, #28]
 800701a:	0151      	lsls	r1, r2, #5
 800701c:	6a3a      	ldr	r2, [r7, #32]
 800701e:	440a      	add	r2, r1
 8007020:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007024:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007028:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800702a:	69fb      	ldr	r3, [r7, #28]
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	6a3b      	ldr	r3, [r7, #32]
 8007030:	4413      	add	r3, r2
 8007032:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	7e7b      	ldrb	r3, [r7, #25]
 800703a:	075b      	lsls	r3, r3, #29
 800703c:	69f9      	ldr	r1, [r7, #28]
 800703e:	0148      	lsls	r0, r1, #5
 8007040:	6a39      	ldr	r1, [r7, #32]
 8007042:	4401      	add	r1, r0
 8007044:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007048:	4313      	orrs	r3, r2
 800704a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	799b      	ldrb	r3, [r3, #6]
 8007050:	2b01      	cmp	r3, #1
 8007052:	f040 80c3 	bne.w	80071dc <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	7c5b      	ldrb	r3, [r3, #17]
 800705a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007060:	4313      	orrs	r3, r2
 8007062:	69fa      	ldr	r2, [r7, #28]
 8007064:	0151      	lsls	r1, r2, #5
 8007066:	6a3a      	ldr	r2, [r7, #32]
 8007068:	440a      	add	r2, r1
 800706a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800706e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007072:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	6a3b      	ldr	r3, [r7, #32]
 800707a:	4413      	add	r3, r2
 800707c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	69fa      	ldr	r2, [r7, #28]
 8007084:	0151      	lsls	r1, r2, #5
 8007086:	6a3a      	ldr	r2, [r7, #32]
 8007088:	440a      	add	r2, r1
 800708a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800708e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007092:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	79db      	ldrb	r3, [r3, #7]
 8007098:	2b01      	cmp	r3, #1
 800709a:	d123      	bne.n	80070e4 <USB_HC_StartXfer+0x2dc>
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	78db      	ldrb	r3, [r3, #3]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d11f      	bne.n	80070e4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	69fa      	ldr	r2, [r7, #28]
 80070b4:	0151      	lsls	r1, r2, #5
 80070b6:	6a3a      	ldr	r2, [r7, #32]
 80070b8:	440a      	add	r2, r1
 80070ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80070c2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	015a      	lsls	r2, r3, #5
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	4413      	add	r3, r2
 80070cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070d0:	68db      	ldr	r3, [r3, #12]
 80070d2:	69fa      	ldr	r2, [r7, #28]
 80070d4:	0151      	lsls	r1, r2, #5
 80070d6:	6a3a      	ldr	r2, [r7, #32]
 80070d8:	440a      	add	r2, r1
 80070da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070e2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	7c9b      	ldrb	r3, [r3, #18]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d003      	beq.n	80070f4 <USB_HC_StartXfer+0x2ec>
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	7c9b      	ldrb	r3, [r3, #18]
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	d117      	bne.n	8007124 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d113      	bne.n	8007124 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	78db      	ldrb	r3, [r3, #3]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d10f      	bne.n	8007124 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	015a      	lsls	r2, r3, #5
 8007108:	6a3b      	ldr	r3, [r7, #32]
 800710a:	4413      	add	r3, r2
 800710c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	69fa      	ldr	r2, [r7, #28]
 8007114:	0151      	lsls	r1, r2, #5
 8007116:	6a3a      	ldr	r2, [r7, #32]
 8007118:	440a      	add	r2, r1
 800711a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800711e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007122:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	7c9b      	ldrb	r3, [r3, #18]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d162      	bne.n	80071f2 <USB_HC_StartXfer+0x3ea>
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	78db      	ldrb	r3, [r3, #3]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d15e      	bne.n	80071f2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	3b01      	subs	r3, #1
 800713a:	2b03      	cmp	r3, #3
 800713c:	d858      	bhi.n	80071f0 <USB_HC_StartXfer+0x3e8>
 800713e:	a201      	add	r2, pc, #4	@ (adr r2, 8007144 <USB_HC_StartXfer+0x33c>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	08007155 	.word	0x08007155
 8007148:	08007177 	.word	0x08007177
 800714c:	08007199 	.word	0x08007199
 8007150:	080071bb 	.word	0x080071bb
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	4413      	add	r3, r2
 800715c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	69fa      	ldr	r2, [r7, #28]
 8007164:	0151      	lsls	r1, r2, #5
 8007166:	6a3a      	ldr	r2, [r7, #32]
 8007168:	440a      	add	r2, r1
 800716a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800716e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007172:	6053      	str	r3, [r2, #4]
          break;
 8007174:	e03d      	b.n	80071f2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	4413      	add	r3, r2
 800717e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	69fa      	ldr	r2, [r7, #28]
 8007186:	0151      	lsls	r1, r2, #5
 8007188:	6a3a      	ldr	r2, [r7, #32]
 800718a:	440a      	add	r2, r1
 800718c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007190:	f043 030e 	orr.w	r3, r3, #14
 8007194:	6053      	str	r3, [r2, #4]
          break;
 8007196:	e02c      	b.n	80071f2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	69fa      	ldr	r2, [r7, #28]
 80071a8:	0151      	lsls	r1, r2, #5
 80071aa:	6a3a      	ldr	r2, [r7, #32]
 80071ac:	440a      	add	r2, r1
 80071ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80071b6:	6053      	str	r3, [r2, #4]
          break;
 80071b8:	e01b      	b.n	80071f2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	015a      	lsls	r2, r3, #5
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	4413      	add	r3, r2
 80071c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	69fa      	ldr	r2, [r7, #28]
 80071ca:	0151      	lsls	r1, r2, #5
 80071cc:	6a3a      	ldr	r2, [r7, #32]
 80071ce:	440a      	add	r2, r1
 80071d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071d8:	6053      	str	r3, [r2, #4]
          break;
 80071da:	e00a      	b.n	80071f2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	015a      	lsls	r2, r3, #5
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	4413      	add	r3, r2
 80071e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071e8:	461a      	mov	r2, r3
 80071ea:	2300      	movs	r3, #0
 80071ec:	6053      	str	r3, [r2, #4]
 80071ee:	e000      	b.n	80071f2 <USB_HC_StartXfer+0x3ea>
          break;
 80071f0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	015a      	lsls	r2, r3, #5
 80071f6:	6a3b      	ldr	r3, [r7, #32]
 80071f8:	4413      	add	r3, r2
 80071fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007208:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	78db      	ldrb	r3, [r3, #3]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d004      	beq.n	800721c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007218:	613b      	str	r3, [r7, #16]
 800721a:	e003      	b.n	8007224 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007222:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800722a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	015a      	lsls	r2, r3, #5
 8007230:	6a3b      	ldr	r3, [r7, #32]
 8007232:	4413      	add	r3, r2
 8007234:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007238:	461a      	mov	r2, r3
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800723e:	79fb      	ldrb	r3, [r7, #7]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d003      	beq.n	800724c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007244:	2300      	movs	r3, #0
 8007246:	e055      	b.n	80072f4 <USB_HC_StartXfer+0x4ec>
 8007248:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	78db      	ldrb	r3, [r3, #3]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d14e      	bne.n	80072f2 <USB_HC_StartXfer+0x4ea>
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d04a      	beq.n	80072f2 <USB_HC_StartXfer+0x4ea>
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	79db      	ldrb	r3, [r3, #7]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d146      	bne.n	80072f2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	7c9b      	ldrb	r3, [r3, #18]
 8007268:	2b03      	cmp	r3, #3
 800726a:	d831      	bhi.n	80072d0 <USB_HC_StartXfer+0x4c8>
 800726c:	a201      	add	r2, pc, #4	@ (adr r2, 8007274 <USB_HC_StartXfer+0x46c>)
 800726e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007272:	bf00      	nop
 8007274:	08007285 	.word	0x08007285
 8007278:	080072a9 	.word	0x080072a9
 800727c:	08007285 	.word	0x08007285
 8007280:	080072a9 	.word	0x080072a9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	6a1b      	ldr	r3, [r3, #32]
 8007288:	3303      	adds	r3, #3
 800728a:	089b      	lsrs	r3, r3, #2
 800728c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800728e:	8afa      	ldrh	r2, [r7, #22]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007294:	b29b      	uxth	r3, r3
 8007296:	429a      	cmp	r2, r3
 8007298:	d91c      	bls.n	80072d4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	f043 0220 	orr.w	r2, r3, #32
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	619a      	str	r2, [r3, #24]
        }
        break;
 80072a6:	e015      	b.n	80072d4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	6a1b      	ldr	r3, [r3, #32]
 80072ac:	3303      	adds	r3, #3
 80072ae:	089b      	lsrs	r3, r3, #2
 80072b0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80072b2:	8afa      	ldrh	r2, [r7, #22]
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072ba:	691b      	ldr	r3, [r3, #16]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	429a      	cmp	r2, r3
 80072c0:	d90a      	bls.n	80072d8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	699b      	ldr	r3, [r3, #24]
 80072c6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	619a      	str	r2, [r3, #24]
        }
        break;
 80072ce:	e003      	b.n	80072d8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80072d0:	bf00      	nop
 80072d2:	e002      	b.n	80072da <USB_HC_StartXfer+0x4d2>
        break;
 80072d4:	bf00      	nop
 80072d6:	e000      	b.n	80072da <USB_HC_StartXfer+0x4d2>
        break;
 80072d8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	6999      	ldr	r1, [r3, #24]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	785a      	ldrb	r2, [r3, #1]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	2000      	movs	r0, #0
 80072ea:	9000      	str	r0, [sp, #0]
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f7ff f9f3 	bl	80066d8 <USB_WritePacket>
  }

  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3728      	adds	r7, #40	@ 0x28
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	b29b      	uxth	r3, r3
}
 8007312:	4618      	mov	r0, r3
 8007314:	3714      	adds	r7, #20
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800731e:	b480      	push	{r7}
 8007320:	b089      	sub	sp, #36	@ 0x24
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	460b      	mov	r3, r1
 8007328:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800732e:	78fb      	ldrb	r3, [r7, #3]
 8007330:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007332:	2300      	movs	r3, #0
 8007334:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	0c9b      	lsrs	r3, r3, #18
 8007346:	f003 0303 	and.w	r3, r3, #3
 800734a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800734c:	69bb      	ldr	r3, [r7, #24]
 800734e:	015a      	lsls	r2, r3, #5
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	4413      	add	r3, r2
 8007354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	0fdb      	lsrs	r3, r3, #31
 800735c:	f003 0301 	and.w	r3, r3, #1
 8007360:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	015a      	lsls	r2, r3, #5
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	4413      	add	r3, r2
 800736a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	0fdb      	lsrs	r3, r3, #31
 8007372:	f003 0301 	and.w	r3, r3, #1
 8007376:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f003 0320 	and.w	r3, r3, #32
 8007380:	2b20      	cmp	r3, #32
 8007382:	d10d      	bne.n	80073a0 <USB_HC_Halt+0x82>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d10a      	bne.n	80073a0 <USB_HC_Halt+0x82>
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d005      	beq.n	800739c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d002      	beq.n	800739c <USB_HC_Halt+0x7e>
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	2b03      	cmp	r3, #3
 800739a:	d101      	bne.n	80073a0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	e0d8      	b.n	8007552 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d002      	beq.n	80073ac <USB_HC_Halt+0x8e>
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d173      	bne.n	8007494 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	0151      	lsls	r1, r2, #5
 80073be:	69fa      	ldr	r2, [r7, #28]
 80073c0:	440a      	add	r2, r1
 80073c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80073ca:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f003 0320 	and.w	r3, r3, #32
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d14a      	bne.n	800746e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073dc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d133      	bne.n	800744c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	69ba      	ldr	r2, [r7, #24]
 80073f4:	0151      	lsls	r1, r2, #5
 80073f6:	69fa      	ldr	r2, [r7, #28]
 80073f8:	440a      	add	r2, r1
 80073fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007402:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	4413      	add	r3, r2
 800740c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	69ba      	ldr	r2, [r7, #24]
 8007414:	0151      	lsls	r1, r2, #5
 8007416:	69fa      	ldr	r2, [r7, #28]
 8007418:	440a      	add	r2, r1
 800741a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800741e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007422:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	3301      	adds	r3, #1
 8007428:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007430:	d82e      	bhi.n	8007490 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	015a      	lsls	r2, r3, #5
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	4413      	add	r3, r2
 800743a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007444:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007448:	d0ec      	beq.n	8007424 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800744a:	e081      	b.n	8007550 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	4413      	add	r3, r2
 8007454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	0151      	lsls	r1, r2, #5
 800745e:	69fa      	ldr	r2, [r7, #28]
 8007460:	440a      	add	r2, r1
 8007462:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007466:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800746a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800746c:	e070      	b.n	8007550 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	015a      	lsls	r2, r3, #5
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	4413      	add	r3, r2
 8007476:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	0151      	lsls	r1, r2, #5
 8007480:	69fa      	ldr	r2, [r7, #28]
 8007482:	440a      	add	r2, r1
 8007484:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007488:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800748c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800748e:	e05f      	b.n	8007550 <USB_HC_Halt+0x232>
            break;
 8007490:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007492:	e05d      	b.n	8007550 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007494:	69bb      	ldr	r3, [r7, #24]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	4413      	add	r3, r2
 800749c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	69ba      	ldr	r2, [r7, #24]
 80074a4:	0151      	lsls	r1, r2, #5
 80074a6:	69fa      	ldr	r2, [r7, #28]
 80074a8:	440a      	add	r2, r1
 80074aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80074b2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d133      	bne.n	800752c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	69ba      	ldr	r2, [r7, #24]
 80074d4:	0151      	lsls	r1, r2, #5
 80074d6:	69fa      	ldr	r2, [r7, #28]
 80074d8:	440a      	add	r2, r1
 80074da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80074e2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	015a      	lsls	r2, r3, #5
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	4413      	add	r3, r2
 80074ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	69ba      	ldr	r2, [r7, #24]
 80074f4:	0151      	lsls	r1, r2, #5
 80074f6:	69fa      	ldr	r2, [r7, #28]
 80074f8:	440a      	add	r2, r1
 80074fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007502:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	3301      	adds	r3, #1
 8007508:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007510:	d81d      	bhi.n	800754e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	4413      	add	r3, r2
 800751a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007524:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007528:	d0ec      	beq.n	8007504 <USB_HC_Halt+0x1e6>
 800752a:	e011      	b.n	8007550 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	015a      	lsls	r2, r3, #5
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	4413      	add	r3, r2
 8007534:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	69ba      	ldr	r2, [r7, #24]
 800753c:	0151      	lsls	r1, r2, #5
 800753e:	69fa      	ldr	r2, [r7, #28]
 8007540:	440a      	add	r2, r1
 8007542:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007546:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800754a:	6013      	str	r3, [r2, #0]
 800754c:	e000      	b.n	8007550 <USB_HC_Halt+0x232>
          break;
 800754e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007550:	2300      	movs	r3, #0
}
 8007552:	4618      	mov	r0, r3
 8007554:	3724      	adds	r7, #36	@ 0x24
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
	...

08007560 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007560:	b480      	push	{r7}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007570:	78fb      	ldrb	r3, [r7, #3]
 8007572:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007574:	2301      	movs	r3, #1
 8007576:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	04da      	lsls	r2, r3, #19
 800757c:	4b15      	ldr	r3, [pc, #84]	@ (80075d4 <USB_DoPing+0x74>)
 800757e:	4013      	ands	r3, r2
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	0151      	lsls	r1, r2, #5
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	440a      	add	r2, r1
 8007588:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800758c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007590:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	015a      	lsls	r2, r3, #5
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	4413      	add	r3, r2
 800759a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80075a8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80075b0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	015a      	lsls	r2, r3, #5
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	4413      	add	r3, r2
 80075ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075be:	461a      	mov	r2, r3
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	371c      	adds	r7, #28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	1ff80000 	.word	0x1ff80000

080075d8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b088      	sub	sp, #32
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80075e0:	2300      	movs	r3, #0
 80075e2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80075e8:	2300      	movs	r3, #0
 80075ea:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f7fe ffb6 	bl	800655e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075f2:	2110      	movs	r1, #16
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f7ff f80f 	bl	8006618 <USB_FlushTxFifo>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff f839 	bl	800667c <USB_FlushRxFifo>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007614:	2300      	movs	r3, #0
 8007616:	61bb      	str	r3, [r7, #24]
 8007618:	e01f      	b.n	800765a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	4413      	add	r3, r2
 8007622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007630:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007638:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007640:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007642:	69bb      	ldr	r3, [r7, #24]
 8007644:	015a      	lsls	r2, r3, #5
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	4413      	add	r3, r2
 800764a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800764e:	461a      	mov	r2, r3
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	3301      	adds	r3, #1
 8007658:	61bb      	str	r3, [r7, #24]
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	2b0f      	cmp	r3, #15
 800765e:	d9dc      	bls.n	800761a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007660:	2300      	movs	r3, #0
 8007662:	61bb      	str	r3, [r7, #24]
 8007664:	e034      	b.n	80076d0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	015a      	lsls	r2, r3, #5
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	4413      	add	r3, r2
 800766e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800767c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007684:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800768c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	4413      	add	r3, r2
 8007696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800769a:	461a      	mov	r2, r3
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	3301      	adds	r3, #1
 80076a4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80076ac:	d80c      	bhi.n	80076c8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	015a      	lsls	r2, r3, #5
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80076c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80076c4:	d0ec      	beq.n	80076a0 <USB_StopHost+0xc8>
 80076c6:	e000      	b.n	80076ca <USB_StopHost+0xf2>
        break;
 80076c8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	3301      	adds	r3, #1
 80076ce:	61bb      	str	r3, [r7, #24]
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	2b0f      	cmp	r3, #15
 80076d4:	d9c7      	bls.n	8007666 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80076dc:	461a      	mov	r2, r3
 80076de:	f04f 33ff 	mov.w	r3, #4294967295
 80076e2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f04f 32ff 	mov.w	r2, #4294967295
 80076ea:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7fe ff25 	bl	800653c <USB_EnableGlobalInt>

  return ret;
 80076f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3720      	adds	r7, #32
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80076fc:	b590      	push	{r4, r7, lr}
 80076fe:	b089      	sub	sp, #36	@ 0x24
 8007700:	af04      	add	r7, sp, #16
 8007702:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007704:	2301      	movs	r3, #1
 8007706:	2202      	movs	r2, #2
 8007708:	2102      	movs	r1, #2
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fc85 	bl	800801a <USBH_FindInterface>
 8007710:	4603      	mov	r3, r0
 8007712:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007714:	7bfb      	ldrb	r3, [r7, #15]
 8007716:	2bff      	cmp	r3, #255	@ 0xff
 8007718:	d002      	beq.n	8007720 <USBH_CDC_InterfaceInit+0x24>
 800771a:	7bfb      	ldrb	r3, [r7, #15]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d901      	bls.n	8007724 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007720:	2302      	movs	r3, #2
 8007722:	e13d      	b.n	80079a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007724:	7bfb      	ldrb	r3, [r7, #15]
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 fc5a 	bl	8007fe2 <USBH_SelectInterface>
 800772e:	4603      	mov	r3, r0
 8007730:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007732:	7bbb      	ldrb	r3, [r7, #14]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007738:	2302      	movs	r3, #2
 800773a:	e131      	b.n	80079a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007742:	2050      	movs	r0, #80	@ 0x50
 8007744:	f001 fb0a 	bl	8008d5c <malloc>
 8007748:	4603      	mov	r3, r0
 800774a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800775c:	2302      	movs	r3, #2
 800775e:	e11f      	b.n	80079a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007760:	2250      	movs	r2, #80	@ 0x50
 8007762:	2100      	movs	r1, #0
 8007764:	68b8      	ldr	r0, [r7, #8]
 8007766:	f001 fbb7 	bl	8008ed8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800776a:	7bfb      	ldrb	r3, [r7, #15]
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	211a      	movs	r1, #26
 8007770:	fb01 f303 	mul.w	r3, r1, r3
 8007774:	4413      	add	r3, r2
 8007776:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800777a:	781b      	ldrb	r3, [r3, #0]
 800777c:	b25b      	sxtb	r3, r3
 800777e:	2b00      	cmp	r3, #0
 8007780:	da15      	bge.n	80077ae <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007782:	7bfb      	ldrb	r3, [r7, #15]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	211a      	movs	r1, #26
 8007788:	fb01 f303 	mul.w	r3, r1, r3
 800778c:	4413      	add	r3, r2
 800778e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007792:	781a      	ldrb	r2, [r3, #0]
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007798:	7bfb      	ldrb	r3, [r7, #15]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	211a      	movs	r1, #26
 800779e:	fb01 f303 	mul.w	r3, r1, r3
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80077a8:	881a      	ldrh	r2, [r3, #0]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	785b      	ldrb	r3, [r3, #1]
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 ffba 	bl	800872e <USBH_AllocPipe>
 80077ba:	4603      	mov	r3, r0
 80077bc:	461a      	mov	r2, r3
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	7819      	ldrb	r1, [r3, #0]
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	7858      	ldrb	r0, [r3, #1]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	8952      	ldrh	r2, [r2, #10]
 80077da:	9202      	str	r2, [sp, #8]
 80077dc:	2203      	movs	r2, #3
 80077de:	9201      	str	r2, [sp, #4]
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	4623      	mov	r3, r4
 80077e4:	4602      	mov	r2, r0
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 ff72 	bl	80086d0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	2200      	movs	r2, #0
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f001 fa35 	bl	8008c64 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80077fa:	2300      	movs	r3, #0
 80077fc:	2200      	movs	r2, #0
 80077fe:	210a      	movs	r1, #10
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fc0a 	bl	800801a <USBH_FindInterface>
 8007806:	4603      	mov	r3, r0
 8007808:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800780a:	7bfb      	ldrb	r3, [r7, #15]
 800780c:	2bff      	cmp	r3, #255	@ 0xff
 800780e:	d002      	beq.n	8007816 <USBH_CDC_InterfaceInit+0x11a>
 8007810:	7bfb      	ldrb	r3, [r7, #15]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d901      	bls.n	800781a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007816:	2302      	movs	r3, #2
 8007818:	e0c2      	b.n	80079a0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800781a:	7bfb      	ldrb	r3, [r7, #15]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	211a      	movs	r1, #26
 8007820:	fb01 f303 	mul.w	r3, r1, r3
 8007824:	4413      	add	r3, r2
 8007826:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	b25b      	sxtb	r3, r3
 800782e:	2b00      	cmp	r3, #0
 8007830:	da16      	bge.n	8007860 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007832:	7bfb      	ldrb	r3, [r7, #15]
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	211a      	movs	r1, #26
 8007838:	fb01 f303 	mul.w	r3, r1, r3
 800783c:	4413      	add	r3, r2
 800783e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007842:	781a      	ldrb	r2, [r3, #0]
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007848:	7bfb      	ldrb	r3, [r7, #15]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	211a      	movs	r1, #26
 800784e:	fb01 f303 	mul.w	r3, r1, r3
 8007852:	4413      	add	r3, r2
 8007854:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007858:	881a      	ldrh	r2, [r3, #0]
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	835a      	strh	r2, [r3, #26]
 800785e:	e015      	b.n	800788c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007860:	7bfb      	ldrb	r3, [r7, #15]
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	211a      	movs	r1, #26
 8007866:	fb01 f303 	mul.w	r3, r1, r3
 800786a:	4413      	add	r3, r2
 800786c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007870:	781a      	ldrb	r2, [r3, #0]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007876:	7bfb      	ldrb	r3, [r7, #15]
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	211a      	movs	r1, #26
 800787c:	fb01 f303 	mul.w	r3, r1, r3
 8007880:	4413      	add	r3, r2
 8007882:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007886:	881a      	ldrh	r2, [r3, #0]
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800788c:	7bfb      	ldrb	r3, [r7, #15]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	211a      	movs	r1, #26
 8007892:	fb01 f303 	mul.w	r3, r1, r3
 8007896:	4413      	add	r3, r2
 8007898:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	b25b      	sxtb	r3, r3
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	da16      	bge.n	80078d2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80078a4:	7bfb      	ldrb	r3, [r7, #15]
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	211a      	movs	r1, #26
 80078aa:	fb01 f303 	mul.w	r3, r1, r3
 80078ae:	4413      	add	r3, r2
 80078b0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80078b4:	781a      	ldrb	r2, [r3, #0]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80078ba:	7bfb      	ldrb	r3, [r7, #15]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	211a      	movs	r1, #26
 80078c0:	fb01 f303 	mul.w	r3, r1, r3
 80078c4:	4413      	add	r3, r2
 80078c6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80078ca:	881a      	ldrh	r2, [r3, #0]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	835a      	strh	r2, [r3, #26]
 80078d0:	e015      	b.n	80078fe <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80078d2:	7bfb      	ldrb	r3, [r7, #15]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	211a      	movs	r1, #26
 80078d8:	fb01 f303 	mul.w	r3, r1, r3
 80078dc:	4413      	add	r3, r2
 80078de:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80078e2:	781a      	ldrb	r2, [r3, #0]
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	211a      	movs	r1, #26
 80078ee:	fb01 f303 	mul.w	r3, r1, r3
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80078f8:	881a      	ldrh	r2, [r3, #0]
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	7b9b      	ldrb	r3, [r3, #14]
 8007902:	4619      	mov	r1, r3
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 ff12 	bl	800872e <USBH_AllocPipe>
 800790a:	4603      	mov	r3, r0
 800790c:	461a      	mov	r2, r3
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	7bdb      	ldrb	r3, [r3, #15]
 8007916:	4619      	mov	r1, r3
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 ff08 	bl	800872e <USBH_AllocPipe>
 800791e:	4603      	mov	r3, r0
 8007920:	461a      	mov	r2, r3
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	7b59      	ldrb	r1, [r3, #13]
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	7b98      	ldrb	r0, [r3, #14]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	8b12      	ldrh	r2, [r2, #24]
 800793e:	9202      	str	r2, [sp, #8]
 8007940:	2202      	movs	r2, #2
 8007942:	9201      	str	r2, [sp, #4]
 8007944:	9300      	str	r3, [sp, #0]
 8007946:	4623      	mov	r3, r4
 8007948:	4602      	mov	r2, r0
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 fec0 	bl	80086d0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	7b19      	ldrb	r1, [r3, #12]
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	7bd8      	ldrb	r0, [r3, #15]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	8b52      	ldrh	r2, [r2, #26]
 8007968:	9202      	str	r2, [sp, #8]
 800796a:	2202      	movs	r2, #2
 800796c:	9201      	str	r2, [sp, #4]
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	4623      	mov	r3, r4
 8007972:	4602      	mov	r2, r0
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 feab 	bl	80086d0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	7b5b      	ldrb	r3, [r3, #13]
 8007986:	2200      	movs	r2, #0
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 f96a 	bl	8008c64 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	7b1b      	ldrb	r3, [r3, #12]
 8007994:	2200      	movs	r2, #0
 8007996:	4619      	mov	r1, r3
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 f963 	bl	8008c64 <USBH_LL_SetToggle>

  return USBH_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3714      	adds	r7, #20
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd90      	pop	{r4, r7, pc}

080079a8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079b6:	69db      	ldr	r3, [r3, #28]
 80079b8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00e      	beq.n	80079e0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	4619      	mov	r1, r3
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 fea0 	bl	800870e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fecb 	bl	8008770 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2200      	movs	r2, #0
 80079de:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	7b1b      	ldrb	r3, [r3, #12]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00e      	beq.n	8007a06 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	7b1b      	ldrb	r3, [r3, #12]
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fe8d 	bl	800870e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	7b1b      	ldrb	r3, [r3, #12]
 80079f8:	4619      	mov	r1, r3
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 feb8 	bl	8008770 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	7b5b      	ldrb	r3, [r3, #13]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00e      	beq.n	8007a2c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	7b5b      	ldrb	r3, [r3, #13]
 8007a12:	4619      	mov	r1, r3
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fe7a 	bl	800870e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	7b5b      	ldrb	r3, [r3, #13]
 8007a1e:	4619      	mov	r1, r3
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 fea5 	bl	8008770 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a32:	69db      	ldr	r3, [r3, #28]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00b      	beq.n	8007a50 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a3e:	69db      	ldr	r3, [r3, #28]
 8007a40:	4618      	mov	r0, r3
 8007a42:	f001 f993 	bl	8008d6c <free>
    phost->pActiveClass->pData = 0U;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b084      	sub	sp, #16
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	3340      	adds	r3, #64	@ 0x40
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 f8b1 	bl	8007bda <GetLineCoding>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007a7c:	7afb      	ldrb	r3, [r7, #11]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d105      	bne.n	8007a8e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007a88:	2102      	movs	r1, #2
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007a8e:	7afb      	ldrb	r3, [r7, #11]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007ab8:	2b04      	cmp	r3, #4
 8007aba:	d877      	bhi.n	8007bac <USBH_CDC_Process+0x114>
 8007abc:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac4 <USBH_CDC_Process+0x2c>)
 8007abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac2:	bf00      	nop
 8007ac4:	08007ad9 	.word	0x08007ad9
 8007ac8:	08007adf 	.word	0x08007adf
 8007acc:	08007b0f 	.word	0x08007b0f
 8007ad0:	08007b83 	.word	0x08007b83
 8007ad4:	08007b91 	.word	0x08007b91
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	73fb      	strb	r3, [r7, #15]
      break;
 8007adc:	e06d      	b.n	8007bba <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f000 f897 	bl	8007c18 <SetLineCoding>
 8007aea:	4603      	mov	r3, r0
 8007aec:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007aee:	7bbb      	ldrb	r3, [r7, #14]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d104      	bne.n	8007afe <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	2202      	movs	r2, #2
 8007af8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007afc:	e058      	b.n	8007bb0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007afe:	7bbb      	ldrb	r3, [r7, #14]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d055      	beq.n	8007bb0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	2204      	movs	r2, #4
 8007b08:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007b0c:	e050      	b.n	8007bb0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	3340      	adds	r3, #64	@ 0x40
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f860 	bl	8007bda <GetLineCoding>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d126      	bne.n	8007b72 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b36:	791b      	ldrb	r3, [r3, #4]
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d13b      	bne.n	8007bb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b46:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d133      	bne.n	8007bb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b56:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d12b      	bne.n	8007bb4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b64:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d124      	bne.n	8007bb4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f958 	bl	8007e20 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007b70:	e020      	b.n	8007bb4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	2b01      	cmp	r3, #1
 8007b76:	d01d      	beq.n	8007bb4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2204      	movs	r2, #4
 8007b7c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007b80:	e018      	b.n	8007bb4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f000 f867 	bl	8007c56 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f8da 	bl	8007d42 <CDC_ProcessReception>
      break;
 8007b8e:	e014      	b.n	8007bba <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007b90:	2100      	movs	r1, #0
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 fb27 	bl	80081e6 <USBH_ClrFeature>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10a      	bne.n	8007bb8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007baa:	e005      	b.n	8007bb8 <USBH_CDC_Process+0x120>

    default:
      break;
 8007bac:	bf00      	nop
 8007bae:	e004      	b.n	8007bba <USBH_CDC_Process+0x122>
      break;
 8007bb0:	bf00      	nop
 8007bb2:	e002      	b.n	8007bba <USBH_CDC_Process+0x122>
      break;
 8007bb4:	bf00      	nop
 8007bb6:	e000      	b.n	8007bba <USBH_CDC_Process+0x122>
      break;
 8007bb8:	bf00      	nop

  }

  return status;
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	370c      	adds	r7, #12
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b082      	sub	sp, #8
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	22a1      	movs	r2, #161	@ 0xa1
 8007be8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2221      	movs	r2, #33	@ 0x21
 8007bee:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2207      	movs	r2, #7
 8007c00:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2207      	movs	r2, #7
 8007c06:	4619      	mov	r1, r3
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fb10 	bl	800822e <USBH_CtlReq>
 8007c0e:	4603      	mov	r3, r0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3708      	adds	r7, #8
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2221      	movs	r2, #33	@ 0x21
 8007c26:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2220      	movs	r2, #32
 8007c2c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2200      	movs	r2, #0
 8007c38:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2207      	movs	r2, #7
 8007c3e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2207      	movs	r2, #7
 8007c44:	4619      	mov	r1, r3
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 faf1 	bl	800822e <USBH_CtlReq>
 8007c4c:	4603      	mov	r3, r0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b086      	sub	sp, #24
 8007c5a:	af02      	add	r7, sp, #8
 8007c5c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007c68:	2300      	movs	r3, #0
 8007c6a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d002      	beq.n	8007c7c <CDC_ProcessTransmission+0x26>
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d023      	beq.n	8007cc2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007c7a:	e05e      	b.n	8007d3a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c80:	68fa      	ldr	r2, [r7, #12]
 8007c82:	8b12      	ldrh	r2, [r2, #24]
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d90b      	bls.n	8007ca0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	69d9      	ldr	r1, [r3, #28]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	8b1a      	ldrh	r2, [r3, #24]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	7b5b      	ldrb	r3, [r3, #13]
 8007c94:	2001      	movs	r0, #1
 8007c96:	9000      	str	r0, [sp, #0]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fcd6 	bl	800864a <USBH_BulkSendData>
 8007c9e:	e00b      	b.n	8007cb8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007ca8:	b29a      	uxth	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	7b5b      	ldrb	r3, [r3, #13]
 8007cae:	2001      	movs	r0, #1
 8007cb0:	9000      	str	r0, [sp, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fcc9 	bl	800864a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007cc0:	e03b      	b.n	8007d3a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	7b5b      	ldrb	r3, [r3, #13]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 ffa1 	bl	8008c10 <USBH_LL_GetURBState>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007cd2:	7afb      	ldrb	r3, [r7, #11]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d128      	bne.n	8007d2a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	8b12      	ldrh	r2, [r2, #24]
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d90e      	bls.n	8007d02 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ce8:	68fa      	ldr	r2, [r7, #12]
 8007cea:	8b12      	ldrh	r2, [r2, #24]
 8007cec:	1a9a      	subs	r2, r3, r2
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	69db      	ldr	r3, [r3, #28]
 8007cf6:	68fa      	ldr	r2, [r7, #12]
 8007cf8:	8b12      	ldrh	r2, [r2, #24]
 8007cfa:	441a      	add	r2, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	61da      	str	r2, [r3, #28]
 8007d00:	e002      	b.n	8007d08 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d004      	beq.n	8007d1a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007d18:	e00e      	b.n	8007d38 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f868 	bl	8007df8 <USBH_CDC_TransmitCallback>
      break;
 8007d28:	e006      	b.n	8007d38 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007d2a:	7afb      	ldrb	r3, [r7, #11]
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d103      	bne.n	8007d38 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2201      	movs	r2, #1
 8007d34:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007d38:	bf00      	nop
  }
}
 8007d3a:	bf00      	nop
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}

08007d42 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b086      	sub	sp, #24
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d50:	69db      	ldr	r3, [r3, #28]
 8007d52:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d54:	2300      	movs	r3, #0
 8007d56:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007d5e:	2b03      	cmp	r3, #3
 8007d60:	d002      	beq.n	8007d68 <CDC_ProcessReception+0x26>
 8007d62:	2b04      	cmp	r3, #4
 8007d64:	d00e      	beq.n	8007d84 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007d66:	e043      	b.n	8007df0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	6a19      	ldr	r1, [r3, #32]
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	8b5a      	ldrh	r2, [r3, #26]
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	7b1b      	ldrb	r3, [r3, #12]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fc8d 	bl	8008694 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	2204      	movs	r2, #4
 8007d7e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007d82:	e035      	b.n	8007df0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	7b1b      	ldrb	r3, [r3, #12]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 ff40 	bl	8008c10 <USBH_LL_GetURBState>
 8007d90:	4603      	mov	r3, r0
 8007d92:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007d94:	7cfb      	ldrb	r3, [r7, #19]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d129      	bne.n	8007dee <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	7b1b      	ldrb	r3, [r3, #12]
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fea3 	bl	8008aec <USBH_LL_GetLastXferSize>
 8007da6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dac:	68fa      	ldr	r2, [r7, #12]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d016      	beq.n	8007de0 <CDC_ProcessReception+0x9e>
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	8b5b      	ldrh	r3, [r3, #26]
 8007db6:	461a      	mov	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d910      	bls.n	8007de0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	1ad2      	subs	r2, r2, r3
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	6a1a      	ldr	r2, [r3, #32]
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	441a      	add	r2, r3
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	2203      	movs	r2, #3
 8007dda:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007dde:	e006      	b.n	8007dee <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f80f 	bl	8007e0c <USBH_CDC_ReceiveCallback>
      break;
 8007dee:	bf00      	nop
  }
}
 8007df0:	bf00      	nop
 8007df2:	3718      	adds	r7, #24
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007e28:	bf00      	nop
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr

08007e34 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007e48:	2302      	movs	r3, #2
 8007e4a:	e029      	b.n	8007ea0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	79fa      	ldrb	r2, [r7, #7]
 8007e50:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	f000 f81f 	bl	8007ea8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d003      	beq.n	8007e98 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 fdb5 	bl	8008a08 <USBH_LL_Init>

  return USBH_OK;
 8007e9e:	2300      	movs	r3, #0
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3710      	adds	r7, #16
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	e009      	b.n	8007ece <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	33e0      	adds	r3, #224	@ 0xe0
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	3301      	adds	r3, #1
 8007ecc:	60fb      	str	r3, [r7, #12]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b0f      	cmp	r3, #15
 8007ed2:	d9f2      	bls.n	8007eba <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	60fb      	str	r3, [r7, #12]
 8007ed8:	e009      	b.n	8007eee <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	3301      	adds	r3, #1
 8007eec:	60fb      	str	r3, [r7, #12]
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ef4:	d3f1      	bcc.n	8007eda <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2201      	movs	r2, #1
 8007f06:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2201      	movs	r2, #1
 8007f14:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2240      	movs	r2, #64	@ 0x40
 8007f1a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	331c      	adds	r3, #28
 8007f46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f000 ffc3 	bl	8008ed8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007f58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 ffba 	bl	8008ed8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007f6a:	2212      	movs	r2, #18
 8007f6c:	2100      	movs	r1, #0
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 ffb2 	bl	8008ed8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007f7a:	223e      	movs	r2, #62	@ 0x3e
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 ffaa 	bl	8008ed8 <memset>

  return USBH_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007f8e:	b480      	push	{r7}
 8007f90:	b085      	sub	sp, #20
 8007f92:	af00      	add	r7, sp, #0
 8007f94:	6078      	str	r0, [r7, #4]
 8007f96:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d016      	beq.n	8007fd0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10e      	bne.n	8007fca <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007fb2:	1c59      	adds	r1, r3, #1
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	33de      	adds	r3, #222	@ 0xde
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73fb      	strb	r3, [r7, #15]
 8007fc8:	e004      	b.n	8007fd4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007fca:	2302      	movs	r3, #2
 8007fcc:	73fb      	strb	r3, [r7, #15]
 8007fce:	e001      	b.n	8007fd4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3714      	adds	r7, #20
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	b085      	sub	sp, #20
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	460b      	mov	r3, r1
 8007fec:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007ff8:	78fa      	ldrb	r2, [r7, #3]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d204      	bcs.n	8008008 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	78fa      	ldrb	r2, [r7, #3]
 8008002:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008006:	e001      	b.n	800800c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008008:	2302      	movs	r3, #2
 800800a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800800c:	7bfb      	ldrb	r3, [r7, #15]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800801a:	b480      	push	{r7}
 800801c:	b087      	sub	sp, #28
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	4608      	mov	r0, r1
 8008024:	4611      	mov	r1, r2
 8008026:	461a      	mov	r2, r3
 8008028:	4603      	mov	r3, r0
 800802a:	70fb      	strb	r3, [r7, #3]
 800802c:	460b      	mov	r3, r1
 800802e:	70bb      	strb	r3, [r7, #2]
 8008030:	4613      	mov	r3, r2
 8008032:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008034:	2300      	movs	r3, #0
 8008036:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008038:	2300      	movs	r3, #0
 800803a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008042:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008044:	e025      	b.n	8008092 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008046:	7dfb      	ldrb	r3, [r7, #23]
 8008048:	221a      	movs	r2, #26
 800804a:	fb02 f303 	mul.w	r3, r2, r3
 800804e:	3308      	adds	r3, #8
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	4413      	add	r3, r2
 8008054:	3302      	adds	r3, #2
 8008056:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	795b      	ldrb	r3, [r3, #5]
 800805c:	78fa      	ldrb	r2, [r7, #3]
 800805e:	429a      	cmp	r2, r3
 8008060:	d002      	beq.n	8008068 <USBH_FindInterface+0x4e>
 8008062:	78fb      	ldrb	r3, [r7, #3]
 8008064:	2bff      	cmp	r3, #255	@ 0xff
 8008066:	d111      	bne.n	800808c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800806c:	78ba      	ldrb	r2, [r7, #2]
 800806e:	429a      	cmp	r2, r3
 8008070:	d002      	beq.n	8008078 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008072:	78bb      	ldrb	r3, [r7, #2]
 8008074:	2bff      	cmp	r3, #255	@ 0xff
 8008076:	d109      	bne.n	800808c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800807c:	787a      	ldrb	r2, [r7, #1]
 800807e:	429a      	cmp	r2, r3
 8008080:	d002      	beq.n	8008088 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008082:	787b      	ldrb	r3, [r7, #1]
 8008084:	2bff      	cmp	r3, #255	@ 0xff
 8008086:	d101      	bne.n	800808c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008088:	7dfb      	ldrb	r3, [r7, #23]
 800808a:	e006      	b.n	800809a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800808c:	7dfb      	ldrb	r3, [r7, #23]
 800808e:	3301      	adds	r3, #1
 8008090:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008092:	7dfb      	ldrb	r3, [r7, #23]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d9d6      	bls.n	8008046 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008098:	23ff      	movs	r3, #255	@ 0xff
}
 800809a:	4618      	mov	r0, r3
 800809c:	371c      	adds	r7, #28
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b082      	sub	sp, #8
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fce6 	bl	8008a80 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80080b4:	2101      	movs	r1, #1
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f000 fdbd 	bl	8008c36 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b083      	sub	sp, #12
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	683a      	ldr	r2, [r7, #0]
 80080d4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80080d8:	bf00      	nop
 80080da:	370c      	adds	r7, #12
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80080f2:	1c5a      	adds	r2, r3, #1
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f804 	bl	8008108 <USBH_HandleSof>
}
 8008100:	bf00      	nop
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b0b      	cmp	r3, #11
 8008118:	d10a      	bne.n	8008130 <USBH_HandleSof+0x28>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008120:	2b00      	cmp	r3, #0
 8008122:	d005      	beq.n	8008130 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	4798      	blx	r3
  }
}
 8008130:	bf00      	nop
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008148:	bf00      	nop
}
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008164:	bf00      	nop
}
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	370c      	adds	r7, #12
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fc79 	bl	8008ab6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	791b      	ldrb	r3, [r3, #4]
 80081c8:	4619      	mov	r1, r3
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fad0 	bl	8008770 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	795b      	ldrb	r3, [r3, #5]
 80081d4:	4619      	mov	r1, r3
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 faca 	bl	8008770 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80081dc:	2300      	movs	r3, #0
}
 80081de:	4618      	mov	r0, r3
 80081e0:	3708      	adds	r7, #8
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	b082      	sub	sp, #8
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
 80081ee:	460b      	mov	r3, r1
 80081f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	789b      	ldrb	r3, [r3, #2]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d10f      	bne.n	800821a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2202      	movs	r2, #2
 80081fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2201      	movs	r2, #1
 8008204:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800820c:	78fb      	ldrb	r3, [r7, #3]
 800820e:	b29a      	uxth	r2, r3
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2200      	movs	r2, #0
 8008218:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800821a:	2200      	movs	r2, #0
 800821c:	2100      	movs	r1, #0
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f805 	bl	800822e <USBH_CtlReq>
 8008224:	4603      	mov	r3, r0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3708      	adds	r7, #8
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b086      	sub	sp, #24
 8008232:	af00      	add	r7, sp, #0
 8008234:	60f8      	str	r0, [r7, #12]
 8008236:	60b9      	str	r1, [r7, #8]
 8008238:	4613      	mov	r3, r2
 800823a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800823c:	2301      	movs	r3, #1
 800823e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	789b      	ldrb	r3, [r3, #2]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d002      	beq.n	800824e <USBH_CtlReq+0x20>
 8008248:	2b02      	cmp	r3, #2
 800824a:	d00f      	beq.n	800826c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800824c:	e027      	b.n	800829e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	88fa      	ldrh	r2, [r7, #6]
 8008258:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2201      	movs	r2, #1
 800825e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2202      	movs	r2, #2
 8008264:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008266:	2301      	movs	r3, #1
 8008268:	75fb      	strb	r3, [r7, #23]
      break;
 800826a:	e018      	b.n	800829e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800826c:	68f8      	ldr	r0, [r7, #12]
 800826e:	f000 f81b 	bl	80082a8 <USBH_HandleControl>
 8008272:	4603      	mov	r3, r0
 8008274:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008276:	7dfb      	ldrb	r3, [r7, #23]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d002      	beq.n	8008282 <USBH_CtlReq+0x54>
 800827c:	7dfb      	ldrb	r3, [r7, #23]
 800827e:	2b03      	cmp	r3, #3
 8008280:	d106      	bne.n	8008290 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2201      	movs	r2, #1
 8008286:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	761a      	strb	r2, [r3, #24]
      break;
 800828e:	e005      	b.n	800829c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008290:	7dfb      	ldrb	r3, [r7, #23]
 8008292:	2b02      	cmp	r3, #2
 8008294:	d102      	bne.n	800829c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2201      	movs	r2, #1
 800829a:	709a      	strb	r2, [r3, #2]
      break;
 800829c:	bf00      	nop
  }
  return status;
 800829e:	7dfb      	ldrb	r3, [r7, #23]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af02      	add	r7, sp, #8
 80082ae:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80082b0:	2301      	movs	r3, #1
 80082b2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80082b4:	2300      	movs	r3, #0
 80082b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	7e1b      	ldrb	r3, [r3, #24]
 80082bc:	3b01      	subs	r3, #1
 80082be:	2b0a      	cmp	r3, #10
 80082c0:	f200 8156 	bhi.w	8008570 <USBH_HandleControl+0x2c8>
 80082c4:	a201      	add	r2, pc, #4	@ (adr r2, 80082cc <USBH_HandleControl+0x24>)
 80082c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ca:	bf00      	nop
 80082cc:	080082f9 	.word	0x080082f9
 80082d0:	08008313 	.word	0x08008313
 80082d4:	0800837d 	.word	0x0800837d
 80082d8:	080083a3 	.word	0x080083a3
 80082dc:	080083db 	.word	0x080083db
 80082e0:	08008405 	.word	0x08008405
 80082e4:	08008457 	.word	0x08008457
 80082e8:	08008479 	.word	0x08008479
 80082ec:	080084b5 	.word	0x080084b5
 80082f0:	080084db 	.word	0x080084db
 80082f4:	08008519 	.word	0x08008519
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f103 0110 	add.w	r1, r3, #16
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	795b      	ldrb	r3, [r3, #5]
 8008302:	461a      	mov	r2, r3
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f943 	bl	8008590 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2202      	movs	r2, #2
 800830e:	761a      	strb	r2, [r3, #24]
      break;
 8008310:	e139      	b.n	8008586 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	795b      	ldrb	r3, [r3, #5]
 8008316:	4619      	mov	r1, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fc79 	bl	8008c10 <USBH_LL_GetURBState>
 800831e:	4603      	mov	r3, r0
 8008320:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008322:	7bbb      	ldrb	r3, [r7, #14]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d11e      	bne.n	8008366 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	7c1b      	ldrb	r3, [r3, #16]
 800832c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008330:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	8adb      	ldrh	r3, [r3, #22]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00a      	beq.n	8008350 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800833a:	7b7b      	ldrb	r3, [r7, #13]
 800833c:	2b80      	cmp	r3, #128	@ 0x80
 800833e:	d103      	bne.n	8008348 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2203      	movs	r2, #3
 8008344:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008346:	e115      	b.n	8008574 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2205      	movs	r2, #5
 800834c:	761a      	strb	r2, [r3, #24]
      break;
 800834e:	e111      	b.n	8008574 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008350:	7b7b      	ldrb	r3, [r7, #13]
 8008352:	2b80      	cmp	r3, #128	@ 0x80
 8008354:	d103      	bne.n	800835e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2209      	movs	r2, #9
 800835a:	761a      	strb	r2, [r3, #24]
      break;
 800835c:	e10a      	b.n	8008574 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2207      	movs	r2, #7
 8008362:	761a      	strb	r2, [r3, #24]
      break;
 8008364:	e106      	b.n	8008574 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008366:	7bbb      	ldrb	r3, [r7, #14]
 8008368:	2b04      	cmp	r3, #4
 800836a:	d003      	beq.n	8008374 <USBH_HandleControl+0xcc>
 800836c:	7bbb      	ldrb	r3, [r7, #14]
 800836e:	2b02      	cmp	r3, #2
 8008370:	f040 8100 	bne.w	8008574 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	220b      	movs	r2, #11
 8008378:	761a      	strb	r2, [r3, #24]
      break;
 800837a:	e0fb      	b.n	8008574 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008382:	b29a      	uxth	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6899      	ldr	r1, [r3, #8]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	899a      	ldrh	r2, [r3, #12]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	791b      	ldrb	r3, [r3, #4]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f93a 	bl	800860e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2204      	movs	r2, #4
 800839e:	761a      	strb	r2, [r3, #24]
      break;
 80083a0:	e0f1      	b.n	8008586 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	791b      	ldrb	r3, [r3, #4]
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fc31 	bl	8008c10 <USBH_LL_GetURBState>
 80083ae:	4603      	mov	r3, r0
 80083b0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80083b2:	7bbb      	ldrb	r3, [r7, #14]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	d102      	bne.n	80083be <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2209      	movs	r2, #9
 80083bc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	2b05      	cmp	r3, #5
 80083c2:	d102      	bne.n	80083ca <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80083c4:	2303      	movs	r3, #3
 80083c6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80083c8:	e0d6      	b.n	8008578 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80083ca:	7bbb      	ldrb	r3, [r7, #14]
 80083cc:	2b04      	cmp	r3, #4
 80083ce:	f040 80d3 	bne.w	8008578 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	220b      	movs	r2, #11
 80083d6:	761a      	strb	r2, [r3, #24]
      break;
 80083d8:	e0ce      	b.n	8008578 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6899      	ldr	r1, [r3, #8]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	899a      	ldrh	r2, [r3, #12]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	795b      	ldrb	r3, [r3, #5]
 80083e6:	2001      	movs	r0, #1
 80083e8:	9000      	str	r0, [sp, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f8ea 	bl	80085c4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2206      	movs	r2, #6
 8008400:	761a      	strb	r2, [r3, #24]
      break;
 8008402:	e0c0      	b.n	8008586 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	795b      	ldrb	r3, [r3, #5]
 8008408:	4619      	mov	r1, r3
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fc00 	bl	8008c10 <USBH_LL_GetURBState>
 8008410:	4603      	mov	r3, r0
 8008412:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008414:	7bbb      	ldrb	r3, [r7, #14]
 8008416:	2b01      	cmp	r3, #1
 8008418:	d103      	bne.n	8008422 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2207      	movs	r2, #7
 800841e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008420:	e0ac      	b.n	800857c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008422:	7bbb      	ldrb	r3, [r7, #14]
 8008424:	2b05      	cmp	r3, #5
 8008426:	d105      	bne.n	8008434 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	220c      	movs	r2, #12
 800842c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800842e:	2303      	movs	r3, #3
 8008430:	73fb      	strb	r3, [r7, #15]
      break;
 8008432:	e0a3      	b.n	800857c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008434:	7bbb      	ldrb	r3, [r7, #14]
 8008436:	2b02      	cmp	r3, #2
 8008438:	d103      	bne.n	8008442 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2205      	movs	r2, #5
 800843e:	761a      	strb	r2, [r3, #24]
      break;
 8008440:	e09c      	b.n	800857c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008442:	7bbb      	ldrb	r3, [r7, #14]
 8008444:	2b04      	cmp	r3, #4
 8008446:	f040 8099 	bne.w	800857c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	220b      	movs	r2, #11
 800844e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008450:	2302      	movs	r3, #2
 8008452:	73fb      	strb	r3, [r7, #15]
      break;
 8008454:	e092      	b.n	800857c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	791b      	ldrb	r3, [r3, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	2100      	movs	r1, #0
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f8d5 	bl	800860e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800846a:	b29a      	uxth	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2208      	movs	r2, #8
 8008474:	761a      	strb	r2, [r3, #24]

      break;
 8008476:	e086      	b.n	8008586 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	791b      	ldrb	r3, [r3, #4]
 800847c:	4619      	mov	r1, r3
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 fbc6 	bl	8008c10 <USBH_LL_GetURBState>
 8008484:	4603      	mov	r3, r0
 8008486:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	2b01      	cmp	r3, #1
 800848c:	d105      	bne.n	800849a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	220d      	movs	r2, #13
 8008492:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008494:	2300      	movs	r3, #0
 8008496:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008498:	e072      	b.n	8008580 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800849a:	7bbb      	ldrb	r3, [r7, #14]
 800849c:	2b04      	cmp	r3, #4
 800849e:	d103      	bne.n	80084a8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	220b      	movs	r2, #11
 80084a4:	761a      	strb	r2, [r3, #24]
      break;
 80084a6:	e06b      	b.n	8008580 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80084a8:	7bbb      	ldrb	r3, [r7, #14]
 80084aa:	2b05      	cmp	r3, #5
 80084ac:	d168      	bne.n	8008580 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80084ae:	2303      	movs	r3, #3
 80084b0:	73fb      	strb	r3, [r7, #15]
      break;
 80084b2:	e065      	b.n	8008580 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	795b      	ldrb	r3, [r3, #5]
 80084b8:	2201      	movs	r2, #1
 80084ba:	9200      	str	r2, [sp, #0]
 80084bc:	2200      	movs	r2, #0
 80084be:	2100      	movs	r1, #0
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 f87f 	bl	80085c4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	220a      	movs	r2, #10
 80084d6:	761a      	strb	r2, [r3, #24]
      break;
 80084d8:	e055      	b.n	8008586 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	795b      	ldrb	r3, [r3, #5]
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f000 fb95 	bl	8008c10 <USBH_LL_GetURBState>
 80084e6:	4603      	mov	r3, r0
 80084e8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d105      	bne.n	80084fc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80084f0:	2300      	movs	r3, #0
 80084f2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	220d      	movs	r2, #13
 80084f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80084fa:	e043      	b.n	8008584 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80084fc:	7bbb      	ldrb	r3, [r7, #14]
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d103      	bne.n	800850a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2209      	movs	r2, #9
 8008506:	761a      	strb	r2, [r3, #24]
      break;
 8008508:	e03c      	b.n	8008584 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800850a:	7bbb      	ldrb	r3, [r7, #14]
 800850c:	2b04      	cmp	r3, #4
 800850e:	d139      	bne.n	8008584 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	220b      	movs	r2, #11
 8008514:	761a      	strb	r2, [r3, #24]
      break;
 8008516:	e035      	b.n	8008584 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	7e5b      	ldrb	r3, [r3, #25]
 800851c:	3301      	adds	r3, #1
 800851e:	b2da      	uxtb	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	765a      	strb	r2, [r3, #25]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	7e5b      	ldrb	r3, [r3, #25]
 8008528:	2b02      	cmp	r3, #2
 800852a:	d806      	bhi.n	800853a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2201      	movs	r2, #1
 8008536:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008538:	e025      	b.n	8008586 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008540:	2106      	movs	r1, #6
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	795b      	ldrb	r3, [r3, #5]
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f90c 	bl	8008770 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	791b      	ldrb	r3, [r3, #4]
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f906 	bl	8008770 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800856a:	2302      	movs	r3, #2
 800856c:	73fb      	strb	r3, [r7, #15]
      break;
 800856e:	e00a      	b.n	8008586 <USBH_HandleControl+0x2de>

    default:
      break;
 8008570:	bf00      	nop
 8008572:	e008      	b.n	8008586 <USBH_HandleControl+0x2de>
      break;
 8008574:	bf00      	nop
 8008576:	e006      	b.n	8008586 <USBH_HandleControl+0x2de>
      break;
 8008578:	bf00      	nop
 800857a:	e004      	b.n	8008586 <USBH_HandleControl+0x2de>
      break;
 800857c:	bf00      	nop
 800857e:	e002      	b.n	8008586 <USBH_HandleControl+0x2de>
      break;
 8008580:	bf00      	nop
 8008582:	e000      	b.n	8008586 <USBH_HandleControl+0x2de>
      break;
 8008584:	bf00      	nop
  }

  return status;
 8008586:	7bfb      	ldrb	r3, [r7, #15]
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}

08008590 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b088      	sub	sp, #32
 8008594:	af04      	add	r7, sp, #16
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	4613      	mov	r3, r2
 800859c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800859e:	79f9      	ldrb	r1, [r7, #7]
 80085a0:	2300      	movs	r3, #0
 80085a2:	9303      	str	r3, [sp, #12]
 80085a4:	2308      	movs	r3, #8
 80085a6:	9302      	str	r3, [sp, #8]
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	9301      	str	r3, [sp, #4]
 80085ac:	2300      	movs	r3, #0
 80085ae:	9300      	str	r3, [sp, #0]
 80085b0:	2300      	movs	r3, #0
 80085b2:	2200      	movs	r2, #0
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f000 fafa 	bl	8008bae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80085ba:	2300      	movs	r3, #0
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b088      	sub	sp, #32
 80085c8:	af04      	add	r7, sp, #16
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	4611      	mov	r1, r2
 80085d0:	461a      	mov	r2, r3
 80085d2:	460b      	mov	r3, r1
 80085d4:	80fb      	strh	r3, [r7, #6]
 80085d6:	4613      	mov	r3, r2
 80085d8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d001      	beq.n	80085e8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80085e8:	7979      	ldrb	r1, [r7, #5]
 80085ea:	7e3b      	ldrb	r3, [r7, #24]
 80085ec:	9303      	str	r3, [sp, #12]
 80085ee:	88fb      	ldrh	r3, [r7, #6]
 80085f0:	9302      	str	r3, [sp, #8]
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	9301      	str	r3, [sp, #4]
 80085f6:	2301      	movs	r3, #1
 80085f8:	9300      	str	r3, [sp, #0]
 80085fa:	2300      	movs	r3, #0
 80085fc:	2200      	movs	r2, #0
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f000 fad5 	bl	8008bae <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b088      	sub	sp, #32
 8008612:	af04      	add	r7, sp, #16
 8008614:	60f8      	str	r0, [r7, #12]
 8008616:	60b9      	str	r1, [r7, #8]
 8008618:	4611      	mov	r1, r2
 800861a:	461a      	mov	r2, r3
 800861c:	460b      	mov	r3, r1
 800861e:	80fb      	strh	r3, [r7, #6]
 8008620:	4613      	mov	r3, r2
 8008622:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008624:	7979      	ldrb	r1, [r7, #5]
 8008626:	2300      	movs	r3, #0
 8008628:	9303      	str	r3, [sp, #12]
 800862a:	88fb      	ldrh	r3, [r7, #6]
 800862c:	9302      	str	r3, [sp, #8]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	9301      	str	r3, [sp, #4]
 8008632:	2301      	movs	r3, #1
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	2300      	movs	r3, #0
 8008638:	2201      	movs	r2, #1
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f000 fab7 	bl	8008bae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008640:	2300      	movs	r3, #0

}
 8008642:	4618      	mov	r0, r3
 8008644:	3710      	adds	r7, #16
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}

0800864a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800864a:	b580      	push	{r7, lr}
 800864c:	b088      	sub	sp, #32
 800864e:	af04      	add	r7, sp, #16
 8008650:	60f8      	str	r0, [r7, #12]
 8008652:	60b9      	str	r1, [r7, #8]
 8008654:	4611      	mov	r1, r2
 8008656:	461a      	mov	r2, r3
 8008658:	460b      	mov	r3, r1
 800865a:	80fb      	strh	r3, [r7, #6]
 800865c:	4613      	mov	r3, r2
 800865e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008666:	2b00      	cmp	r3, #0
 8008668:	d001      	beq.n	800866e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800866a:	2300      	movs	r3, #0
 800866c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800866e:	7979      	ldrb	r1, [r7, #5]
 8008670:	7e3b      	ldrb	r3, [r7, #24]
 8008672:	9303      	str	r3, [sp, #12]
 8008674:	88fb      	ldrh	r3, [r7, #6]
 8008676:	9302      	str	r3, [sp, #8]
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	9301      	str	r3, [sp, #4]
 800867c:	2301      	movs	r3, #1
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	2302      	movs	r3, #2
 8008682:	2200      	movs	r2, #0
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f000 fa92 	bl	8008bae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b088      	sub	sp, #32
 8008698:	af04      	add	r7, sp, #16
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	4611      	mov	r1, r2
 80086a0:	461a      	mov	r2, r3
 80086a2:	460b      	mov	r3, r1
 80086a4:	80fb      	strh	r3, [r7, #6]
 80086a6:	4613      	mov	r3, r2
 80086a8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80086aa:	7979      	ldrb	r1, [r7, #5]
 80086ac:	2300      	movs	r3, #0
 80086ae:	9303      	str	r3, [sp, #12]
 80086b0:	88fb      	ldrh	r3, [r7, #6]
 80086b2:	9302      	str	r3, [sp, #8]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	9301      	str	r3, [sp, #4]
 80086b8:	2301      	movs	r3, #1
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	2302      	movs	r3, #2
 80086be:	2201      	movs	r2, #1
 80086c0:	68f8      	ldr	r0, [r7, #12]
 80086c2:	f000 fa74 	bl	8008bae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80086c6:	2300      	movs	r3, #0
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3710      	adds	r7, #16
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b086      	sub	sp, #24
 80086d4:	af04      	add	r7, sp, #16
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	4608      	mov	r0, r1
 80086da:	4611      	mov	r1, r2
 80086dc:	461a      	mov	r2, r3
 80086de:	4603      	mov	r3, r0
 80086e0:	70fb      	strb	r3, [r7, #3]
 80086e2:	460b      	mov	r3, r1
 80086e4:	70bb      	strb	r3, [r7, #2]
 80086e6:	4613      	mov	r3, r2
 80086e8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80086ea:	7878      	ldrb	r0, [r7, #1]
 80086ec:	78ba      	ldrb	r2, [r7, #2]
 80086ee:	78f9      	ldrb	r1, [r7, #3]
 80086f0:	8b3b      	ldrh	r3, [r7, #24]
 80086f2:	9302      	str	r3, [sp, #8]
 80086f4:	7d3b      	ldrb	r3, [r7, #20]
 80086f6:	9301      	str	r3, [sp, #4]
 80086f8:	7c3b      	ldrb	r3, [r7, #16]
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	4603      	mov	r3, r0
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fa07 	bl	8008b12 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	b082      	sub	sp, #8
 8008712:	af00      	add	r7, sp, #0
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	460b      	mov	r3, r1
 8008718:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800871a:	78fb      	ldrb	r3, [r7, #3]
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fa26 	bl	8008b70 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800872e:	b580      	push	{r7, lr}
 8008730:	b084      	sub	sp, #16
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	460b      	mov	r3, r1
 8008738:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f836 	bl	80087ac <USBH_GetFreePipe>
 8008740:	4603      	mov	r3, r0
 8008742:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008744:	89fb      	ldrh	r3, [r7, #14]
 8008746:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800874a:	4293      	cmp	r3, r2
 800874c:	d00a      	beq.n	8008764 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800874e:	78fa      	ldrb	r2, [r7, #3]
 8008750:	89fb      	ldrh	r3, [r7, #14]
 8008752:	f003 030f 	and.w	r3, r3, #15
 8008756:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800875a:	6879      	ldr	r1, [r7, #4]
 800875c:	33e0      	adds	r3, #224	@ 0xe0
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	440b      	add	r3, r1
 8008762:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008764:	89fb      	ldrh	r3, [r7, #14]
 8008766:	b2db      	uxtb	r3, r3
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	460b      	mov	r3, r1
 800877a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800877c:	78fb      	ldrb	r3, [r7, #3]
 800877e:	2b0f      	cmp	r3, #15
 8008780:	d80d      	bhi.n	800879e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008782:	78fb      	ldrb	r3, [r7, #3]
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	33e0      	adds	r3, #224	@ 0xe0
 8008788:	009b      	lsls	r3, r3, #2
 800878a:	4413      	add	r3, r2
 800878c:	685a      	ldr	r2, [r3, #4]
 800878e:	78fb      	ldrb	r3, [r7, #3]
 8008790:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008794:	6879      	ldr	r1, [r7, #4]
 8008796:	33e0      	adds	r3, #224	@ 0xe0
 8008798:	009b      	lsls	r3, r3, #2
 800879a:	440b      	add	r3, r1
 800879c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800879e:	2300      	movs	r3, #0
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	370c      	adds	r7, #12
 80087a4:	46bd      	mov	sp, r7
 80087a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087aa:	4770      	bx	lr

080087ac <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b085      	sub	sp, #20
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80087b4:	2300      	movs	r3, #0
 80087b6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80087b8:	2300      	movs	r3, #0
 80087ba:	73fb      	strb	r3, [r7, #15]
 80087bc:	e00f      	b.n	80087de <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80087be:	7bfb      	ldrb	r3, [r7, #15]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	33e0      	adds	r3, #224	@ 0xe0
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4413      	add	r3, r2
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d102      	bne.n	80087d8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80087d2:	7bfb      	ldrb	r3, [r7, #15]
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	e007      	b.n	80087e8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	3301      	adds	r3, #1
 80087dc:	73fb      	strb	r3, [r7, #15]
 80087de:	7bfb      	ldrb	r3, [r7, #15]
 80087e0:	2b0f      	cmp	r3, #15
 80087e2:	d9ec      	bls.n	80087be <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80087e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80087f8:	2201      	movs	r2, #1
 80087fa:	490e      	ldr	r1, [pc, #56]	@ (8008834 <MX_USB_HOST_Init+0x40>)
 80087fc:	480e      	ldr	r0, [pc, #56]	@ (8008838 <MX_USB_HOST_Init+0x44>)
 80087fe:	f7ff fb19 	bl	8007e34 <USBH_Init>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d001      	beq.n	800880c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008808:	f7f8 fd28 	bl	800125c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800880c:	490b      	ldr	r1, [pc, #44]	@ (800883c <MX_USB_HOST_Init+0x48>)
 800880e:	480a      	ldr	r0, [pc, #40]	@ (8008838 <MX_USB_HOST_Init+0x44>)
 8008810:	f7ff fbbd 	bl	8007f8e <USBH_RegisterClass>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800881a:	f7f8 fd1f 	bl	800125c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800881e:	4806      	ldr	r0, [pc, #24]	@ (8008838 <MX_USB_HOST_Init+0x44>)
 8008820:	f7ff fc41 	bl	80080a6 <USBH_Start>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800882a:	f7f8 fd17 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800882e:	bf00      	nop
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	08008841 	.word	0x08008841
 8008838:	20000228 	.word	0x20000228
 800883c:	20000010 	.word	0x20000010

08008840 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	460b      	mov	r3, r1
 800884a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800884c:	78fb      	ldrb	r3, [r7, #3]
 800884e:	3b01      	subs	r3, #1
 8008850:	2b04      	cmp	r3, #4
 8008852:	d819      	bhi.n	8008888 <USBH_UserProcess+0x48>
 8008854:	a201      	add	r2, pc, #4	@ (adr r2, 800885c <USBH_UserProcess+0x1c>)
 8008856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885a:	bf00      	nop
 800885c:	08008889 	.word	0x08008889
 8008860:	08008879 	.word	0x08008879
 8008864:	08008889 	.word	0x08008889
 8008868:	08008881 	.word	0x08008881
 800886c:	08008871 	.word	0x08008871
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008870:	4b09      	ldr	r3, [pc, #36]	@ (8008898 <USBH_UserProcess+0x58>)
 8008872:	2203      	movs	r2, #3
 8008874:	701a      	strb	r2, [r3, #0]
  break;
 8008876:	e008      	b.n	800888a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008878:	4b07      	ldr	r3, [pc, #28]	@ (8008898 <USBH_UserProcess+0x58>)
 800887a:	2202      	movs	r2, #2
 800887c:	701a      	strb	r2, [r3, #0]
  break;
 800887e:	e004      	b.n	800888a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008880:	4b05      	ldr	r3, [pc, #20]	@ (8008898 <USBH_UserProcess+0x58>)
 8008882:	2201      	movs	r2, #1
 8008884:	701a      	strb	r2, [r3, #0]
  break;
 8008886:	e000      	b.n	800888a <USBH_UserProcess+0x4a>

  default:
  break;
 8008888:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800888a:	bf00      	nop
 800888c:	370c      	adds	r7, #12
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	20000600 	.word	0x20000600

0800889c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b08a      	sub	sp, #40	@ 0x28
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088a4:	f107 0314 	add.w	r3, r7, #20
 80088a8:	2200      	movs	r2, #0
 80088aa:	601a      	str	r2, [r3, #0]
 80088ac:	605a      	str	r2, [r3, #4]
 80088ae:	609a      	str	r2, [r3, #8]
 80088b0:	60da      	str	r2, [r3, #12]
 80088b2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80088bc:	d147      	bne.n	800894e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088be:	2300      	movs	r3, #0
 80088c0:	613b      	str	r3, [r7, #16]
 80088c2:	4b25      	ldr	r3, [pc, #148]	@ (8008958 <HAL_HCD_MspInit+0xbc>)
 80088c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088c6:	4a24      	ldr	r2, [pc, #144]	@ (8008958 <HAL_HCD_MspInit+0xbc>)
 80088c8:	f043 0301 	orr.w	r3, r3, #1
 80088cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80088ce:	4b22      	ldr	r3, [pc, #136]	@ (8008958 <HAL_HCD_MspInit+0xbc>)
 80088d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	613b      	str	r3, [r7, #16]
 80088d8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80088da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80088de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088e0:	2300      	movs	r3, #0
 80088e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088e4:	2300      	movs	r3, #0
 80088e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80088e8:	f107 0314 	add.w	r3, r7, #20
 80088ec:	4619      	mov	r1, r3
 80088ee:	481b      	ldr	r0, [pc, #108]	@ (800895c <HAL_HCD_MspInit+0xc0>)
 80088f0:	f7f9 f8b4 	bl	8001a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80088f4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80088f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088fa:	2302      	movs	r3, #2
 80088fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088fe:	2300      	movs	r3, #0
 8008900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008902:	2300      	movs	r3, #0
 8008904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008906:	230a      	movs	r3, #10
 8008908:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800890a:	f107 0314 	add.w	r3, r7, #20
 800890e:	4619      	mov	r1, r3
 8008910:	4812      	ldr	r0, [pc, #72]	@ (800895c <HAL_HCD_MspInit+0xc0>)
 8008912:	f7f9 f8a3 	bl	8001a5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008916:	4b10      	ldr	r3, [pc, #64]	@ (8008958 <HAL_HCD_MspInit+0xbc>)
 8008918:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800891a:	4a0f      	ldr	r2, [pc, #60]	@ (8008958 <HAL_HCD_MspInit+0xbc>)
 800891c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008920:	6353      	str	r3, [r2, #52]	@ 0x34
 8008922:	2300      	movs	r3, #0
 8008924:	60fb      	str	r3, [r7, #12]
 8008926:	4b0c      	ldr	r3, [pc, #48]	@ (8008958 <HAL_HCD_MspInit+0xbc>)
 8008928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800892a:	4a0b      	ldr	r2, [pc, #44]	@ (8008958 <HAL_HCD_MspInit+0xbc>)
 800892c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008930:	6453      	str	r3, [r2, #68]	@ 0x44
 8008932:	4b09      	ldr	r3, [pc, #36]	@ (8008958 <HAL_HCD_MspInit+0xbc>)
 8008934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008936:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800893e:	2200      	movs	r2, #0
 8008940:	2100      	movs	r1, #0
 8008942:	2043      	movs	r0, #67	@ 0x43
 8008944:	f7f9 f853 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008948:	2043      	movs	r0, #67	@ 0x43
 800894a:	f7f9 f86c 	bl	8001a26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800894e:	bf00      	nop
 8008950:	3728      	adds	r7, #40	@ 0x28
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	40023800 	.word	0x40023800
 800895c:	40020000 	.word	0x40020000

08008960 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800896e:	4618      	mov	r0, r3
 8008970:	f7ff fbb8 	bl	80080e4 <USBH_LL_IncTimer>
}
 8008974:	bf00      	nop
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}

0800897c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800898a:	4618      	mov	r0, r3
 800898c:	f7ff fbf0 	bl	8008170 <USBH_LL_Connect>
}
 8008990:	bf00      	nop
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}

08008998 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7ff fbf9 	bl	800819e <USBH_LL_Disconnect>
}
 80089ac:	bf00      	nop
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	460b      	mov	r3, r1
 80089be:	70fb      	strb	r3, [r7, #3]
 80089c0:	4613      	mov	r3, r2
 80089c2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b082      	sub	sp, #8
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80089de:	4618      	mov	r0, r3
 80089e0:	f7ff fbaa 	bl	8008138 <USBH_LL_PortEnabled>
}
 80089e4:	bf00      	nop
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7ff fbaa 	bl	8008154 <USBH_LL_PortDisabled>
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d12a      	bne.n	8008a70 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008a1a:	4a18      	ldr	r2, [pc, #96]	@ (8008a7c <USBH_LL_Init+0x74>)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a15      	ldr	r2, [pc, #84]	@ (8008a7c <USBH_LL_Init+0x74>)
 8008a26:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008a2a:	4b14      	ldr	r3, [pc, #80]	@ (8008a7c <USBH_LL_Init+0x74>)
 8008a2c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008a30:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008a32:	4b12      	ldr	r3, [pc, #72]	@ (8008a7c <USBH_LL_Init+0x74>)
 8008a34:	2208      	movs	r2, #8
 8008a36:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008a38:	4b10      	ldr	r3, [pc, #64]	@ (8008a7c <USBH_LL_Init+0x74>)
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8008a7c <USBH_LL_Init+0x74>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008a44:	4b0d      	ldr	r3, [pc, #52]	@ (8008a7c <USBH_LL_Init+0x74>)
 8008a46:	2202      	movs	r2, #2
 8008a48:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8008a7c <USBH_LL_Init+0x74>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008a50:	480a      	ldr	r0, [pc, #40]	@ (8008a7c <USBH_LL_Init+0x74>)
 8008a52:	f7f9 f9d0 	bl	8001df6 <HAL_HCD_Init>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d001      	beq.n	8008a60 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008a5c:	f7f8 fbfe 	bl	800125c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008a60:	4806      	ldr	r0, [pc, #24]	@ (8008a7c <USBH_LL_Init+0x74>)
 8008a62:	f7f9 fe23 	bl	80026ac <HAL_HCD_GetCurrentFrame>
 8008a66:	4603      	mov	r3, r0
 8008a68:	4619      	mov	r1, r3
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f7ff fb2b 	bl	80080c6 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3708      	adds	r7, #8
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20000604 	.word	0x20000604

08008a80 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7f9 fd9e 	bl	80025d8 <HAL_HCD_Start>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008aa0:	7bfb      	ldrb	r3, [r7, #15]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f000 f912 	bl	8008ccc <USBH_Get_USB_Status>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008aac:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3710      	adds	r7, #16
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}

08008ab6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008ab6:	b580      	push	{r7, lr}
 8008ab8:	b084      	sub	sp, #16
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7f9 fda6 	bl	800261e <HAL_HCD_Stop>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f000 f8f7 	bl	8008ccc <USBH_Get_USB_Status>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ae2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3710      	adds	r7, #16
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	460b      	mov	r3, r1
 8008af6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008afe:	78fa      	ldrb	r2, [r7, #3]
 8008b00:	4611      	mov	r1, r2
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7f9 fdbd 	bl	8002682 <HAL_HCD_HC_GetXferCount>
 8008b08:	4603      	mov	r3, r0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008b12:	b590      	push	{r4, r7, lr}
 8008b14:	b089      	sub	sp, #36	@ 0x24
 8008b16:	af04      	add	r7, sp, #16
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	4608      	mov	r0, r1
 8008b1c:	4611      	mov	r1, r2
 8008b1e:	461a      	mov	r2, r3
 8008b20:	4603      	mov	r3, r0
 8008b22:	70fb      	strb	r3, [r7, #3]
 8008b24:	460b      	mov	r3, r1
 8008b26:	70bb      	strb	r3, [r7, #2]
 8008b28:	4613      	mov	r3, r2
 8008b2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b30:	2300      	movs	r3, #0
 8008b32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008b3a:	787c      	ldrb	r4, [r7, #1]
 8008b3c:	78ba      	ldrb	r2, [r7, #2]
 8008b3e:	78f9      	ldrb	r1, [r7, #3]
 8008b40:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008b42:	9302      	str	r3, [sp, #8]
 8008b44:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008b48:	9301      	str	r3, [sp, #4]
 8008b4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	4623      	mov	r3, r4
 8008b52:	f7f9 f9b7 	bl	8001ec4 <HAL_HCD_HC_Init>
 8008b56:	4603      	mov	r3, r0
 8008b58:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 f8b5 	bl	8008ccc <USBH_Get_USB_Status>
 8008b62:	4603      	mov	r3, r0
 8008b64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b66:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd90      	pop	{r4, r7, pc}

08008b70 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	460b      	mov	r3, r1
 8008b7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008b80:	2300      	movs	r3, #0
 8008b82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008b8a:	78fa      	ldrb	r2, [r7, #3]
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7f9 fa50 	bl	8002034 <HAL_HCD_HC_Halt>
 8008b94:	4603      	mov	r3, r0
 8008b96:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 f896 	bl	8008ccc <USBH_Get_USB_Status>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ba4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008bae:	b590      	push	{r4, r7, lr}
 8008bb0:	b089      	sub	sp, #36	@ 0x24
 8008bb2:	af04      	add	r7, sp, #16
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	4608      	mov	r0, r1
 8008bb8:	4611      	mov	r1, r2
 8008bba:	461a      	mov	r2, r3
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	70fb      	strb	r3, [r7, #3]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	70bb      	strb	r3, [r7, #2]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008bd6:	787c      	ldrb	r4, [r7, #1]
 8008bd8:	78ba      	ldrb	r2, [r7, #2]
 8008bda:	78f9      	ldrb	r1, [r7, #3]
 8008bdc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008be0:	9303      	str	r3, [sp, #12]
 8008be2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008be4:	9302      	str	r3, [sp, #8]
 8008be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be8:	9301      	str	r3, [sp, #4]
 8008bea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bee:	9300      	str	r3, [sp, #0]
 8008bf0:	4623      	mov	r3, r4
 8008bf2:	f7f9 fa43 	bl	800207c <HAL_HCD_HC_SubmitRequest>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f000 f865 	bl	8008ccc <USBH_Get_USB_Status>
 8008c02:	4603      	mov	r3, r0
 8008c04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c06:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd90      	pop	{r4, r7, pc}

08008c10 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008c22:	78fa      	ldrb	r2, [r7, #3]
 8008c24:	4611      	mov	r1, r2
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7f9 fd16 	bl	8002658 <HAL_HCD_HC_GetURBState>
 8008c2c:	4603      	mov	r3, r0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b082      	sub	sp, #8
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
 8008c3e:	460b      	mov	r3, r1
 8008c40:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d103      	bne.n	8008c54 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008c4c:	78fb      	ldrb	r3, [r7, #3]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f000 f868 	bl	8008d24 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008c54:	20c8      	movs	r0, #200	@ 0xc8
 8008c56:	f7f8 fdcb 	bl	80017f0 <HAL_Delay>
  return USBH_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	70fb      	strb	r3, [r7, #3]
 8008c70:	4613      	mov	r3, r2
 8008c72:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008c7a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008c7c:	78fa      	ldrb	r2, [r7, #3]
 8008c7e:	68f9      	ldr	r1, [r7, #12]
 8008c80:	4613      	mov	r3, r2
 8008c82:	011b      	lsls	r3, r3, #4
 8008c84:	1a9b      	subs	r3, r3, r2
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	440b      	add	r3, r1
 8008c8a:	3317      	adds	r3, #23
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00a      	beq.n	8008ca8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008c92:	78fa      	ldrb	r2, [r7, #3]
 8008c94:	68f9      	ldr	r1, [r7, #12]
 8008c96:	4613      	mov	r3, r2
 8008c98:	011b      	lsls	r3, r3, #4
 8008c9a:	1a9b      	subs	r3, r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	440b      	add	r3, r1
 8008ca0:	333c      	adds	r3, #60	@ 0x3c
 8008ca2:	78ba      	ldrb	r2, [r7, #2]
 8008ca4:	701a      	strb	r2, [r3, #0]
 8008ca6:	e009      	b.n	8008cbc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008ca8:	78fa      	ldrb	r2, [r7, #3]
 8008caa:	68f9      	ldr	r1, [r7, #12]
 8008cac:	4613      	mov	r3, r2
 8008cae:	011b      	lsls	r3, r3, #4
 8008cb0:	1a9b      	subs	r3, r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	440b      	add	r3, r1
 8008cb6:	333d      	adds	r3, #61	@ 0x3d
 8008cb8:	78ba      	ldrb	r2, [r7, #2]
 8008cba:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3714      	adds	r7, #20
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
	...

08008ccc <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008cda:	79fb      	ldrb	r3, [r7, #7]
 8008cdc:	2b03      	cmp	r3, #3
 8008cde:	d817      	bhi.n	8008d10 <USBH_Get_USB_Status+0x44>
 8008ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ce8 <USBH_Get_USB_Status+0x1c>)
 8008ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce6:	bf00      	nop
 8008ce8:	08008cf9 	.word	0x08008cf9
 8008cec:	08008cff 	.word	0x08008cff
 8008cf0:	08008d05 	.word	0x08008d05
 8008cf4:	08008d0b 	.word	0x08008d0b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8008cfc:	e00b      	b.n	8008d16 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008cfe:	2302      	movs	r3, #2
 8008d00:	73fb      	strb	r3, [r7, #15]
    break;
 8008d02:	e008      	b.n	8008d16 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008d04:	2301      	movs	r3, #1
 8008d06:	73fb      	strb	r3, [r7, #15]
    break;
 8008d08:	e005      	b.n	8008d16 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d0e:	e002      	b.n	8008d16 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008d10:	2302      	movs	r3, #2
 8008d12:	73fb      	strb	r3, [r7, #15]
    break;
 8008d14:	bf00      	nop
  }
  return usb_status;
 8008d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3714      	adds	r7, #20
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008d2e:	79fb      	ldrb	r3, [r7, #7]
 8008d30:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008d32:	79fb      	ldrb	r3, [r7, #7]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d102      	bne.n	8008d3e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	73fb      	strb	r3, [r7, #15]
 8008d3c:	e001      	b.n	8008d42 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008d42:	7bfb      	ldrb	r3, [r7, #15]
 8008d44:	461a      	mov	r2, r3
 8008d46:	2101      	movs	r1, #1
 8008d48:	4803      	ldr	r0, [pc, #12]	@ (8008d58 <MX_DriverVbusFS+0x34>)
 8008d4a:	f7f9 f83b 	bl	8001dc4 <HAL_GPIO_WritePin>
}
 8008d4e:	bf00      	nop
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	40020800 	.word	0x40020800

08008d5c <malloc>:
 8008d5c:	4b02      	ldr	r3, [pc, #8]	@ (8008d68 <malloc+0xc>)
 8008d5e:	4601      	mov	r1, r0
 8008d60:	6818      	ldr	r0, [r3, #0]
 8008d62:	f000 b82d 	b.w	8008dc0 <_malloc_r>
 8008d66:	bf00      	nop
 8008d68:	20000030 	.word	0x20000030

08008d6c <free>:
 8008d6c:	4b02      	ldr	r3, [pc, #8]	@ (8008d78 <free+0xc>)
 8008d6e:	4601      	mov	r1, r0
 8008d70:	6818      	ldr	r0, [r3, #0]
 8008d72:	f000 b8f5 	b.w	8008f60 <_free_r>
 8008d76:	bf00      	nop
 8008d78:	20000030 	.word	0x20000030

08008d7c <sbrk_aligned>:
 8008d7c:	b570      	push	{r4, r5, r6, lr}
 8008d7e:	4e0f      	ldr	r6, [pc, #60]	@ (8008dbc <sbrk_aligned+0x40>)
 8008d80:	460c      	mov	r4, r1
 8008d82:	6831      	ldr	r1, [r6, #0]
 8008d84:	4605      	mov	r5, r0
 8008d86:	b911      	cbnz	r1, 8008d8e <sbrk_aligned+0x12>
 8008d88:	f000 f8ae 	bl	8008ee8 <_sbrk_r>
 8008d8c:	6030      	str	r0, [r6, #0]
 8008d8e:	4621      	mov	r1, r4
 8008d90:	4628      	mov	r0, r5
 8008d92:	f000 f8a9 	bl	8008ee8 <_sbrk_r>
 8008d96:	1c43      	adds	r3, r0, #1
 8008d98:	d103      	bne.n	8008da2 <sbrk_aligned+0x26>
 8008d9a:	f04f 34ff 	mov.w	r4, #4294967295
 8008d9e:	4620      	mov	r0, r4
 8008da0:	bd70      	pop	{r4, r5, r6, pc}
 8008da2:	1cc4      	adds	r4, r0, #3
 8008da4:	f024 0403 	bic.w	r4, r4, #3
 8008da8:	42a0      	cmp	r0, r4
 8008daa:	d0f8      	beq.n	8008d9e <sbrk_aligned+0x22>
 8008dac:	1a21      	subs	r1, r4, r0
 8008dae:	4628      	mov	r0, r5
 8008db0:	f000 f89a 	bl	8008ee8 <_sbrk_r>
 8008db4:	3001      	adds	r0, #1
 8008db6:	d1f2      	bne.n	8008d9e <sbrk_aligned+0x22>
 8008db8:	e7ef      	b.n	8008d9a <sbrk_aligned+0x1e>
 8008dba:	bf00      	nop
 8008dbc:	200009e4 	.word	0x200009e4

08008dc0 <_malloc_r>:
 8008dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008dc4:	1ccd      	adds	r5, r1, #3
 8008dc6:	f025 0503 	bic.w	r5, r5, #3
 8008dca:	3508      	adds	r5, #8
 8008dcc:	2d0c      	cmp	r5, #12
 8008dce:	bf38      	it	cc
 8008dd0:	250c      	movcc	r5, #12
 8008dd2:	2d00      	cmp	r5, #0
 8008dd4:	4606      	mov	r6, r0
 8008dd6:	db01      	blt.n	8008ddc <_malloc_r+0x1c>
 8008dd8:	42a9      	cmp	r1, r5
 8008dda:	d904      	bls.n	8008de6 <_malloc_r+0x26>
 8008ddc:	230c      	movs	r3, #12
 8008dde:	6033      	str	r3, [r6, #0]
 8008de0:	2000      	movs	r0, #0
 8008de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008de6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ebc <_malloc_r+0xfc>
 8008dea:	f000 f869 	bl	8008ec0 <__malloc_lock>
 8008dee:	f8d8 3000 	ldr.w	r3, [r8]
 8008df2:	461c      	mov	r4, r3
 8008df4:	bb44      	cbnz	r4, 8008e48 <_malloc_r+0x88>
 8008df6:	4629      	mov	r1, r5
 8008df8:	4630      	mov	r0, r6
 8008dfa:	f7ff ffbf 	bl	8008d7c <sbrk_aligned>
 8008dfe:	1c43      	adds	r3, r0, #1
 8008e00:	4604      	mov	r4, r0
 8008e02:	d158      	bne.n	8008eb6 <_malloc_r+0xf6>
 8008e04:	f8d8 4000 	ldr.w	r4, [r8]
 8008e08:	4627      	mov	r7, r4
 8008e0a:	2f00      	cmp	r7, #0
 8008e0c:	d143      	bne.n	8008e96 <_malloc_r+0xd6>
 8008e0e:	2c00      	cmp	r4, #0
 8008e10:	d04b      	beq.n	8008eaa <_malloc_r+0xea>
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	4639      	mov	r1, r7
 8008e16:	4630      	mov	r0, r6
 8008e18:	eb04 0903 	add.w	r9, r4, r3
 8008e1c:	f000 f864 	bl	8008ee8 <_sbrk_r>
 8008e20:	4581      	cmp	r9, r0
 8008e22:	d142      	bne.n	8008eaa <_malloc_r+0xea>
 8008e24:	6821      	ldr	r1, [r4, #0]
 8008e26:	1a6d      	subs	r5, r5, r1
 8008e28:	4629      	mov	r1, r5
 8008e2a:	4630      	mov	r0, r6
 8008e2c:	f7ff ffa6 	bl	8008d7c <sbrk_aligned>
 8008e30:	3001      	adds	r0, #1
 8008e32:	d03a      	beq.n	8008eaa <_malloc_r+0xea>
 8008e34:	6823      	ldr	r3, [r4, #0]
 8008e36:	442b      	add	r3, r5
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	f8d8 3000 	ldr.w	r3, [r8]
 8008e3e:	685a      	ldr	r2, [r3, #4]
 8008e40:	bb62      	cbnz	r2, 8008e9c <_malloc_r+0xdc>
 8008e42:	f8c8 7000 	str.w	r7, [r8]
 8008e46:	e00f      	b.n	8008e68 <_malloc_r+0xa8>
 8008e48:	6822      	ldr	r2, [r4, #0]
 8008e4a:	1b52      	subs	r2, r2, r5
 8008e4c:	d420      	bmi.n	8008e90 <_malloc_r+0xd0>
 8008e4e:	2a0b      	cmp	r2, #11
 8008e50:	d917      	bls.n	8008e82 <_malloc_r+0xc2>
 8008e52:	1961      	adds	r1, r4, r5
 8008e54:	42a3      	cmp	r3, r4
 8008e56:	6025      	str	r5, [r4, #0]
 8008e58:	bf18      	it	ne
 8008e5a:	6059      	strne	r1, [r3, #4]
 8008e5c:	6863      	ldr	r3, [r4, #4]
 8008e5e:	bf08      	it	eq
 8008e60:	f8c8 1000 	streq.w	r1, [r8]
 8008e64:	5162      	str	r2, [r4, r5]
 8008e66:	604b      	str	r3, [r1, #4]
 8008e68:	4630      	mov	r0, r6
 8008e6a:	f000 f82f 	bl	8008ecc <__malloc_unlock>
 8008e6e:	f104 000b 	add.w	r0, r4, #11
 8008e72:	1d23      	adds	r3, r4, #4
 8008e74:	f020 0007 	bic.w	r0, r0, #7
 8008e78:	1ac2      	subs	r2, r0, r3
 8008e7a:	bf1c      	itt	ne
 8008e7c:	1a1b      	subne	r3, r3, r0
 8008e7e:	50a3      	strne	r3, [r4, r2]
 8008e80:	e7af      	b.n	8008de2 <_malloc_r+0x22>
 8008e82:	6862      	ldr	r2, [r4, #4]
 8008e84:	42a3      	cmp	r3, r4
 8008e86:	bf0c      	ite	eq
 8008e88:	f8c8 2000 	streq.w	r2, [r8]
 8008e8c:	605a      	strne	r2, [r3, #4]
 8008e8e:	e7eb      	b.n	8008e68 <_malloc_r+0xa8>
 8008e90:	4623      	mov	r3, r4
 8008e92:	6864      	ldr	r4, [r4, #4]
 8008e94:	e7ae      	b.n	8008df4 <_malloc_r+0x34>
 8008e96:	463c      	mov	r4, r7
 8008e98:	687f      	ldr	r7, [r7, #4]
 8008e9a:	e7b6      	b.n	8008e0a <_malloc_r+0x4a>
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	42a3      	cmp	r3, r4
 8008ea2:	d1fb      	bne.n	8008e9c <_malloc_r+0xdc>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	6053      	str	r3, [r2, #4]
 8008ea8:	e7de      	b.n	8008e68 <_malloc_r+0xa8>
 8008eaa:	230c      	movs	r3, #12
 8008eac:	6033      	str	r3, [r6, #0]
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f000 f80c 	bl	8008ecc <__malloc_unlock>
 8008eb4:	e794      	b.n	8008de0 <_malloc_r+0x20>
 8008eb6:	6005      	str	r5, [r0, #0]
 8008eb8:	e7d6      	b.n	8008e68 <_malloc_r+0xa8>
 8008eba:	bf00      	nop
 8008ebc:	200009e8 	.word	0x200009e8

08008ec0 <__malloc_lock>:
 8008ec0:	4801      	ldr	r0, [pc, #4]	@ (8008ec8 <__malloc_lock+0x8>)
 8008ec2:	f000 b84b 	b.w	8008f5c <__retarget_lock_acquire_recursive>
 8008ec6:	bf00      	nop
 8008ec8:	20000b28 	.word	0x20000b28

08008ecc <__malloc_unlock>:
 8008ecc:	4801      	ldr	r0, [pc, #4]	@ (8008ed4 <__malloc_unlock+0x8>)
 8008ece:	f000 b846 	b.w	8008f5e <__retarget_lock_release_recursive>
 8008ed2:	bf00      	nop
 8008ed4:	20000b28 	.word	0x20000b28

08008ed8 <memset>:
 8008ed8:	4402      	add	r2, r0
 8008eda:	4603      	mov	r3, r0
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d100      	bne.n	8008ee2 <memset+0xa>
 8008ee0:	4770      	bx	lr
 8008ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ee6:	e7f9      	b.n	8008edc <memset+0x4>

08008ee8 <_sbrk_r>:
 8008ee8:	b538      	push	{r3, r4, r5, lr}
 8008eea:	4d06      	ldr	r5, [pc, #24]	@ (8008f04 <_sbrk_r+0x1c>)
 8008eec:	2300      	movs	r3, #0
 8008eee:	4604      	mov	r4, r0
 8008ef0:	4608      	mov	r0, r1
 8008ef2:	602b      	str	r3, [r5, #0]
 8008ef4:	f7f8 fb98 	bl	8001628 <_sbrk>
 8008ef8:	1c43      	adds	r3, r0, #1
 8008efa:	d102      	bne.n	8008f02 <_sbrk_r+0x1a>
 8008efc:	682b      	ldr	r3, [r5, #0]
 8008efe:	b103      	cbz	r3, 8008f02 <_sbrk_r+0x1a>
 8008f00:	6023      	str	r3, [r4, #0]
 8008f02:	bd38      	pop	{r3, r4, r5, pc}
 8008f04:	20000b24 	.word	0x20000b24

08008f08 <__errno>:
 8008f08:	4b01      	ldr	r3, [pc, #4]	@ (8008f10 <__errno+0x8>)
 8008f0a:	6818      	ldr	r0, [r3, #0]
 8008f0c:	4770      	bx	lr
 8008f0e:	bf00      	nop
 8008f10:	20000030 	.word	0x20000030

08008f14 <__libc_init_array>:
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	4d0d      	ldr	r5, [pc, #52]	@ (8008f4c <__libc_init_array+0x38>)
 8008f18:	4c0d      	ldr	r4, [pc, #52]	@ (8008f50 <__libc_init_array+0x3c>)
 8008f1a:	1b64      	subs	r4, r4, r5
 8008f1c:	10a4      	asrs	r4, r4, #2
 8008f1e:	2600      	movs	r6, #0
 8008f20:	42a6      	cmp	r6, r4
 8008f22:	d109      	bne.n	8008f38 <__libc_init_array+0x24>
 8008f24:	4d0b      	ldr	r5, [pc, #44]	@ (8008f54 <__libc_init_array+0x40>)
 8008f26:	4c0c      	ldr	r4, [pc, #48]	@ (8008f58 <__libc_init_array+0x44>)
 8008f28:	f000 f864 	bl	8008ff4 <_init>
 8008f2c:	1b64      	subs	r4, r4, r5
 8008f2e:	10a4      	asrs	r4, r4, #2
 8008f30:	2600      	movs	r6, #0
 8008f32:	42a6      	cmp	r6, r4
 8008f34:	d105      	bne.n	8008f42 <__libc_init_array+0x2e>
 8008f36:	bd70      	pop	{r4, r5, r6, pc}
 8008f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f3c:	4798      	blx	r3
 8008f3e:	3601      	adds	r6, #1
 8008f40:	e7ee      	b.n	8008f20 <__libc_init_array+0xc>
 8008f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f46:	4798      	blx	r3
 8008f48:	3601      	adds	r6, #1
 8008f4a:	e7f2      	b.n	8008f32 <__libc_init_array+0x1e>
 8008f4c:	08009030 	.word	0x08009030
 8008f50:	08009030 	.word	0x08009030
 8008f54:	08009030 	.word	0x08009030
 8008f58:	08009034 	.word	0x08009034

08008f5c <__retarget_lock_acquire_recursive>:
 8008f5c:	4770      	bx	lr

08008f5e <__retarget_lock_release_recursive>:
 8008f5e:	4770      	bx	lr

08008f60 <_free_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	4605      	mov	r5, r0
 8008f64:	2900      	cmp	r1, #0
 8008f66:	d041      	beq.n	8008fec <_free_r+0x8c>
 8008f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f6c:	1f0c      	subs	r4, r1, #4
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	bfb8      	it	lt
 8008f72:	18e4      	addlt	r4, r4, r3
 8008f74:	f7ff ffa4 	bl	8008ec0 <__malloc_lock>
 8008f78:	4a1d      	ldr	r2, [pc, #116]	@ (8008ff0 <_free_r+0x90>)
 8008f7a:	6813      	ldr	r3, [r2, #0]
 8008f7c:	b933      	cbnz	r3, 8008f8c <_free_r+0x2c>
 8008f7e:	6063      	str	r3, [r4, #4]
 8008f80:	6014      	str	r4, [r2, #0]
 8008f82:	4628      	mov	r0, r5
 8008f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f88:	f7ff bfa0 	b.w	8008ecc <__malloc_unlock>
 8008f8c:	42a3      	cmp	r3, r4
 8008f8e:	d908      	bls.n	8008fa2 <_free_r+0x42>
 8008f90:	6820      	ldr	r0, [r4, #0]
 8008f92:	1821      	adds	r1, r4, r0
 8008f94:	428b      	cmp	r3, r1
 8008f96:	bf01      	itttt	eq
 8008f98:	6819      	ldreq	r1, [r3, #0]
 8008f9a:	685b      	ldreq	r3, [r3, #4]
 8008f9c:	1809      	addeq	r1, r1, r0
 8008f9e:	6021      	streq	r1, [r4, #0]
 8008fa0:	e7ed      	b.n	8008f7e <_free_r+0x1e>
 8008fa2:	461a      	mov	r2, r3
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	b10b      	cbz	r3, 8008fac <_free_r+0x4c>
 8008fa8:	42a3      	cmp	r3, r4
 8008faa:	d9fa      	bls.n	8008fa2 <_free_r+0x42>
 8008fac:	6811      	ldr	r1, [r2, #0]
 8008fae:	1850      	adds	r0, r2, r1
 8008fb0:	42a0      	cmp	r0, r4
 8008fb2:	d10b      	bne.n	8008fcc <_free_r+0x6c>
 8008fb4:	6820      	ldr	r0, [r4, #0]
 8008fb6:	4401      	add	r1, r0
 8008fb8:	1850      	adds	r0, r2, r1
 8008fba:	4283      	cmp	r3, r0
 8008fbc:	6011      	str	r1, [r2, #0]
 8008fbe:	d1e0      	bne.n	8008f82 <_free_r+0x22>
 8008fc0:	6818      	ldr	r0, [r3, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	6053      	str	r3, [r2, #4]
 8008fc6:	4408      	add	r0, r1
 8008fc8:	6010      	str	r0, [r2, #0]
 8008fca:	e7da      	b.n	8008f82 <_free_r+0x22>
 8008fcc:	d902      	bls.n	8008fd4 <_free_r+0x74>
 8008fce:	230c      	movs	r3, #12
 8008fd0:	602b      	str	r3, [r5, #0]
 8008fd2:	e7d6      	b.n	8008f82 <_free_r+0x22>
 8008fd4:	6820      	ldr	r0, [r4, #0]
 8008fd6:	1821      	adds	r1, r4, r0
 8008fd8:	428b      	cmp	r3, r1
 8008fda:	bf04      	itt	eq
 8008fdc:	6819      	ldreq	r1, [r3, #0]
 8008fde:	685b      	ldreq	r3, [r3, #4]
 8008fe0:	6063      	str	r3, [r4, #4]
 8008fe2:	bf04      	itt	eq
 8008fe4:	1809      	addeq	r1, r1, r0
 8008fe6:	6021      	streq	r1, [r4, #0]
 8008fe8:	6054      	str	r4, [r2, #4]
 8008fea:	e7ca      	b.n	8008f82 <_free_r+0x22>
 8008fec:	bd38      	pop	{r3, r4, r5, pc}
 8008fee:	bf00      	nop
 8008ff0:	200009e8 	.word	0x200009e8

08008ff4 <_init>:
 8008ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff6:	bf00      	nop
 8008ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ffa:	bc08      	pop	{r3}
 8008ffc:	469e      	mov	lr, r3
 8008ffe:	4770      	bx	lr

08009000 <_fini>:
 8009000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009002:	bf00      	nop
 8009004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009006:	bc08      	pop	{r3}
 8009008:	469e      	mov	lr, r3
 800900a:	4770      	bx	lr
